RAM:0000 ;
RAM:0000 ; +-------------------------------------------------------------------------+
RAM:0000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
RAM:0000 ; |	    Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>	     |
RAM:0000 ; |			  License info:	54-F19A-B286-08			     |
RAM:0000 ; |				  James	Holland				     |
RAM:0000 ; +-------------------------------------------------------------------------+
RAM:0000 ;
RAM:0000 ; Input MD5   : F41BE27B933D0237FDD21DA8478311F8
RAM:0000
RAM:0000 ; File	Name   : P:\ECUs_no_sync\GL1200\GL1200.bin
RAM:0000 ; Format      : Binary	file
RAM:0000 ; Base	Address: 0000h Range: E000h - 10000h Loaded length: 2000h
RAM:0000 ;
RAM:0000 ; 1985	Honda GL1200 ECU
RAM:0000 ; This	ECU appears to use a Toshiba processor based on	the 63xx architecture
RAM:0000 ; A second 40-pin chip	contains an ADC	and some other
RAM:0000 ; (TBD	- timer	and port expander?) functions
RAM:0000 ; There are a total of	5202 bytes of code
RAM:0000 ; Date: 10th December 2023
RAM:0000
RAM:0000 ; Processor:	     6301 []
RAM:0000 ; Target assembler: Motorola FreeWare Assembler
RAM:0000
RAM:0000 ; ===========================================================================
RAM:0000
RAM:0000 ; Segment type: Regular
RAM:0000		 ; segment RAM
RAM:0000 P1DDR:		 rmb 1			 ; DATA	XREF: ROM:EF06w
RAM:0000					 ; =FEh
RAM:0001 P2DDR:		 rmb 1			 ; =1Eh
RAM:0002 ;
RAM:0002 ; Port	1 Data register
RAM:0002 ; bit 7 (0x80): out - LED3 (external drivers invert!)
RAM:0002 ; bit 6 (0x40): out - LED2
RAM:0002 ; bit 5 (0x20): out - LED1
RAM:0002 ; bit 4 (0x10): out - LED0
RAM:0002 ; bit 3 (0x08): out -
RAM:0002 ; bit 2 (0x04): out -
RAM:0002 ; bit 1 (0x02): out -
RAM:0002 ; bit 0 (0x01): in  - Right Cam Sensor
RAM:0002 PORT1:		 rmb 1			 ; DATA	XREF: Main_Loop+6Ar
RAM:0002					 ; Main_Loop+6Ew ...
RAM:0003 ;
RAM:0003 ; Port	2 Data register
RAM:0003 ; bit 7 (0x80): in - no external connection
RAM:0003 ; bit 6 (0x40): in - no external connection
RAM:0003 ; bit 5 (0x20): in - no external connection
RAM:0003 ; bit 4 (0x10): out - Watchdog	Reset
RAM:0003 ; bit 3 (0x08): out - IRQ IF Clear
RAM:0003 ; bit 2 (0x04): out -
RAM:0003 ; bit 1 (0x02): out -
RAM:0003 ; bit 0 (0x01): in  - Crank Sensor (Ns)
RAM:0003 PORT2:		 rmb 1			 ; DATA	XREF: ROM:nIRQ_IntHandlerr
RAM:0003					 ; ROM:E804w ...
RAM:0004 P3DDR:		 rmb 1
RAM:0005 P4DDR:		 rmb 1			 ; DATA	XREF: ROM:F006w
RAM:0006 PORT3:		 rmb 1
RAM:0007 PORT4:		 rmb 1
RAM:0008 ;
RAM:0008 ; Timer Control & Status Register 1
RAM:0008 ; bit 7 (0x80): ICF1
RAM:0008 ; bit 6 (0x40): OCF1
RAM:0008 ; bit 5 (0x20): TOF1
RAM:0008 ; bit 4 (0x10): EICI1
RAM:0008 ; bit 3 (0x08): EOCI1
RAM:0008 ; bit 2 (0x04): ETOI1
RAM:0008 ; bit 1 (0x02): IEDG1
RAM:0008 ; bit 0 (0x01): OLVL1
RAM:0008 TCSR1:		 rmb 1			 ; DATA	XREF: ROM:IC_IntHandlerr
RAM:0008					 ; ROM:loc_ED3Br ...
RAM:0009 FRCH:		 rmb 1			 ; DATA	XREF: Main_Loop+5r
RAM:0009					 ; Main_Loop:calc_Tick_4msr ...
RAM:000A FRCL:		 rmb 1
RAM:000B OCR1H:		 rmb 1			 ; DATA	XREF: ROM:ED2Cr
RAM:000B					 ; ROM:ED32r ...
RAM:000C OCR1L:		 rmb 1
RAM:000D ICR1H:		 rmb 1			 ; DATA	XREF: ROM:loc_E909r
RAM:000D					 ; ROM:EF1Dr ...
RAM:000E ICR1L:		 rmb 1
RAM:000F P3CSR:		 rmb 1
RAM:0010 RMCR:		 rmb 1			 ; DATA	XREF: sub_FE99+4r
RAM:0011 TRCSR1:	 rmb 1
RAM:0012 RDR:		 rmb 1
RAM:0013 TDR:		 rmb 1
RAM:0014 RAMCR:		 rmb 1
RAM:0015		 rmb 1
RAM:0016		 rmb 1
RAM:0017		 rmb 1
RAM:0018 ;
RAM:0018 ; Timer Control & Status Register 2
RAM:0018 ; bit 7 (0x80): ICF2
RAM:0018 ; bit 6 (0x40): OCF2
RAM:0018 ; bit 5 (0x20): TOF2
RAM:0018 ; bit 4 (0x10): EICI2
RAM:0018 ; bit 3 (0x08): EOCI2
RAM:0018 ; bit 2 (0x04): ETOI2
RAM:0018 ; bit 1 (0x02): IEDG2
RAM:0018 ; bit 0 (0x01): OLVL2
RAM:0018 TCSR2:		 rmb 1			 ; DATA	XREF: ROM:E813r
RAM:0018					 ; ROM:E90Dr ...
RAM:0019		 rmb 1
RAM:001A		 rmb 1
RAM:001B OCR2H:		 rmb 1			 ; DATA	XREF: ROM:ED91r
RAM:001B					 ; ROM:ED97r ...
RAM:001C		 rmb 1
RAM:001D ICR2H:		 rmb 1			 ; DATA	XREF: ROM:EF21r
RAM:001D					 ; ROM:EFACr ...
RAM:001E		 rmb 1
RAM:001F		 rmb 1
RAM:0020		 rmb 1
RAM:0021		 rmb 1
RAM:0022		 rmb 1
RAM:0023		 rmb 1
RAM:0024		 rmb 1
RAM:0025		 rmb 1
RAM:0026		 rmb 1
RAM:0027		 rmb 1
RAM:0028		 rmb 1
RAM:0029		 rmb 1
RAM:002A		 rmb 1
RAM:002B		 rmb 1
RAM:002C		 rmb 1
RAM:002D		 rmb 1
RAM:002E		 rmb 1
RAM:002F		 rmb 1
RAM:0030		 rmb 1
RAM:0031		 rmb 1
RAM:0032		 rmb 1
RAM:0033		 rmb 1
RAM:0034		 rmb 1
RAM:0035		 rmb 1
RAM:0036		 rmb 1
RAM:0037		 rmb 1
RAM:0038		 rmb 1
RAM:0039		 rmb 1
RAM:003A		 rmb 1
RAM:003B		 rmb 1
RAM:003C		 rmb 1
RAM:003D		 rmb 1
RAM:003E		 rmb 1
RAM:003F		 rmb 1
RAM:0040 byte_40:	 rmb 1			 ; DATA	XREF: sub_FCEF+20r
RAM:0041		 rmb 1
RAM:0042 byte_42:	 rmb 1			 ; DATA	XREF: sub_FCEF+10r
RAM:0043		 rmb 1
RAM:0044 byte_44:	 rmb 1			 ; DATA	XREF: ROM:EF3Dw
RAM:0045 byte_45:	 rmb 1			 ; DATA	XREF: JT3_0+DFw
RAM:0046 byte_46:	 rmb 1			 ; DATA	XREF: ROM:ED7Dw
RAM:0046					 ; ROM:EDC0r ...
RAM:0047		 rmb 1
RAM:0048 byte_48:	 rmb 1			 ; DATA	XREF: sub_FCA7+20r
RAM:0049		 rmb 1
RAM:004A byte_4A:	 rmb 1			 ; DATA	XREF: sub_FCA7+10r
RAM:004B		 rmb 1
RAM:004C byte_4C:	 rmb 1			 ; DATA	XREF: ROM:EF42w
RAM:004D byte_4D:	 rmb 1			 ; DATA	XREF: JT3_0:loc_F947w
RAM:004E byte_4E:	 rmb 1			 ; DATA	XREF: ROM:ED16w
RAM:004E					 ; ROM:ED5Br ...
RAM:004F		 rmb 1
RAM:0050 byte_50:	 rmb 1			 ; DATA	XREF: ROM:F87Fw
RAM:0050					 ; JT3_0:loc_FA2Fr ...
RAM:0051 count_4ms:	 rmb 1			 ; DATA	XREF: Main_Loop+Fw
RAM:0051					 ; Main_Loop+88r ...
RAM:0051					 ; increments every 4ms
RAM:0052 byte_52:	 rmb 1			 ; DATA	XREF: sub_FB39+20r
RAM:0053		 rmb 1
RAM:0054 byte_54:	 rmb 1			 ; DATA	XREF: sub_FB39+27r
RAM:0055		 rmb 1
RAM:0056 byte_56:	 rmb 1			 ; DATA	XREF: ROM:EB36w
RAM:0056					 ; ROM:EB4Aw ...
RAM:0057		 rmb 1
RAM:0058 result_58:	 rmb 1			 ; DATA	XREF: ROM:EB5Ar
RAM:0058					 ; ROM:EB65w ...
RAM:0058					 ; MAP related,	result from 3d LUT
RAM:0059		 rmb 1
RAM:005A VBatt_5A:	 rmb 1			 ; DATA	XREF: sub_EA34+48r
RAM:005A					 ; sub_F12D+32r ...
RAM:005B		 rmb 1
RAM:005C byte_5C:	 rmb 1			 ; DATA	XREF: sub_EA34+4Cr
RAM:005C					 ; doTick_524ms-74Fw ...
RAM:005D		 rmb 1
RAM:005E Baro_IAT_5E:	 rmb 1			 ; DATA	XREF: sub_EA34:loc_EA49r
RAM:005E					 ; sub_EA34+1Ar ...
RAM:005F byte_5F:	 rmb 1			 ; DATA	XREF: sub_EA34+29r
RAM:005F					 ; ROM:loc_EAB9w
RAM:0060 CTS_60:	 rmb 1			 ; DATA	XREF: sub_EA34+Fr
RAM:0060					 ; sub_EEA6+1Ew ...
RAM:0060					 ; a copy of CTS_C0 or CTS_BE
RAM:0061 byte_61:	 rmb 1			 ; DATA	XREF: sub_EA34+1Cr
RAM:0061					 ; sub_F12D+1Cr
RAM:0062 byte_62:	 rmb 1			 ; DATA	XREF: sub_F4E5:loc_F50Ew
RAM:0062					 ; sub_FBC8+Ar
RAM:0063 byte_63:	 rmb 1			 ; DATA	XREF: ROM:loc_EBF4w
RAM:0063					 ; sub_F4E5+1Ar ...
RAM:0063					 ; from	LUT at E500
RAM:0064 CTS_64:	 rmb 1			 ; DATA	XREF: doTick_262ms+4Cw
RAM:0064					 ; sub_F4E5+1Cr
RAM:0065 byte_65:	 rmb 1			 ; DATA	XREF: sub_F4E5+17w
RAM:0065					 ; sub_F4E5+20r
RAM:0066 byte_66:	 rmb 1			 ; DATA	XREF: ROM:loc_F5E3w
RAM:0066					 ; sub_FBF8+12r ...
RAM:0067		 rmb 1
RAM:0068 byte_68:	 rmb 1			 ; DATA	XREF: ROM:F5CAw
RAM:0069 VBatt_69:	 rmb 1			 ; DATA	XREF: get_VBatt+30w
RAM:0069					 ; ROM:F5DAr
RAM:0069					 ; from	the LUT	at E190
RAM:006A		 rmb 1
RAM:006B byte_6B:	 rmb 1			 ; DATA	XREF: get_VBatt+6Bw
RAM:006B					 ; ROM:F5DCr
RAM:006C		 rmb 1
RAM:006D count_6D:	 rmb 1			 ; DATA	XREF: get_VBatt+40w
RAM:006D					 ; get_VBatt:loc_F38Cr	...
RAM:006E CTS:		 rmb 1			 ; DATA	XREF: doTick_262ms+24w
RAM:006E					 ; doTick_262ms+34r ...
RAM:006F IAT:		 rmb 1			 ; DATA	XREF: doTick_262ms+Dw
RAM:0070 Baro_70:	 rmb 1			 ; DATA	XREF: get_BARO:loc_F282w
RAM:0070					 ; get_BARO+29r ...
RAM:0071 MAPL_Tn:	 rmb 1			 ; DATA	XREF: ROM:loc_EB39r
RAM:0071					 ; ROM:EBDFr ...
RAM:0071					 ;  MAPL_T1
RAM:0072 MAPR_T1:	 rmb 1			 ; DATA	XREF: ROM:MAPR_LUr
RAM:0072					 ; ROM:EBD7r ...
RAM:0072					 ;  MAPR_T1
RAM:0073 MAPL:		 rmb 1			 ; DATA	XREF: ROM:EFA2r
RAM:0073					 ; Get_MAP:store_MAPLw	...
RAM:0074 MAPR:		 rmb 1			 ; DATA	XREF: Get_MAP+12r
RAM:0074					 ; Get_MAP:store_MAPRw	...
RAM:0075 TPS:		 rmb 1			 ; DATA	XREF: ROM:EA92r
RAM:0075					 ; ROM:EA9Ar ...
RAM:0076 byte_76:	 rmb 1			 ; DATA	XREF: ROM:EF8Ew
RAM:0076					 ; sub_F3C2+6w
RAM:0076					 ;  TPS_T1
RAM:0077 byte_77:	 rmb 1			 ; DATA	XREF: sub_F3C2r
RAM:0078 byte_78:	 rmb 1			 ; DATA	XREF: ROM:EF90w
RAM:0078					 ; sub_F3C2+2w
RAM:0079 byte_79:	 rmb 1			 ; DATA	XREF: ROM:EA9Cr
RAM:0079					 ; get_VBatt+34r ...
RAM:007A byte_7A:	 rmb 1			 ; DATA	XREF: doTick_524ms-757w
RAM:007A					 ; doTick_524ms-74Dr
RAM:007B VBatt:		 rmb 1			 ; DATA	XREF: get_VBatt+5w
RAM:007B					 ; get_VBatt+1Cr
RAM:007B					 ; VBatt = B+ *	0.2857
RAM:007C Baro_7C:	 rmb 1			 ; DATA	XREF: MAP_F1CCr
RAM:007C					 ; get_BARO+24w
RAM:007D IAT_7D:	 rmb 1			 ; DATA	XREF: doTick_262ms+15w
RAM:007D					 ; get_BARO+26r
RAM:007E dCAS_Count:	 rmb 1			 ; DATA	XREF: ROM:ED65r
RAM:007E					 ; ROM:EDCAr ...
RAM:007F		 rmb 1
RAM:0080 dCAS_Count_T1:	 rmb 1			 ; DATA	XREF: ROM:F5CDr
RAM:0080					 ; ROM:loc_F7E5w ...
RAM:0081		 rmb 1
RAM:0082 CAS_Count:	 rmb 1			 ; DATA	XREF: ROM:F794w
RAM:0082					 ; ROM:F79Cr ...
RAM:0083		 rmb 1
RAM:0084 byte_84:	 rmb 1			 ; DATA	XREF: ROM:E837w
RAM:0084					 ; sub_E880+Er	...
RAM:0085 count_4ms_B:	 rmb 1			 ; DATA	XREF: Main_Loop+13r
RAM:0085					 ; Main_Loop+18w ...
RAM:0086 byte_86:	 rmb 1			 ; DATA	XREF: ROM:E80Cr
RAM:0086					 ; ROM:loc_EA8Br ...
RAM:0086					 ; seems to be RPM
RAM:0087		 rmb 1
RAM:0088 byte_88:	 rmb 1			 ; DATA	XREF: sub_F6BB+8w
RAM:0088					 ; sub_FABB+8w	...
RAM:0089 byte_89:	 rmb 1			 ; DATA	XREF: sub_FAC9:loc_FAD8w
RAM:0089					 ; sub_FEE7+3r
RAM:008A byte_8A:	 rmb 1			 ; DATA	XREF: sub_F6BB+Aw
RAM:008B byte_8B:	 rmb 1			 ; DATA	XREF: ROM:F7D5w
RAM:008B					 ; sub_FABB+6r	...
RAM:008C byte_8C:	 rmb 1			 ; DATA	XREF: ROM:F7D1r
RAM:008C					 ; ROM:loc_F7D8w ...
RAM:008D		 rmb 1
RAM:008E tmr_4ms:	 rmb 1			 ; DATA	XREF: Main_Loop+3r
RAM:008E					 ; Main_Loop+Dw ...
RAM:008E					 ; 4.096ms timer
RAM:008F LEDs_8F:	 rmb 1			 ; DATA	XREF: doTick_16ms+1Ew
RAM:008F					 ; doTick_16ms:loc_F2DFr ...
RAM:0090 byte_90:	 rmb 1			 ; DATA	XREF: doTick_16ms+1Cw
RAM:0090					 ; doTick_16ms+2Fr ...
RAM:0090					 ; counter loaded from E065
RAM:0091 count_91:	 rmb 1			 ; DATA	XREF: ROM:EF47w
RAM:0091					 ; doTick_16ms:loc_F32Ar ...
RAM:0092 IAT_Raw:	 rmb 1
RAM:0093 CTS_Raw:	 rmb 1
RAM:0094 BARO_Raw:	 rmb 1
RAM:0095 MAPL_Raw:	 rmb 1			 ; DATA	XREF: ROM:EB56r
RAM:0095					 ; ROM:loc_EBD3r ...
RAM:0096 MAPR_Raw:	 rmb 1			 ; DATA	XREF: ROM:loc_EB5Fr
RAM:0096					 ; ROM:loc_EBDBr ...
RAM:0097 TPS_Raw:	 rmb 1			 ; DATA	XREF: sub_F511+8r
RAM:0097					 ; sub_F511:MAP_fault_F521r
RAM:0098 count_98:	 rmb 1			 ; DATA	XREF: sub_E880+20r
RAM:0098					 ; sub_E880+28w ...
RAM:0099		 rmb 1
RAM:009A		 rmb 1
RAM:009B		 rmb 1
RAM:009C		 rmb 1
RAM:009D Count_9D:	 rmb 1			 ; DATA	XREF: doTick_16ms+2r
RAM:009D					 ; doTick_16ms+7w ...
RAM:009E byte_9E:	 rmb 1			 ; DATA	XREF: ROM:ED26r
RAM:009E					 ; ROM:ED8Br ...
RAM:009F byte_9F:	 rmb 1			 ; DATA	XREF: ROM:ED6Dr
RAM:009F					 ; ROM:ED71w ...
RAM:00A0 ; status_A0:
RAM:00A0 ;  bit	7 (0x80):
RAM:00A0 ;  bit	6 (0x40):
RAM:00A0 ;  bit	5 (0x20):
RAM:00A0 ;  bit	4 (0x10):
RAM:00A0 ;  bit	3 (0x08):
RAM:00A0 ;  bit	2 (0x04):
RAM:00A0 ;  bit	1 (0x02):
RAM:00A0 ;  bit	0 (0x01): table	switch MAP/TPS
RAM:00A0 status_A0:	 rmb 1			 ; DATA	XREF: ROM:EB15r
RAM:00A0					 ; ROM:loc_EB74r ...
RAM:00A1 count_A1:	 rmb 1			 ; DATA	XREF: Main_Loop+4Ew
RAM:00A1					 ; ROM:F04Fw ...
RAM:00A2 byte_A2:	 rmb 1			 ; DATA	XREF: sub_F0C7+Br
RAM:00A2					 ; sub_F0C7+13w ...
RAM:00A3
RAM:00A3 ; status_A3:
RAM:00A3 ;  bit	7 (0x80):
RAM:00A3 ;  bit	6 (0x40):
RAM:00A3 ;  bit	5 (0x20): Set on IC1 interrupt
RAM:00A3 ;  bit	4 (0x10):
RAM:00A3 ;  bit	3 (0x08):
RAM:00A3 ;  bit	2 (0x04):
RAM:00A3 ;  bit	1 (0x02):
RAM:00A3 ;  bit	0 (0x01):
RAM:00A3 status_A3:	 rmb 1			 ; DATA	XREF: ROM:E80Ar
RAM:00A3					 ; ROM:E81Ew ...
RAM:00A4 byte_A4:	 rmb 1			 ; DATA	XREF: sub_EA34r
RAM:00A4					 ; ROM:ED05r ...
RAM:00A5 byte_A5:	 rmb 1			 ; DATA	XREF: ROM:EF54w
RAM:00A5					 ; doTick_16ms+13r ...
RAM:00A6 byte_A6:	 rmb 1			 ; DATA	XREF: sub_E880:loc_E8ABr
RAM:00A6					 ; sub_E880+2Fw ...
RAM:00A7 byte_A7:	 rmb 1			 ; DATA	XREF: Main_Loop+1Dr
RAM:00A7					 ; Main_Loop+2Ar ...
RAM:00A8 byte_A8:	 rmb 1			 ; DATA	XREF: sub_F463+4r
RAM:00A8					 ; sub_F463+6w	...
RAM:00A9 byte_A9:	 rmb 1			 ; DATA	XREF: sub_EEA6+35w
RAM:00A9					 ; ROM:EFC1w ...
RAM:00AA byte_AA:	 rmb 1			 ; DATA	XREF: ROM:EF56w
RAM:00AA					 ; ROM:F7A4r ...
RAM:00AB		 rmb 1
RAM:00AC byte_AC:	 rmb 1			 ; DATA	XREF: ROM:F824r
RAM:00AC					 ; ROM:loc_F82Ar ...
RAM:00AD byte_AD:	 rmb 1			 ; DATA	XREF: Main_Loop+74w
RAM:00AD					 ; ROM:F075w ...
RAM:00AE byte_AE:	 rmb 1			 ; DATA	XREF: sub_EEA6+3Dr
RAM:00AE					 ; sub_EEA6+44w ...
RAM:00AF byte_AF:	 rmb 1			 ; DATA	XREF: sub_EA34+18w
RAM:00AF					 ; sub_EA34+20r ...
RAM:00AF					 ; temporary register (Heap)?
RAM:00B0 byte_B0:	 rmb 1			 ; DATA	XREF: doTick_524ms-775r
RAM:00B0					 ; doTick_524ms-765w
RAM:00B1 byte_B1:	 rmb 1			 ; DATA	XREF: sub_EA34+27w
RAM:00B1					 ; sub_EA34:loc_EA6Dr ...
RAM:00B2 byte_B2:	 rmb 1			 ; DATA	XREF: tableLU_3D+1Ew
RAM:00B3 byte_B3:	 rmb 1			 ; DATA	XREF: ROM:EB13w
RAM:00B3					 ; ROM:EB40r ...
RAM:00B3					 ; scaled RPM for table	LU
RAM:00B4		 rmb 1
RAM:00B5 byte_B5:	 rmb 1			 ; DATA	XREF: JT3_0+47w
RAM:00B5					 ; JT3_0+97w ...
RAM:00B6 byte_B6:	 rmb 1			 ; DATA	XREF: sub_FB39+13w
RAM:00B6					 ; sub_FB39+19w ...
RAM:00B7 byte_B7:	 rmb 1			 ; DATA	XREF: sub_F686w
RAM:00B7					 ; sub_F686:loc_F699w ...
RAM:00B8		 rmb 1
RAM:00B9 byte_B9:	 rmb 1			 ; DATA	XREF: ROM:FC2Bw
RAM:00B9					 ; ROM:FC4Ew ...
RAM:00BA		 rmb 1
RAM:00BB byte_BB:	 rmb 1			 ; DATA	XREF: JT3_0+60w
RAM:00BB					 ; JT3_0+66w ...
RAM:00BC byte_BC:	 rmb 1			 ; DATA	XREF: JT3_0+5Cw
RAM:00BC					 ; JT3_0+95r ...
RAM:00BD		 rmb 1
RAM:00BE CTS_BE:	 rmb 1			 ; DATA	XREF: doTick_262ms+42w
RAM:00BE					 ; doTick_262ms+68r ...
RAM:00BF		 rmb 1
RAM:00C0 CTS_C0:	 rmb 1			 ; DATA	XREF: sub_EEA6:loc_EEC2r
RAM:00C0					 ; ROM:EF9Br ...
RAM:00C1		 rmb 1
RAM:00C2 count_C2:	 rmb 1			 ; DATA	XREF: doTick_16ms:loc_F2B5r
RAM:00C2					 ; doTick_16ms+Ew ...
RAM:00C3		 rmb 1
RAM:00C4 byte_C4:	 rmb 1			 ; DATA	XREF: ROM:E83Aw
RAM:00C4					 ; ROM:E934w ...
RAM:00C5		 rmb 1
RAM:00C6		 rmb 1
RAM:00C7		 rmb 1
RAM:00C8		 rmb 1
RAM:00C9		 rmb 1
RAM:00CA		 rmb 1
RAM:00CB		 rmb 1
RAM:00CC		 rmb 1
RAM:00CD		 rmb 1
RAM:00CE		 rmb 1
RAM:00CF		 rmb 1
RAM:00D0		 rmb 1
RAM:00D1		 rmb 1
RAM:00D2 byte_D2:	 rmb 1			 ; DATA	XREF: ROM:EF6Aw
RAM:00D3		 rmb 1
RAM:00D4		 rmb 1
RAM:00D5		 rmb 1
RAM:00D6		 rmb 1
RAM:00D7		 rmb 1
RAM:00D8		 rmb 1
RAM:00D9		 rmb 1
RAM:00DA		 rmb 1
RAM:00DB		 rmb 1
RAM:00DC		 rmb 1
RAM:00DD		 rmb 1
RAM:00DE		 rmb 1
RAM:00DF		 rmb 1
RAM:00E0		 rmb 1
RAM:00E1		 rmb 1
RAM:00E2		 rmb 1
RAM:00E3		 rmb 1
RAM:00E4		 rmb 1
RAM:00E5		 rmb 1
RAM:00E6		 rmb 1
RAM:00E7		 rmb 1
RAM:00E8		 rmb 1
RAM:00E9		 rmb 1
RAM:00EA		 rmb 1
RAM:00EB		 rmb 1
RAM:00EC		 rmb 1
RAM:00ED		 rmb 1
RAM:00EE		 rmb 1
RAM:00EF		 rmb 1
RAM:00F0		 rmb 1
RAM:00F1		 rmb 1
RAM:00F2		 rmb 1
RAM:00F3		 rmb 1
RAM:00F4		 rmb 1
RAM:00F5		 rmb 1
RAM:00F6		 rmb 1
RAM:00F7		 rmb 1
RAM:00F8		 rmb 1
RAM:00F9		 rmb 1
RAM:00FA		 rmb 1
RAM:00FB		 rmb 1
RAM:00FC		 rmb 1
RAM:00FD		 rmb 1
RAM:00FE		 rmb 1
RAM:00FF		 rmb 1
RAM:00FF ; end of 'RAM'
RAM:00FF
PE:C000	; ===========================================================================
PE:C000
PE:C000	; Segment type:	Regular
PE:C000			; segment PE
PE:C000			org $C000
PE:C000	byte_C000:	rmb 1			; DATA XREF: sub_E7A0r
PE:C000						; sub_FF86r ...
PE:C000						; only read compared to	56h or A9h
PE:C000						; bit7 is ctrl bit
PE:C000						; bit0 is status - action on 1
PE:C001	byte_C001:	rmb 1			; DATA XREF: sub_FF86+7r
PE:C001						; sub_FF86+Fw ...
PE:C001						; read/write
PE:C002	word_C002:	rmb 2			; DATA XREF: sub_FF86+15r
PE:C002						; read only shift and test (RTC	like?)
PE:C004	byte_C004:	rmb 1			; DATA XREF: sub_FF86+12r
PE:C004						; read only used as a ptr to upper addresses in	this chip?
PE:C005			rmb 1
PE:C006	word_C006:	rmb 2			; DATA XREF: sub_FF86+23r
PE:C006						; sub_FF86:loc_FFBAw ...
PE:C008			rmb 1
PE:C009			rmb 1
PE:C00A			rmb 1
PE:C00B			rmb 1
PE:C00C			rmb 1
PE:C00D			rmb 1
PE:C00E			rmb 1
PE:C00E	; end of 'PE'
PE:C00E
ADC:D000 ; IC402 is a hitherto undocumented 40-pin DIP IC.
ADC:D000 ; It is a Port	Expander/Peripheral Interface Adapter
ADC:D000 ; PIA Ctrl appears to address 1 of two	control	registers
ADC:D000 ; MSB = 0 - unknownn function,	written	with 2x
ADC:D000 ; MSB = 1 - writes to the ADC control register
ADC:D000 ; AN0 - MAPL
ADC:D000 ; AN1 - MAPR
ADC:D000 ; AN2 - Baro
ADC:D000 ; AN3 - IAT
ADC:D000 ; AN4 - CTS
ADC:D000 ; AN5 - VBatt
ADC:D000 ; AN6 -
ADC:D000 ; AN7 -
ADC:D000 ; ===========================================================================
ADC:D000
ADC:D000 ; Segment type: Regular
ADC:D000		 ; segment ADC
ADC:D000		 org $D000
ADC:D000 PIA_Base:	 rmb 1			 ; DATA	XREF: ROM:EF4Ew
ADC:D001 ;
ADC:D001 ; ADC Control Register
ADC:D001 ; bit 7 (0x80): ADC control
ADC:D001 ; bit 6 (0x40): Unknown/unimplemented
ADC:D001 ; bit 5 (0x20): Unknown/unimplemented
ADC:D001 ; bit 4 (0x10): Unknown/unimplemented
ADC:D001 ; bit 3 (0x08): Unknown/unimplemented
ADC:D001 ; bit 2 (0x04): ADC Channel Select bit	2
ADC:D001 ; bit 1 (0x02): ADC Channel Select bit	1
ADC:D001 ; bit 0 (0x01): ADC Channel Select bit	0
ADC:D001 PIA_Ctrl:	 rmb 1			 ; DATA	XREF: readADCw
ADC:D001					 ; PIA_F485w
ADC:D002 ;
ADC:D002 ; ADC Status Register
ADC:D002 ; bit 7 (0x80): Done
ADC:D002 ; bit 6 (0x40): Unknown/unimplemented
ADC:D002 ; bit 5 (0x20): Unknown/unimplemented
ADC:D002 ; bit 4 (0x10): Unknown/unimplemented
ADC:D002 ; bit 3 (0x08): Unknown/unimplemented
ADC:D002 ; bit 2 (0x04): Unknown/unimplemented
ADC:D002 ; bit 1 (0x02): Unknown/unimplemented
ADC:D002 ; bit 0 (0x01): Unknown/unimplemented
ADC:D002 PIA_Status:	 rmb 1			 ; DATA	XREF: readADC:loc_F263r
ADC:D002					 ; PIA_F485:loc_F488r
ADC:D003 ;
ADC:D003 ; ADC Result Register
ADC:D003 ; returns an 8-bit result
ADC:D003 PIA_Result:	 rmb 1			 ; DATA	XREF: doTick_524ms-77Cw
ADC:D003					 ; sub_EEA6+2w	...
ADC:D003 ; end of 'ADC'
ADC:D003
ROM:E000 ; ===========================================================================
ROM:E000
ROM:E000 ; Segment type: Pure code
ROM:E000		 ; segment ROM
ROM:E000		 org $E000
ROM:E000 X_E000:	 fdb $14		 ; DATA	XREF: ROM:F031r
ROM:E002 word_E002:	 fdb $35		 ; DATA	XREF: ROM:F036r
ROM:E004 word_E004:	 fdb $266		 ; DATA	XREF: ROM:F83Ar
ROM:E006 word_E006:	 fdb $24D		 ; DATA	XREF: ROM:loc_F84Cr
ROM:E008 X_E008:	 fcb   6
ROM:E009		 fcb  $E
ROM:E00A		 fcb   2
ROM:E00B		 fcb  $A
ROM:E00C word_E00C:	 fdb $FA0		 ; DATA	XREF: sub_EA34+8r
ROM:E00C					 ; sub_F12D+8r
ROM:E00E X_E00E:	 fcb $29 ; )		 ;  MAP	related
ROM:E00F		 fcb $31 ; 1
ROM:E010 X_E010:	 fcb   2
ROM:E011 byte_E011:	 fcb $10		 ; DATA	XREF: doTick_524ms-753r
ROM:E012 byte_E012:	 fcb $54		 ; DATA	XREF: get_BARO+2Br
ROM:E012					 ; ROM:loc_F4B5r
ROM:E012					 ;  baro multiplier = 54h = 84
ROM:E013		 fcb $13
ROM:E014		 fcb $88 ; ˆ
ROM:E015 X_E015:	 fcb   0
ROM:E016		 fcb   0
ROM:E017		 fcb   4
ROM:E018		 fcb   0
ROM:E019 word_E019:	 fdb $200		 ; DATA	XREF: ROM:EA8Dr
ROM:E019					 ; sub_F3C2+3Br
ROM:E01B byte_E01B:	 fcb $F1		 ; DATA	XREF: ROM:EA94r
ROM:E01B					 ; sub_F3C2+42r
ROM:E01B					 ;  TPS
ROM:E01C byte_E01C:	 fcb 1			 ; DATA	XREF: ROM:loc_F4CEr
ROM:E01D byte_E01D:	 fcb 3			 ; DATA	XREF: sub_F3C2:loc_F3DAr
ROM:E01E byte_E01E:	 fcb 5			 ; DATA	XREF: sub_F3C2+29r
ROM:E01F byte_E01F:	 fcb $A			 ; DATA	XREF: sub_F3C2+30r
ROM:E020 byte_E020:	 fcb 1			 ; DATA	XREF: sub_F3C2+50r
ROM:E021 word_E021:	 fdb $2E6		 ; DATA	XREF: ROM:loc_F85Cr
ROM:E023 word_E023:	 fdb $2CD		 ; DATA	XREF: ROM:loc_F865r
ROM:E025 word_E025:	 fdb $44C		 ; DATA	XREF: ROM:F814r
ROM:E027 word_E027:	 fdb $44C		 ; DATA	XREF: ROM:F81Fr
ROM:E029 byte_E029:	 fcb 6			 ; DATA	XREF: ROM:loc_F8A5r
ROM:E02A byte_E02A:	 fcb $E			 ; DATA	XREF: ROM:loc_F89Cr
ROM:E02B byte_E02B:	 fcb $B			 ; DATA	XREF: ROM:loc_F8E1r
ROM:E02C byte_E02C:	 fcb 3			 ; DATA	XREF: ROM:F8D1r
ROM:E02D byte_E02D:	 fcb 1			 ; DATA	XREF: sub_F3C2+4Br
ROM:E02E X_E02E:	 fcb $13
ROM:E02F		 fcb   5
ROM:E030 X_E030:	 fcb $29 ; )
ROM:E031		 fcb $31 ; 1
ROM:E032 word_E032:	 fdb $200		 ; DATA	XREF: sub_F4E5+2r
ROM:E034 byte_E034:	 fcb 3			 ; DATA	XREF: sub_F4E5+Dr
ROM:E035 byte_E035:	 fcb 0			 ; DATA	XREF: sub_F4E5+12r
ROM:E036 word_E036:	 fdb $280		 ; DATA	XREF: get_VBatt+5Br
ROM:E038		 fcb   4
ROM:E039 byte_E039:	 fcb $10		 ; DATA	XREF: get_VBatt+3Dr
ROM:E03A byte_E03A:	 fcb 4			 ; DATA	XREF: get_VBatt+66r
ROM:E03B byte_E03B:	 fcb $10		 ; DATA	XREF: get_VBatt+38r
ROM:E03C byte_E03C:	 fcb $50		 ; DATA	XREF: ROM:EB7Ar
ROM:E03C					 ; ROM:F54Er
ROM:E03D		 fcb $3F ; ?
ROM:E03E		 fcb $3F ; ?
ROM:E03F		 fcb $3F ; ?
ROM:E040 X_E040:	 fcb $1B		 ; sensor limits?
ROM:E041		 fcb $F0 ; ð
ROM:E042 MAPL_Default:	 fcb $C2		 ; DATA	XREF: Get_MAP+35r
ROM:E043		 fcb  $A
ROM:E044		 fcb $1B
ROM:E045		 fcb $F0 ; ð
ROM:E046 MAPR_Default:	 fcb $C2		 ; DATA	XREF: Get_MAP+18r
ROM:E046					 ; MAP default value
ROM:E047		 fcb  $A
ROM:E048		 fcb   6
ROM:E049		 fcb $E8 ; è
ROM:E04A		 fcb  $F
ROM:E04B		 fcb  $A
ROM:E04C		 fcb $1B
ROM:E04D		 fcb $F0 ; ð
ROM:E04E		 fcb $C2 ; Â
ROM:E04F		 fcb  $A
ROM:E050		 fcb   5
ROM:E051		 fcb $F0 ; ð
ROM:E052		 fcb $6D ; m
ROM:E053		 fcb  $A
ROM:E054		 fcb   5
ROM:E055		 fcb $F0 ; ð
ROM:E056		 fcb $18
ROM:E057		 fcb  $A
ROM:E058 byte_E058:	 fcb $B			 ; DATA	XREF: sub_E880+23r
ROM:E059		 fcb $3F ; ?
ROM:E05A		 fcb $3F ; ?
ROM:E05B		 fcb $3F ; ?
ROM:E05C		 fcb $3F ; ?
ROM:E05D		 fcb $3F ; ?
ROM:E05E		 fcb $3F ; ?
ROM:E05F		 fcb $3F ; ?
ROM:E060 word_E060:	 fdb $100		 ; DATA	XREF: sub_FBC8:loc_FBF0r
ROM:E062		 fcb $3F ; ?
ROM:E063		 fcb $3F ; ?
ROM:E064 X_E064:	 fcb $10		 ; limits for byte_90
ROM:E065		 fcb $F0 ; ð
ROM:E066		 fcb   3
ROM:E067		 fcb $FD ; ý
ROM:E068		 fcb $3F ; ?
ROM:E069		 fcb $3F ; ?
ROM:E06A		 fcb $3F ; ?
ROM:E06B		 fcb $3F ; ?
ROM:E06C		 fcb $3F ; ?
ROM:E06D		 fcb $3F ; ?
ROM:E06E		 fcb $3F ; ?
ROM:E06F		 fcb $3F ; ?
ROM:E070		 fcb $3F ; ?
ROM:E071		 fcb $3F ; ?
ROM:E072		 fcb $3F ; ?
ROM:E073		 fcb $3F ; ?
ROM:E074		 fcb $3F ; ?
ROM:E075		 fcb $3F ; ?
ROM:E076		 fcb $3F ; ?
ROM:E077		 fcb $3F ; ?
ROM:E078		 fcb $3F ; ?
ROM:E079		 fcb $3F ; ?
ROM:E07A		 fcb $3F ; ?
ROM:E07B		 fcb $3F ; ?
ROM:E07C		 fcb $3F ; ?
ROM:E07D		 fcb $3F ; ?
ROM:E07E		 fcb $3F ; ?
ROM:E07F		 fcb $3F ; ?
ROM:E080		 fcb $3F ; ?
ROM:E081		 fcb $3F ; ?
ROM:E082		 fcb $3F ; ?
ROM:E083		 fcb $3F ; ?
ROM:E084		 fcb $3F ; ?
ROM:E085		 fcb $3F ; ?
ROM:E086		 fcb $3F ; ?
ROM:E087		 fcb $3F ; ?
ROM:E088		 fcb $3F ; ?
ROM:E089		 fcb $3F ; ?
ROM:E08A		 fcb $3F ; ?
ROM:E08B		 fcb $3F ; ?
ROM:E08C		 fcb $3F ; ?
ROM:E08D		 fcb $3F ; ?
ROM:E08E		 fcb $3F ; ?
ROM:E08F		 fcb $3F ; ?
ROM:E090		 fcb $3F ; ?
ROM:E091		 fcb $3F ; ?
ROM:E092		 fcb $3F ; ?
ROM:E093		 fcb $3F ; ?
ROM:E094		 fcb $3F ; ?
ROM:E095		 fcb $3F ; ?
ROM:E096		 fcb $3F ; ?
ROM:E097		 fcb $3F ; ?
ROM:E098		 fcb $3F ; ?
ROM:E099		 fcb $3F ; ?
ROM:E09A		 fcb $3F ; ?
ROM:E09B		 fcb $3F ; ?
ROM:E09C		 fcb $3F ; ?
ROM:E09D		 fcb $3F ; ?
ROM:E09E		 fcb $3F ; ?
ROM:E09F		 fcb $3F ; ?
ROM:E0A0		 fcb $3F ; ?
ROM:E0A1		 fcb $3F ; ?
ROM:E0A2		 fcb $3F ; ?
ROM:E0A3		 fcb $3F ; ?
ROM:E0A4		 fcb $3F ; ?
ROM:E0A5		 fcb $3F ; ?
ROM:E0A6		 fcb $3F ; ?
ROM:E0A7		 fcb $3F ; ?
ROM:E0A8		 fcb $3F ; ?
ROM:E0A9		 fcb $3F ; ?
ROM:E0AA		 fcb $3F ; ?
ROM:E0AB		 fcb $3F ; ?
ROM:E0AC		 fcb $3F ; ?
ROM:E0AD		 fcb $3F ; ?
ROM:E0AE		 fcb $3F ; ?
ROM:E0AF		 fcb $3F ; ?
ROM:E0B0		 fcb $3F ; ?
ROM:E0B1		 fcb $3F ; ?
ROM:E0B2		 fcb $3F ; ?
ROM:E0B3		 fcb $3F ; ?
ROM:E0B4		 fcb $3F ; ?
ROM:E0B5		 fcb $3F ; ?
ROM:E0B6		 fcb $3F ; ?
ROM:E0B7		 fcb $3F ; ?
ROM:E0B8		 fcb $3F ; ?
ROM:E0B9		 fcb $3F ; ?
ROM:E0BA		 fcb $3F ; ?
ROM:E0BB		 fcb $3F ; ?
ROM:E0BC		 fcb $3F ; ?
ROM:E0BD		 fcb $3F ; ?
ROM:E0BE		 fcb $3F ; ?
ROM:E0BF		 fcb $3F ; ?
ROM:E0C0 X_E0C0:	 fcb $10
ROM:E0C1 X_E0C1:	 fcb $1B		 ; sensor limits?
ROM:E0C2		 fcb $F0 ; ð
ROM:E0C3		 fcb $C2 ; Â
ROM:E0C4
ROM:E0C4 sensorLimits:	 fcb  $A		 ; sensor limits start here? (+4)
ROM:E0C5		 fcb $1B
ROM:E0C6		 fcb $F0 ; ð
ROM:E0C7		 fcb $C2 ; Â
ROM:E0C8		 fcb  $A
ROM:E0C9		 fcb   6
ROM:E0CA		 fcb $F0 ; ð
ROM:E0CB		 fcb  $F
ROM:E0CC		 fcb  $A
ROM:E0CD		 fcb $1B
ROM:E0CE		 fcb $F0 ; ð
ROM:E0CF		 fcb $C2 ; Â
ROM:E0D0		 fcb   3
ROM:E0D1		 fcb   5
ROM:E0D2		 fcb $F0 ; ð
ROM:E0D3		 fcb $6D ; m
ROM:E0D4		 fcb   2
ROM:E0D5		 fcb   5
ROM:E0D6		 fcb $F0 ; ð
ROM:E0D7		 fcb $18
ROM:E0D8		 fcb   2
ROM:E0D9		 fcb $3F ; ?
ROM:E0DA		 fcb $3F ; ?
ROM:E0DB		 fcb $3F ; ?
ROM:E0DC		 fcb $3F ; ?
ROM:E0DD		 fcb $3F ; ?
ROM:E0DE		 fcb $3F ; ?
ROM:E0DF		 fcb $3F ; ?
ROM:E0E0 byte_E0E0:	 fcb 3			 ; DATA	XREF: ROM:EAA3r
ROM:E0E0					 ;  TPS	thresholds for table at	E1C0
ROM:E0E1 byte_E0E1:	 fcb 5			 ; DATA	XREF: ROM:EAA9r
ROM:E0E2 byte_E0E2:	 fcb $A			 ; DATA	XREF: ROM:EAAFr
ROM:E0E3		 fcb $3F ; ?
ROM:E0E4		 fcb $3F ; ?
ROM:E0E5		 fcb $3F ; ?
ROM:E0E6		 fcb $3F ; ?
ROM:E0E7		 fcb $3F ; ?
ROM:E0E8		 fcb $3F ; ?
ROM:E0E9		 fcb $3F ; ?
ROM:E0EA		 fcb $3F ; ?
ROM:E0EB		 fcb $3F ; ?
ROM:E0EC		 fcb $3F ; ?
ROM:E0ED		 fcb $3F ; ?
ROM:E0EE		 fcb $3F ; ?
ROM:E0EF		 fcb $3F ; ?
ROM:E0F0		 fcb $3F ; ?
ROM:E0F1		 fcb $3F ; ?
ROM:E0F2		 fcb $3F ; ?
ROM:E0F3		 fcb $3F ; ?
ROM:E0F4		 fcb $3F ; ?
ROM:E0F5		 fcb $3F ; ?
ROM:E0F6		 fcb $3F ; ?
ROM:E0F7		 fcb $3F ; ?
ROM:E0F8		 fcb $3F ; ?
ROM:E0F9		 fcb $3F ; ?
ROM:E0FA		 fcb $3F ; ?
ROM:E0FB		 fcb $3F ; ?
ROM:E0FC		 fcb $3F ; ?
ROM:E0FD		 fcb $3F ; ?
ROM:E0FE		 fcb $3F ; ?
ROM:E0FF		 fcb $3F ; ?
ROM:E100		 fcb $3F ; ?
ROM:E101		 fcb $3F ; ?
ROM:E102		 fcb $3F ; ?
ROM:E103		 fcb $3F ; ?
ROM:E104		 fcb $3F ; ?
ROM:E105		 fcb $3F ; ?
ROM:E106		 fcb $3F ; ?
ROM:E107		 fcb $3F ; ?
ROM:E108		 fcb $3F ; ?
ROM:E109		 fcb $3F ; ?
ROM:E10A		 fcb $3F ; ?
ROM:E10B		 fcb $3F ; ?
ROM:E10C		 fcb $3F ; ?
ROM:E10D		 fcb $3F ; ?
ROM:E10E		 fcb $3F ; ?
ROM:E10F		 fcb $3F ; ?
ROM:E110 IAT_E110:	 fcb $66, $6E, $73, $7B, $81, $86, $8C,	$93
ROM:E118		 fcb $3F ; ?
ROM:E119		 fcb $3F ; ?
ROM:E11A		 fcb $3F ; ?
ROM:E11B		 fcb $3F ; ?
ROM:E11C		 fcb $3F ; ?
ROM:E11D		 fcb $3F ; ?
ROM:E11E		 fcb $3F ; ?
ROM:E11F		 fcb $3F ; ?
ROM:E120 Baro_E120:	 fcb $D9, $BE, $A9, $99, $8B, $80, $76,	$6E
ROM:E128		 fcb $67 ; g
ROM:E129		 fcb $3F ; ?
ROM:E12A		 fcb $3F ; ?
ROM:E12B		 fcb $3F ; ?
ROM:E12C		 fcb $3F ; ?
ROM:E12D		 fcb $3F ; ?
ROM:E12E		 fcb $3F ; ?
ROM:E12F		 fcb $3F ; ?
ROM:E130 X_E130:	 fcb 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
ROM:E140		 fcb $3F ; ?
ROM:E141		 fcb $3F ; ?
ROM:E142		 fcb $3F ; ?
ROM:E143		 fcb $3F ; ?
ROM:E144		 fcb $3F ; ?
ROM:E145		 fcb $3F ; ?
ROM:E146		 fcb $3F ; ?
ROM:E147		 fcb $3F ; ?
ROM:E148		 fcb $3F ; ?
ROM:E149		 fcb $3F ; ?
ROM:E14A		 fcb $3F ; ?
ROM:E14B		 fcb $3F ; ?
ROM:E14C		 fcb $3F ; ?
ROM:E14D		 fcb $3F ; ?
ROM:E14E		 fcb $3F ; ?
ROM:E14F		 fcb $3F ; ?
ROM:E150 VBatt_E150:	 fcb $B0, $B0, $A9, $71, $55, $45, $38,	$31, $29, $23, $24
ROM:E150		 fcb $24
ROM:E15C		 fcb $3F ; ?
ROM:E15D		 fcb $3F ; ?
ROM:E15E		 fcb $3F ; ?
ROM:E15F		 fcb $3F ; ?
ROM:E160 CTS_E160:	 fcb 0,	7, $24,	$2A, $56, $75, $A0, $E0
ROM:E168		 fcb $3F ; ?
ROM:E169		 fcb $3F ; ?
ROM:E16A		 fcb $3F ; ?
ROM:E16B		 fcb $3F ; ?
ROM:E16C		 fcb $3F ; ?
ROM:E16D		 fcb $3F ; ?
ROM:E16E		 fcb $3F ; ?
ROM:E16F		 fcb $3F ; ?
ROM:E170 CTS_E170:	 fcb 0,	1, 3, $F, $1D, $3A, $40, $40, $3F, $3F,	$3F, $3F
ROM:E170		 fcb $3F, $3F, $3F, $3F
ROM:E180 CTS_E180:	 fcb 0,	0, 0, 8, $10, $14, $18,	$1C, $3F, $3F, $3F, $3F
ROM:E180		 fcb $3F, $3F, $3F, $3F
ROM:E190 VBatt_E190:	 fcb $DA, $9E, $70, $50, $30, $20, $10,	0, 0, 0, 0, 0, $3F
ROM:E190		 fcb $3F, $3F, $3F
ROM:E1A0 X_E1A0:	 fcb  $F		 ;  maybe dTPS
ROM:E1A1		 fcb $A0 ;  
ROM:E1A2		 fcb $17
ROM:E1A3		 fcb $70 ; p
ROM:E1A4		 fcb $27 ; '
ROM:E1A5		 fcb $10
ROM:E1A6		 fcb $3F ; ?
ROM:E1A7		 fcb $3F ; ?
ROM:E1A8		 fcb $3F ; ?
ROM:E1A9		 fcb $3F ; ?
ROM:E1AA		 fcb $3F ; ?
ROM:E1AB		 fcb $3F ; ?
ROM:E1AC		 fcb $3F ; ?
ROM:E1AD		 fcb $3F ; ?
ROM:E1AE		 fcb $3F ; ?
ROM:E1AF		 fcb $3F ; ?
ROM:E1B0 X_E1B0:	 fcb $2A, $34, $45, $53, $5F, $62, $66 ;  related to byte_86
ROM:E1B7		 fcb $6F ; o
ROM:E1B8		 fcb $3F ; ?
ROM:E1B9		 fcb $3F ; ?
ROM:E1BA		 fcb $3F ; ?
ROM:E1BB		 fcb $3F ; ?
ROM:E1BC		 fcb $3F ; ?
ROM:E1BD		 fcb $3F ; ?
ROM:E1BE		 fcb $3F ; ?
ROM:E1BF		 fcb $3F ; ?
ROM:E1C0 dTPS_E1C0:	 fcb 0,	$16, $20, $40	 ; dTPS
ROM:E1C4		 fcb $3F ; ?
ROM:E1C5		 fcb $3F ; ?
ROM:E1C6		 fcb $3F ; ?
ROM:E1C7		 fcb $3F ; ?
ROM:E1C8		 fcb $3F ; ?
ROM:E1C9		 fcb $3F ; ?
ROM:E1CA		 fcb $3F ; ?
ROM:E1CB		 fcb $3F ; ?
ROM:E1CC		 fcb $3F ; ?
ROM:E1CD		 fcb $3F ; ?
ROM:E1CE		 fcb $3F ; ?
ROM:E1CF		 fcb $3F ; ?
ROM:E1D0		 fcb $3F ; ?
ROM:E1D1		 fcb $3F ; ?
ROM:E1D2		 fcb $3F ; ?
ROM:E1D3		 fcb $3F ; ?
ROM:E1D4		 fcb $3F ; ?
ROM:E1D5		 fcb $3F ; ?
ROM:E1D6		 fcb $3F ; ?
ROM:E1D7		 fcb $3F ; ?
ROM:E1D8		 fcb $3F ; ?
ROM:E1D9		 fcb $3F ; ?
ROM:E1DA		 fcb $3F ; ?
ROM:E1DB		 fcb $3F ; ?
ROM:E1DC		 fcb $3F ; ?
ROM:E1DD		 fcb $3F ; ?
ROM:E1DE		 fcb $3F ; ?
ROM:E1DF		 fcb $3F ; ?
ROM:E1E0		 fcb $3F ; ?
ROM:E1E1		 fcb $3F ; ?
ROM:E1E2		 fcb $3F ; ?
ROM:E1E3		 fcb $3F ; ?
ROM:E1E4		 fcb $3F ; ?
ROM:E1E5		 fcb $3F ; ?
ROM:E1E6		 fcb $3F ; ?
ROM:E1E7		 fcb $3F ; ?
ROM:E1E8		 fcb $3F ; ?
ROM:E1E9		 fcb $3F ; ?
ROM:E1EA		 fcb $3F ; ?
ROM:E1EB		 fcb $3F ; ?
ROM:E1EC		 fcb $3F ; ?
ROM:E1ED		 fcb $3F ; ?
ROM:E1EE		 fcb $3F ; ?
ROM:E1EF		 fcb $3F ; ?
ROM:E1F0		 fcb $3F ; ?
ROM:E1F1		 fcb $3F ; ?
ROM:E1F2		 fcb $3F ; ?
ROM:E1F3		 fcb $3F ; ?
ROM:E1F4		 fcb $3F ; ?
ROM:E1F5		 fcb $3F ; ?
ROM:E1F6		 fcb $3F ; ?
ROM:E1F7		 fcb $3F ; ?
ROM:E1F8		 fcb $3F ; ?
ROM:E1F9		 fcb $3F ; ?
ROM:E1FA		 fcb $3F ; ?
ROM:E1FB		 fcb $3F ; ?
ROM:E1FC		 fcb $3F ; ?
ROM:E1FD		 fcb $3F ; ?
ROM:E1FE		 fcb $3F ; ?
ROM:E1FF		 fcb $3F ; ?
ROM:E200 X_E200: MAP v RPM
ROM:E200 X_E200:	 fcb $10, $10, $10, $10, $13, $15, $1A,	$20, $25, $2A, $2E
ROM:E200		 fcb $32, $34, $36, $3B, $50, $A, $A, $A, $A, $10, $14
ROM:E200		 fcb $19, $20, $24, $27, $2B, $30, $32,	$35, $3B, $5A, $A
ROM:E200		 fcb $A, $A, $A, $F, $13, $17, $1D, $21, $24, $28, $2D
ROM:E200		 fcb $30, $34, $3B, $60, $A, $A, $A, $A, $15, $13, $13
ROM:E200		 fcb $17, $1D, $20, $24, $26, $27, $2F,	$37, $65, $A, $A
ROM:E200		 fcb $A, $10, $15, $15,	$15, $16, $18, $1C, $20, $22, $23
ROM:E200		 fcb $26, $33, $67, $1C, $1C, $1C, $19,	$18, $16, $16, $17
ROM:E200		 fcb $19, $22, $25, $26, $27, $29, $35,	$68, $1D, $1D, $1C
ROM:E200		 fcb $19, $18, $17, $18, $19, $1B, $22,	$25, $27, $29, $2B
ROM:E200		 fcb $38, $68, $30, $30, $30, $30, $20,	$18, $18, $1A, $1D
ROM:E200		 fcb $22, $25, $27, $29, $2B, $38, $69,	$45, $45, $45, $45
ROM:E200		 fcb $3A, $19, $19, $1B, $1F, $22, $25,	$27, $29, $2B, $38
ROM:E200		 fcb $6A, $45, $45, $45, $45, $3A, $1A,	$1A, $1C, $20, $23
ROM:E200		 fcb $25, $27, $29, $2B, $38, $6D, $45,	$45, $45, $45, $3A
ROM:E200		 fcb $1B, $1B, $1D, $21, $23, $25, $27,	$29, $2B, $38, $6E
ROM:E200		 fcb $45, $45, $45, $45, $45, $30, $1E,	$1E, $21, $23, $25
ROM:E200		 fcb $27, $29, $2B, $38, $70, $45, $45,	$45, $45, $45, $30
ROM:E200		 fcb $1E, $1E, $21, $23, $25, $27, $29,	$2B, $38, $6E, $45
ROM:E200		 fcb $45, $45, $45, $45, $30, $1E, $1E,	$21, $23, $25, $27
ROM:E200		 fcb $29, $2B, $38, $6C, $45, $45, $45,	$45, $45, $30, $1E
ROM:E200		 fcb $1E, $21, $23, $25, $27, $29, $2B,	$38, $69, $45, $45
ROM:E200		 fcb $45, $45, $45, $30, $1E, $1E, $21,	$23, $25, $27, $29
ROM:E200		 fcb $2B, $38, $66
ROM:E300		 fcb   0
ROM:E301		 fcb   0
ROM:E302		 fcb   0
ROM:E303		 fcb   0
ROM:E304		 fcb   0
ROM:E305		 fcb   0
ROM:E306		 fcb   0
ROM:E307		 fcb   0
ROM:E308		 fcb   0
ROM:E309		 fcb   0
ROM:E30A		 fcb   0
ROM:E30B		 fcb   0
ROM:E30C		 fcb   0
ROM:E30D		 fcb   0
ROM:E30E		 fcb   0
ROM:E30F		 fcb   0
ROM:E310		 fcb   0
ROM:E311		 fcb   0
ROM:E312		 fcb   0
ROM:E313		 fcb   0
ROM:E314		 fcb   0
ROM:E315		 fcb   0
ROM:E316		 fcb   0
ROM:E317		 fcb   0
ROM:E318		 fcb   0
ROM:E319		 fcb   0
ROM:E31A		 fcb   0
ROM:E31B		 fcb   0
ROM:E31C		 fcb   0
ROM:E31D		 fcb   0
ROM:E31E		 fcb   0
ROM:E31F		 fcb   0
ROM:E320		 fcb   0
ROM:E321		 fcb   0
ROM:E322		 fcb   0
ROM:E323		 fcb   0
ROM:E324		 fcb   0
ROM:E325		 fcb   0
ROM:E326		 fcb   0
ROM:E327		 fcb   0
ROM:E328		 fcb   0
ROM:E329		 fcb   0
ROM:E32A		 fcb   0
ROM:E32B		 fcb   0
ROM:E32C		 fcb   0
ROM:E32D		 fcb   0
ROM:E32E		 fcb   0
ROM:E32F		 fcb   0
ROM:E330		 fcb   0
ROM:E331		 fcb   0
ROM:E332		 fcb   0
ROM:E333		 fcb   0
ROM:E334		 fcb   0
ROM:E335		 fcb   0
ROM:E336		 fcb   0
ROM:E337		 fcb   0
ROM:E338		 fcb   0
ROM:E339		 fcb   0
ROM:E33A		 fcb   0
ROM:E33B		 fcb   0
ROM:E33C		 fcb   0
ROM:E33D		 fcb   0
ROM:E33E		 fcb   0
ROM:E33F		 fcb   0
ROM:E340		 fcb   0
ROM:E341		 fcb   0
ROM:E342		 fcb   0
ROM:E343		 fcb   0
ROM:E344		 fcb   0
ROM:E345		 fcb   0
ROM:E346		 fcb   0
ROM:E347		 fcb   0
ROM:E348		 fcb   0
ROM:E349		 fcb   0
ROM:E34A		 fcb   0
ROM:E34B		 fcb   0
ROM:E34C		 fcb   0
ROM:E34D		 fcb   0
ROM:E34E		 fcb   0
ROM:E34F		 fcb   0
ROM:E350		 fcb   0
ROM:E351		 fcb   0
ROM:E352		 fcb   0
ROM:E353		 fcb   0
ROM:E354		 fcb   0
ROM:E355		 fcb   0
ROM:E356		 fcb   0
ROM:E357		 fcb   0
ROM:E358		 fcb   0
ROM:E359		 fcb   0
ROM:E35A		 fcb   0
ROM:E35B		 fcb   0
ROM:E35C		 fcb   0
ROM:E35D		 fcb   0
ROM:E35E		 fcb   0
ROM:E35F		 fcb   0
ROM:E360		 fcb   0
ROM:E361		 fcb   0
ROM:E362		 fcb   0
ROM:E363		 fcb   0
ROM:E364		 fcb   0
ROM:E365		 fcb   0
ROM:E366		 fcb   0
ROM:E367		 fcb   0
ROM:E368		 fcb   0
ROM:E369		 fcb   0
ROM:E36A		 fcb   0
ROM:E36B		 fcb   0
ROM:E36C		 fcb   0
ROM:E36D		 fcb   0
ROM:E36E		 fcb   0
ROM:E36F		 fcb   0
ROM:E370		 fcb   0
ROM:E371		 fcb   0
ROM:E372		 fcb   0
ROM:E373		 fcb   0
ROM:E374		 fcb   0
ROM:E375		 fcb   0
ROM:E376		 fcb   0
ROM:E377		 fcb   0
ROM:E378		 fcb   0
ROM:E379		 fcb   0
ROM:E37A		 fcb   0
ROM:E37B		 fcb   0
ROM:E37C		 fcb   0
ROM:E37D		 fcb   0
ROM:E37E		 fcb   0
ROM:E37F		 fcb   0
ROM:E380		 fcb   0
ROM:E381		 fcb   0
ROM:E382		 fcb   0
ROM:E383		 fcb   0
ROM:E384		 fcb   0
ROM:E385		 fcb   0
ROM:E386		 fcb   0
ROM:E387		 fcb   0
ROM:E388		 fcb   0
ROM:E389		 fcb   0
ROM:E38A		 fcb   0
ROM:E38B		 fcb   0
ROM:E38C		 fcb   0
ROM:E38D		 fcb   0
ROM:E38E		 fcb   0
ROM:E38F		 fcb   0
ROM:E390		 fcb   0
ROM:E391		 fcb   0
ROM:E392		 fcb   0
ROM:E393		 fcb   0
ROM:E394		 fcb   0
ROM:E395		 fcb   0
ROM:E396		 fcb   0
ROM:E397		 fcb   0
ROM:E398		 fcb   0
ROM:E399		 fcb   0
ROM:E39A		 fcb   0
ROM:E39B		 fcb   0
ROM:E39C		 fcb   0
ROM:E39D		 fcb   0
ROM:E39E		 fcb   0
ROM:E39F		 fcb   0
ROM:E3A0		 fcb   0
ROM:E3A1		 fcb   0
ROM:E3A2		 fcb   0
ROM:E3A3		 fcb   0
ROM:E3A4		 fcb   0
ROM:E3A5		 fcb   0
ROM:E3A6		 fcb   0
ROM:E3A7		 fcb   0
ROM:E3A8		 fcb   0
ROM:E3A9		 fcb   0
ROM:E3AA		 fcb   0
ROM:E3AB		 fcb   0
ROM:E3AC		 fcb   0
ROM:E3AD		 fcb   0
ROM:E3AE		 fcb   0
ROM:E3AF		 fcb   0
ROM:E3B0		 fcb   0
ROM:E3B1		 fcb   0
ROM:E3B2		 fcb   0
ROM:E3B3		 fcb   0
ROM:E3B4		 fcb   0
ROM:E3B5		 fcb   0
ROM:E3B6		 fcb   0
ROM:E3B7		 fcb   0
ROM:E3B8		 fcb   0
ROM:E3B9		 fcb   0
ROM:E3BA		 fcb   0
ROM:E3BB		 fcb   0
ROM:E3BC		 fcb   0
ROM:E3BD		 fcb   0
ROM:E3BE		 fcb   0
ROM:E3BF		 fcb   0
ROM:E3C0		 fcb   0
ROM:E3C1		 fcb   0
ROM:E3C2		 fcb   0
ROM:E3C3		 fcb   0
ROM:E3C4		 fcb   0
ROM:E3C5		 fcb   0
ROM:E3C6		 fcb   0
ROM:E3C7		 fcb   0
ROM:E3C8		 fcb   0
ROM:E3C9		 fcb   0
ROM:E3CA		 fcb   0
ROM:E3CB		 fcb   0
ROM:E3CC		 fcb   0
ROM:E3CD		 fcb   0
ROM:E3CE		 fcb   0
ROM:E3CF		 fcb   0
ROM:E3D0		 fcb   0
ROM:E3D1		 fcb   0
ROM:E3D2		 fcb   0
ROM:E3D3		 fcb   0
ROM:E3D4		 fcb   0
ROM:E3D5		 fcb   0
ROM:E3D6		 fcb   0
ROM:E3D7		 fcb   0
ROM:E3D8		 fcb   0
ROM:E3D9		 fcb   0
ROM:E3DA		 fcb   0
ROM:E3DB		 fcb   0
ROM:E3DC		 fcb   0
ROM:E3DD		 fcb   0
ROM:E3DE		 fcb   0
ROM:E3DF		 fcb   0
ROM:E3E0		 fcb   0
ROM:E3E1		 fcb   0
ROM:E3E2		 fcb   0
ROM:E3E3		 fcb   0
ROM:E3E4		 fcb   0
ROM:E3E5		 fcb   0
ROM:E3E6		 fcb   0
ROM:E3E7		 fcb   0
ROM:E3E8		 fcb   0
ROM:E3E9		 fcb   0
ROM:E3EA		 fcb   0
ROM:E3EB		 fcb   0
ROM:E3EC		 fcb   0
ROM:E3ED		 fcb   0
ROM:E3EE		 fcb   0
ROM:E3EF		 fcb   0
ROM:E3F0		 fcb   0
ROM:E3F1		 fcb   0
ROM:E3F2		 fcb   0
ROM:E3F3		 fcb   0
ROM:E3F4		 fcb   0
ROM:E3F5		 fcb   0
ROM:E3F6		 fcb   0
ROM:E3F7		 fcb   0
ROM:E3F8		 fcb   0
ROM:E3F9		 fcb   0
ROM:E3FA		 fcb   0
ROM:E3FB		 fcb   0
ROM:E3FC		 fcb   0
ROM:E3FD		 fcb   0
ROM:E3FE		 fcb   0
ROM:E3FF		 fcb   0
ROM:E400 X_E400: TPS v RPM
ROM:E400 X_E400:	 fcb $25, $25, $33, $41, $4D, $50, $50,	$50, $50, $50, $52
ROM:E400		 fcb $52, $52, $52, $52, $52, $20, $24,	$2F, $3C, $48, $4E
ROM:E400		 fcb $51, $51, $51, $52, $53, $5A, $5A,	$5A, $5A, $5A, $1C
ROM:E400		 fcb $24, $2E, $35, $41, $49, $4E, $51,	$52, $53, $56, $57
ROM:E400		 fcb $60, $60, $60, $60, $1A, $1F, $29,	$32, $3B, $43, $4C
ROM:E400		 fcb $50, $52, $54, $56, $58, $65, $65,	$65, $65, $18, $1E
ROM:E400		 fcb $26, $2E, $34, $3E, $47, $4C, $50,	$55, $58, $5B, $67
ROM:E400		 fcb $67, $67, $67, $16, $1A, $23, $2A,	$30, $38, $41, $49
ROM:E400		 fcb $4E, $55, $5A, $5E, $68, $68, $68,	$68, $15, $1A, $22
ROM:E400		 fcb $2A, $2E, $34, $3C, $45, $49, $50,	$55, $5A, $68, $68
ROM:E400		 fcb $68, $68, $15, $1B, $20, $27, $2C,	$32, $38, $3E, $45
ROM:E400		 fcb $4B, $50, $56, $69, $69, $69, $69,	$15, $1B, $1F, $25
ROM:E400		 fcb $2B, $30, $36, $3C, $43, $49, $4E,	$54, $6A, $6A, $6A
ROM:E400		 fcb $6A, $17, $1B, $1D, $24, $2A, $2F,	$35, $3B, $41, $47
ROM:E400		 fcb $4C, $52, $6B, $6D, $6D, $6D, $17,	$1B, $1D, $24, $29
ROM:E400		 fcb $2E, $34, $3A, $3F, $45, $4B, $51,	$69, $6E, $6E, $6E
ROM:E400		 fcb $17, $1B, $1C, $22, $28, $2D, $32,	$38, $3D, $43, $49
ROM:E400		 fcb $50, $66, $6F, $70, $70, $1A, $1B,	$1C, $21, $27, $2B
ROM:E400		 fcb $2F, $35, $39, $3F, $44, $49, $61,	$6B, $6E, $6E, $1B
ROM:E400		 fcb $1C, $1D, $1E, $26, $29, $2D, $31,	$35, $3A, $3F, $45
ROM:E400		 fcb $5B, $68, $6C, $6C, $1B, $1C, $1D,	$1E, $25, $28, $2B
ROM:E400		 fcb $2E, $33, $37, $3B, $41, $57, $65,	$69, $69, $1B, $1C
ROM:E400		 fcb $1D, $1E, $23, $26, $29, $2B, $31,	$33, $38, $3D, $53
ROM:E400		 fcb $61, $66, $66
ROM:E500 X_E500: MAP v RPM
ROM:E500 X_E500:	 fcb $1C, $1C, $1C, $1C, $1C, $1C, $1C,	$1C, $1C, $1C, $1C
ROM:E500		 fcb $1C, $1C, $1C, $1C, $1C, $1C, $1C,	$1C, $1C, $1C, $1C
ROM:E500		 fcb $1C, $1C, $1C, $1C, $1C, $1C, $1C,	$1C, $1C, $1C, $1C
ROM:E500		 fcb $1C, $1C, $1C, $1C, $1C, $1C, $1C,	$1C, $1C, $1C, $1C
ROM:E500		 fcb $1C, $1C, $1C, $1C, $1C, $1C, $1C,	$1C, $1C, $1C, $1C
ROM:E500		 fcb $1C, $1C, $1C, $1C, $1C, $1C, $1C,	$1C, $1C, $22, $22
ROM:E500		 fcb $22, $22, $22, $22, $22, $22, $22,	$22, $22, $22, $22
ROM:E500		 fcb $22, $22, $22, $34, $34, $34, $34,	$34, $34, $34, $34
ROM:E500		 fcb $34, $36, $37, $38, $37, $34, $2E,	$26, $3D, $3D, $3D
ROM:E500		 fcb $3D, $3D, $3D, $3D, $3D, $40, $43,	$46, $47, $47, $44
ROM:E500		 fcb $38, $30, $45, $45, $45, $45, $45,	$45, $45, $4A, $4D
ROM:E500		 fcb $4F, $50, $50, $50, $50, $46, $38,	$50, $50, $50, $50
ROM:E500		 fcb $50, $50, $54, $58, $5B, $5E, $61,	$61, $61, $5E, $54
ROM:E500		 fcb $49, $58, $58, $58, $58, $58, $58,	$5D, $62, $66, $6A
ROM:E500		 fcb $6E, $70, $70, $6E, $5D, $5B, $5F,	$5F, $5F, $5F, $5F
ROM:E500		 fcb $5F, $62, $68, $6B, $70, $75, $79,	$7A, $7A, $67, $5B
ROM:E500		 fcb $67, $67, $67, $67, $67, $67, $67,	$6D, $72, $77, $7D
ROM:E500		 fcb $82, $86, $86, $70, $5B, $67, $67,	$67, $67, $67, $67
ROM:E500		 fcb $67, $6D, $72, $77, $7D, $85, $88,	$88, $70, $5B, $67
ROM:E500		 fcb $67, $67, $67, $67, $67, $67, $6D,	$72, $77, $7D, $87
ROM:E500		 fcb $8B, $8B, $70, $5B, $67, $67, $67,	$67, $67, $67, $67
ROM:E500		 fcb $6D, $72, $77, $7D, $89, $8B, $8B,	$70, $5B, $67, $67
ROM:E500		 fcb $67, $67, $67, $67, $67, $6D, $72,	$7A, $86, $8B, $8A
ROM:E500		 fcb $81, $70, $5B
ROM:E600 X_600:	TPS v RPM
ROM:E600 X_E600:	 fcb $1C, $1C, $20, $20, $1F, $1F, $1F,	$1F, $1F, $1F, $1F
ROM:E600		 fcb $1F, $1F, $1F, $1F, $1C, $1C, $1C,	$20, $20, $1F, $1F
ROM:E600		 fcb $1F, $1F, $1F, $1F, $1F, $1F, $1F,	$1F, $1F, $1C, $1C
ROM:E600		 fcb $1C, $20, $20, $1F, $1F, $1F, $1F,	$1F, $1F, $1F, $1F
ROM:E600		 fcb $1F, $1F, $1F, $1C, $1C, $1C, $20,	$20, $1F, $1F, $1F
ROM:E600		 fcb $1F, $1F, $1F, $1F, $1F, $1F, $1F,	$1F, $1C, $22, $22
ROM:E600		 fcb $22, $22, $23, $23, $23, $23, $23,	$23, $23, $23, $23
ROM:E600		 fcb $23, $23, $22, $34, $34, $34, $34,	$27, $27, $27, $27
ROM:E600		 fcb $27, $27, $27, $27, $27, $27, $27,	$26, $40, $40, $40
ROM:E600		 fcb $40, $40, $30, $30, $30, $30, $30,	$30, $30, $30, $30
ROM:E600		 fcb $30, $30, $48, $48, $4A, $4D, $50,	$3F, $38, $38, $38
ROM:E600		 fcb $38, $38, $38, $38, $38, $38, $38,	$4D, $4D, $5E, $69
ROM:E600		 fcb $69, $5A, $4E, $4B, $4B, $4B, $4B,	$4B, $4B, $4B, $4B
ROM:E600		 fcb $4B, $5D, $5D, $67, $75, $75, $66,	$5F, $5B, $5B, $5B
ROM:E600		 fcb $5B, $5B, $5B, $5B, $5B, $5B, $61,	$61, $70, $80, $80
ROM:E600		 fcb $72, $63, $5C, $5B, $5B, $5B, $5B,	$5B, $5B, $5B, $5B
ROM:E600		 fcb $67, $67, $78, $8A, $8A, $7C, $70,	$65, $5F, $5C, $5B
ROM:E600		 fcb $5B, $5B, $5B, $5B, $5B, $67, $67,	$7A, $8E, $8E, $7E
ROM:E600		 fcb $74, $6A, $66, $62, $5D, $5C, $5B,	$5B, $5B, $5B, $67
ROM:E600		 fcb $67, $7A, $90, $90, $84, $7A, $70,	$6C, $67, $63, $5F
ROM:E600		 fcb $5B, $5B, $5B, $5B, $67, $67, $7A,	$90, $90, $8C, $81
ROM:E600		 fcb $74, $70, $6C, $69, $64, $5B, $5B,	$5B, $5B, $67, $67
ROM:E600		 fcb $7A, $90, $90, $8C, $81, $74, $70,	$6C, $69, $64, $5B
ROM:E600		 fcb $5B, $5B, $5B
ROM:E700		 fcb $3F ; ?
ROM:E701		 fcb $3F ; ?
ROM:E702		 fcb $3F ; ?
ROM:E703		 fcb $3F ; ?
ROM:E704		 fcb $3F ; ?
ROM:E705		 fcb $3F ; ?
ROM:E706		 fcb $3F ; ?
ROM:E707		 fcb $3F ; ?
ROM:E708		 fcb $3F ; ?
ROM:E709		 fcb $3F ; ?
ROM:E70A		 fcb $3F ; ?
ROM:E70B		 fcb $3F ; ?
ROM:E70C		 fcb $3F ; ?
ROM:E70D		 fcb $3F ; ?
ROM:E70E		 fcb $3F ; ?
ROM:E70F		 fcb $3F ; ?
ROM:E710		 fcb $3F ; ?
ROM:E711		 fcb $3F ; ?
ROM:E712		 fcb $3F ; ?
ROM:E713		 fcb $3F ; ?
ROM:E714		 fcb $3F ; ?
ROM:E715		 fcb $3F ; ?
ROM:E716		 fcb $3F ; ?
ROM:E717		 fcb $3F ; ?
ROM:E718		 fcb $3F ; ?
ROM:E719		 fcb $3F ; ?
ROM:E71A		 fcb $3F ; ?
ROM:E71B		 fcb $3F ; ?
ROM:E71C		 fcb $3F ; ?
ROM:E71D		 fcb $3F ; ?
ROM:E71E		 fcb $3F ; ?
ROM:E71F		 fcb $3F ; ?
ROM:E720		 fcb $3F ; ?
ROM:E721		 fcb $3F ; ?
ROM:E722		 fcb $3F ; ?
ROM:E723		 fcb $3F ; ?
ROM:E724		 fcb $3F ; ?
ROM:E725		 fcb $3F ; ?
ROM:E726		 fcb $3F ; ?
ROM:E727		 fcb $3F ; ?
ROM:E728		 fcb $3F ; ?
ROM:E729		 fcb $3F ; ?
ROM:E72A		 fcb $3F ; ?
ROM:E72B		 fcb $3F ; ?
ROM:E72C		 fcb $3F ; ?
ROM:E72D		 fcb $3F ; ?
ROM:E72E		 fcb $3F ; ?
ROM:E72F		 fcb $3F ; ?
ROM:E730		 fcb $3F ; ?
ROM:E731		 fcb $3F ; ?
ROM:E732		 fcb $3F ; ?
ROM:E733		 fcb $3F ; ?
ROM:E734		 fcb $3F ; ?
ROM:E735		 fcb $3F ; ?
ROM:E736		 fcb $3F ; ?
ROM:E737		 fcb $3F ; ?
ROM:E738		 fcb $3F ; ?
ROM:E739		 fcb $3F ; ?
ROM:E73A		 fcb $3F ; ?
ROM:E73B		 fcb $3F ; ?
ROM:E73C		 fcb $3F ; ?
ROM:E73D		 fcb $3F ; ?
ROM:E73E		 fcb $3F ; ?
ROM:E73F		 fcb $3F ; ?
ROM:E740		 fcb $3F ; ?
ROM:E741		 fcb $3F ; ?
ROM:E742		 fcb $3F ; ?
ROM:E743		 fcb $3F ; ?
ROM:E744		 fcb $3F ; ?
ROM:E745		 fcb $3F ; ?
ROM:E746		 fcb $3F ; ?
ROM:E747		 fcb $3F ; ?
ROM:E748		 fcb $3F ; ?
ROM:E749		 fcb $3F ; ?
ROM:E74A		 fcb $3F ; ?
ROM:E74B		 fcb $3F ; ?
ROM:E74C		 fcb $3F ; ?
ROM:E74D		 fcb $3F ; ?
ROM:E74E		 fcb $3F ; ?
ROM:E74F		 fcb $3F ; ?
ROM:E750		 fcb $3F ; ?
ROM:E751		 fcb $3F ; ?
ROM:E752		 fcb $3F ; ?
ROM:E753		 fcb $3F ; ?
ROM:E754		 fcb $3F ; ?
ROM:E755		 fcb $3F ; ?
ROM:E756		 fcb $3F ; ?
ROM:E757		 fcb $3F ; ?
ROM:E758		 fcb $3F ; ?
ROM:E759		 fcb $3F ; ?
ROM:E75A		 fcb $3F ; ?
ROM:E75B		 fcb $3F ; ?
ROM:E75C		 fcb $3F ; ?
ROM:E75D		 fcb $3F ; ?
ROM:E75E		 fcb $3F ; ?
ROM:E75F		 fcb $3F ; ?
ROM:E760		 fcb $3F ; ?
ROM:E761		 fcb $3F ; ?
ROM:E762		 fcb $3F ; ?
ROM:E763		 fcb $3F ; ?
ROM:E764		 fcb $3F ; ?
ROM:E765		 fcb $3F ; ?
ROM:E766		 fcb $3F ; ?
ROM:E767		 fcb $3F ; ?
ROM:E768		 fcb $3F ; ?
ROM:E769		 fcb $3F ; ?
ROM:E76A		 fcb $3F ; ?
ROM:E76B		 fcb $3F ; ?
ROM:E76C		 fcb $3F ; ?
ROM:E76D		 fcb $3F ; ?
ROM:E76E		 fcb $3F ; ?
ROM:E76F		 fcb $3F ; ?
ROM:E770		 fcb $3F ; ?
ROM:E771		 fcb $3F ; ?
ROM:E772		 fcb $3F ; ?
ROM:E773		 fcb $3F ; ?
ROM:E774		 fcb $3F ; ?
ROM:E775		 fcb $3F ; ?
ROM:E776		 fcb $3F ; ?
ROM:E777		 fcb $3F ; ?
ROM:E778		 fcb $3F ; ?
ROM:E779		 fcb $3F ; ?
ROM:E77A		 fcb $3F ; ?
ROM:E77B		 fcb $3F ; ?
ROM:E77C		 fcb $3F ; ?
ROM:E77D		 fcb $3F ; ?
ROM:E77E X_E77E:	 fcb $3F ; ?
ROM:E77F		 fcb $3F ; ?
ROM:E780 X_E780:	 fdb $100, $200, $400, $800, $1000, $2000, $4000, $8000
ROM:E790		 fcb   0
ROM:E791		 fcb   1
ROM:E792		 fcb   0
ROM:E793		 fcb   0
ROM:E794		 fcb   0
ROM:E795		 fcb   4
ROM:E796		 fcb   0
ROM:E797		 fcb   8
ROM:E798		 fcb $3F ; ?
ROM:E799		 fcb $3F ; ?
ROM:E79A		 fcb $3F ; ?
ROM:E79B		 fcb $3F ; ?
ROM:E79C		 fcb $3F ; ?
ROM:E79D		 fcb $3F ; ?
ROM:E79E		 fcb $3F ; ?
ROM:E79F		 fcb $3F ; ?
ROM:E7A0
ROM:E7A0 ; =============== S U B R O U T I N E =======================================
ROM:E7A0
ROM:E7A0 ; sub_E7A0:
ROM:E7A0 ; There isn't anything at C000h so this should never be executed?
ROM:E7A0
ROM:E7A0 sub_E7A0:				 ; CODE	XREF: doTick_4ms+10P
ROM:E7A0					 ; ROM:F0A6P
ROM:E7A0					 ; DATA	XREF: ...
ROM:E7A0		 ldaa	 byte_C000
ROM:E7A3		 cmpa	 #$A9 ;	'©'      ; what is at C000h?
ROM:E7A5		 bne	 locret_E7EB
ROM:E7A7		 tsx
ROM:E7A8		 dex
ROM:E7A9		 dex
ROM:E7AA		 txs
ROM:E7AB		 clra
ROM:E7AC		 staa	 1,x
ROM:E7AE
ROM:E7AE loc_E7AE:				 ; CODE	XREF: sub_E7A0+45j
ROM:E7AE		 ldab	 1,x
ROM:E7B0		 ldx	 #$C020
ROM:E7B3		 abx
ROM:E7B4		 ldaa	 1,x
ROM:E7B6		 anda	 #$F
ROM:E7B8		 tsx
ROM:E7B9		 staa	 0,x
ROM:E7BB		 ldx	 #$C020
ROM:E7BE		 abx
ROM:E7BF		 ldab	 0,x
ROM:E7C1		 ldx	 #0
ROM:E7C4		 abx
ROM:E7C5		 ldd	 0,x
ROM:E7C7		 tsx
ROM:E7C8
ROM:E7C8 loc_E7C8:				 ; CODE	XREF: sub_E7A0+2Fj
ROM:E7C8		 tst	 0,x
ROM:E7CA		 beq	 loc_E7D1
ROM:E7CC		 lsrd
ROM:E7CD		 dec	 0,x
ROM:E7CF		 bra	 loc_E7C8
ROM:E7D1 ; ---------------------------------------------------------------------------
ROM:E7D1
ROM:E7D1 loc_E7D1:				 ; CODE	XREF: sub_E7A0+2Aj
ROM:E7D1		 tba
ROM:E7D2		 ldab	 1,x
ROM:E7D4		 ldx	 #$C020
ROM:E7D7		 abx
ROM:E7D8		 staa	 1,x
ROM:E7DA		 tsx
ROM:E7DB		 ldaa	 1,x
ROM:E7DD		 cmpa	 #6
ROM:E7DF		 bge	 loc_E7E7
ROM:E7E1		 inc	 1,x
ROM:E7E3		 inc	 1,x
ROM:E7E5		 bra	 loc_E7AE
ROM:E7E7 ; ---------------------------------------------------------------------------
ROM:E7E7
ROM:E7E7 loc_E7E7:				 ; CODE	XREF: sub_E7A0+3Fj
ROM:E7E7		 tsx
ROM:E7E8		 inx
ROM:E7E9		 inx
ROM:E7EA		 txs
ROM:E7EB
ROM:E7EB locret_E7EB:				 ; CODE	XREF: sub_E7A0+5j
ROM:E7EB		 rts
ROM:E7EB ; End of function sub_E7A0
ROM:E7EB
ROM:E7EB ; ---------------------------------------------------------------------------
ROM:E7EC		 fcb $3F ; ?
ROM:E7ED		 fcb $3F ; ?
ROM:E7EE		 fcb $3F ; ?
ROM:E7EF		 fcb $3F ; ?
ROM:E7F0		 fcb $3F ; ?
ROM:E7F1		 fcb $3F ; ?
ROM:E7F2		 fcb $3F ; ?
ROM:E7F3		 fcb $3F ; ?
ROM:E7F4		 fcb $3F ; ?
ROM:E7F5		 fcb $3F ; ?
ROM:E7F6		 fcb $3F ; ?
ROM:E7F7		 fcb $3F ; ?
ROM:E7F8		 fcb $3F ; ?
ROM:E7F9		 fcb $3F ; ?
ROM:E7FA		 fcb $3F ; ?
ROM:E7FB		 fcb $3F ; ?
ROM:E7FC		 fcb $3F ; ?
ROM:E7FD		 fcb $3F ; ?
ROM:E7FE		 fcb $3F ; ?
ROM:E7FF		 fcb $3F ; ?
ROM:E800 ; ---------------------------------------------------------------------------
ROM:E800
ROM:E800 nIRQ_IntHandler:
ROM:E800		 ldaa	 PORT2
ROM:E802		 oraa	 #8
ROM:E804		 staa	 PORT2		 ; toggle P23 to clear nIRQ
ROM:E806		 anda	 #$F7 ;	'÷'
ROM:E808		 staa	 PORT2
ROM:E80A		 ldab	 status_A3
ROM:E80C		 ldx	 byte_86
ROM:E80E		 cpx	 #$180
ROM:E811		 bcs	 loc_E81B+1
ROM:E813		 ldaa	 TCSR2
ROM:E815		 bita	 #$80 ;	'€'      ; test IC2IF
ROM:E817		 beq	 loc_E81B+1	 ; bra if no IC2 interrupt
ROM:E819		 orab	 #$20 ;	' '
ROM:E81B
ROM:E81B loc_E81B:				 ; CODE	XREF: ROM:E811j
ROM:E81B					 ; ROM:E817j
ROM:E81B		 cpx	 #$C4DF
ROM:E81E		 stab	 status_A3
ROM:E820		 ldab	 #1
ROM:E822		 ldx	 #$9A ;	'š'
ROM:E825		 jsr	 sub_F686	 ; sub_F686:
ROM:E825					 ; called with:
ROM:E825					 ;	X = 99h, B=2
ROM:E825					 ;   or	X = 9Ah, B=1
ROM:E828		 jsr	 sub_F6FC	 ; sub_F6FC:
ROM:E828					 ; This	may be the cylinder counter
ROM:E82B		 bita	 #1
ROM:E82D		 beq	 loc_E83D
ROM:E82F		 ldaa	 status_A3
ROM:E831		 bita	 #$80 ;	'€'
ROM:E833		 beq	 loc_E839
ROM:E835		 ldaa	 #$F
ROM:E837		 staa	 byte_84	 ; byte_84!!!
ROM:E839
ROM:E839 loc_E839:				 ; CODE	XREF: ROM:E833j
ROM:E839		 clra
ROM:E83A		 staa	 byte_C4
ROM:E83C		 rti
ROM:E83D ; ---------------------------------------------------------------------------
ROM:E83D
ROM:E83D loc_E83D:				 ; CODE	XREF: ROM:E82Dj
ROM:E83D		 ldaa	 #$F
ROM:E83F		 jsr	 sub_E880
ROM:E842		 rti
ROM:E842 ; ---------------------------------------------------------------------------
ROM:E843		 fcb $3F ; ?
ROM:E844		 fcb $3F ; ?
ROM:E845		 fcb $3F ; ?
ROM:E846		 fcb $3F ; ?
ROM:E847		 fcb $3F ; ?
ROM:E848		 fcb $3F ; ?
ROM:E849		 fcb $3F ; ?
ROM:E84A		 fcb $3F ; ?
ROM:E84B		 fcb $3F ; ?
ROM:E84C		 fcb $3F ; ?
ROM:E84D		 fcb $3F ; ?
ROM:E84E		 fcb $3F ; ?
ROM:E84F		 fcb $3F ; ?
ROM:E850		 fcb $3F ; ?
ROM:E851		 fcb $3F ; ?
ROM:E852		 fcb $3F ; ?
ROM:E853		 fcb $3F ; ?
ROM:E854		 fcb $3F ; ?
ROM:E855		 fcb $3F ; ?
ROM:E856		 fcb $3F ; ?
ROM:E857		 fcb $3F ; ?
ROM:E858		 fcb $3F ; ?
ROM:E859		 fcb $3F ; ?
ROM:E85A		 fcb $3F ; ?
ROM:E85B		 fcb $3F ; ?
ROM:E85C		 fcb $3F ; ?
ROM:E85D		 fcb $3F ; ?
ROM:E85E		 fcb $3F ; ?
ROM:E85F		 fcb $3F ; ?
ROM:E860		 fcb $3F ; ?
ROM:E861		 fcb $3F ; ?
ROM:E862		 fcb $3F ; ?
ROM:E863		 fcb $3F ; ?
ROM:E864		 fcb $3F ; ?
ROM:E865		 fcb $3F ; ?
ROM:E866		 fcb $3F ; ?
ROM:E867		 fcb $3F ; ?
ROM:E868		 fcb $3F ; ?
ROM:E869		 fcb $3F ; ?
ROM:E86A		 fcb $3F ; ?
ROM:E86B		 fcb $3F ; ?
ROM:E86C		 fcb $3F ; ?
ROM:E86D		 fcb $3F ; ?
ROM:E86E		 fcb $3F ; ?
ROM:E86F		 fcb $3F ; ?
ROM:E870		 fcb $3F ; ?
ROM:E871		 fcb $3F ; ?
ROM:E872		 fcb $3F ; ?
ROM:E873		 fcb $3F ; ?
ROM:E874		 fcb $3F ; ?
ROM:E875		 fcb $3F ; ?
ROM:E876		 fcb $3F ; ?
ROM:E877		 fcb $3F ; ?
ROM:E878		 fcb $3F ; ?
ROM:E879		 fcb $3F ; ?
ROM:E87A		 fcb $3F ; ?
ROM:E87B		 fcb $3F ; ?
ROM:E87C		 fcb $3F ; ?
ROM:E87D		 fcb $3F ; ?
ROM:E87E		 fcb $3F ; ?
ROM:E87F		 fcb $3F ; ?
ROM:E880
ROM:E880 ; =============== S U B R O U T I N E =======================================
ROM:E880
ROM:E880
ROM:E880 sub_E880:				 ; CODE	XREF: ROM:E83FP
ROM:E880					 ; ROM:E939P
ROM:E880		 ldab	 status_A3
ROM:E882		 bitb	 #8
ROM:E884		 bne	 loc_E88A
ROM:E886		 ldaa	 #$10
ROM:E888		 bra	 loc_E89E
ROM:E88A ; ---------------------------------------------------------------------------
ROM:E88A
ROM:E88A loc_E88A:				 ; CODE	XREF: sub_E880+4j
ROM:E88A		 andb	 #$F7 ;	'÷'
ROM:E88C		 stab	 status_A3
ROM:E88E		 cmpa	 byte_84
ROM:E890		 beq	 loc_E8B2
ROM:E892		 deca
ROM:E893		 cmpa	 byte_84
ROM:E895		 bne	 loc_E89D
ROM:E897		 ldab	 status_A3
ROM:E899		 bitb	 #$20 ;	' '
ROM:E89B		 bne	 locret_E8BB
ROM:E89D
ROM:E89D loc_E89D:				 ; CODE	XREF: sub_E880+15j
ROM:E89D		 inca
ROM:E89E
ROM:E89E loc_E89E:				 ; CODE	XREF: sub_E880+8j
ROM:E89E		 staa	 byte_84	 ; inc byte_84
ROM:E8A0		 ldaa	 count_98
ROM:E8A2		 inca
ROM:E8A3		 cmpa	 byte_E058
ROM:E8A6		 bcc	 loc_E8AB
ROM:E8A8		 staa	 count_98
ROM:E8AA		 rts
ROM:E8AB ; ---------------------------------------------------------------------------
ROM:E8AB
ROM:E8AB loc_E8AB:				 ; CODE	XREF: sub_E880+26j
ROM:E8AB		 ldab	 byte_A6
ROM:E8AD		 orab	 #1
ROM:E8AF		 stab	 byte_A6
ROM:E8B1		 rts
ROM:E8B2 ; ---------------------------------------------------------------------------
ROM:E8B2
ROM:E8B2 loc_E8B2:				 ; CODE	XREF: sub_E880+10j
ROM:E8B2		 ldab	 byte_A6
ROM:E8B4		 andb	 #$FE ;	'þ'
ROM:E8B6		 stab	 byte_A6
ROM:E8B8		 clrb
ROM:E8B9		 stab	 count_98
ROM:E8BB
ROM:E8BB locret_E8BB:				 ; CODE	XREF: sub_E880+1Bj
ROM:E8BB		 rts
ROM:E8BB ; End of function sub_E880
ROM:E8BB
ROM:E8BB ; ---------------------------------------------------------------------------
ROM:E8BC		 fcb $3F ; ?
ROM:E8BD		 fcb $3F ; ?
ROM:E8BE		 fcb $3F ; ?
ROM:E8BF		 fcb $3F ; ?
ROM:E8C0		 fcb $3F ; ?
ROM:E8C1		 fcb $3F ; ?
ROM:E8C2		 fcb $3F ; ?
ROM:E8C3		 fcb $3F ; ?
ROM:E8C4		 fcb $3F ; ?
ROM:E8C5		 fcb $3F ; ?
ROM:E8C6		 fcb $3F ; ?
ROM:E8C7		 fcb $3F ; ?
ROM:E8C8		 fcb $3F ; ?
ROM:E8C9		 fcb $3F ; ?
ROM:E8CA		 fcb $3F ; ?
ROM:E8CB		 fcb $3F ; ?
ROM:E8CC		 fcb $3F ; ?
ROM:E8CD		 fcb $3F ; ?
ROM:E8CE		 fcb $3F ; ?
ROM:E8CF		 fcb $3F ; ?
ROM:E8D0		 fcb $3F ; ?
ROM:E8D1		 fcb $3F ; ?
ROM:E8D2		 fcb $3F ; ?
ROM:E8D3		 fcb $3F ; ?
ROM:E8D4		 fcb $3F ; ?
ROM:E8D5		 fcb $3F ; ?
ROM:E8D6		 fcb $3F ; ?
ROM:E8D7		 fcb $3F ; ?
ROM:E8D8		 fcb $3F ; ?
ROM:E8D9		 fcb $3F ; ?
ROM:E8DA		 fcb $3F ; ?
ROM:E8DB		 fcb $3F ; ?
ROM:E8DC		 fcb $3F ; ?
ROM:E8DD		 fcb $3F ; ?
ROM:E8DE		 fcb $3F ; ?
ROM:E8DF		 fcb $3F ; ?
ROM:E8E0		 fcb $3F ; ?
ROM:E8E1		 fcb $3F ; ?
ROM:E8E2		 fcb $3F ; ?
ROM:E8E3		 fcb $3F ; ?
ROM:E8E4		 fcb $3F ; ?
ROM:E8E5		 fcb $3F ; ?
ROM:E8E6		 fcb $3F ; ?
ROM:E8E7		 fcb $3F ; ?
ROM:E8E8		 fcb $3F ; ?
ROM:E8E9		 fcb $3F ; ?
ROM:E8EA		 fcb $3F ; ?
ROM:E8EB		 fcb $3F ; ?
ROM:E8EC		 fcb $3F ; ?
ROM:E8ED		 fcb $3F ; ?
ROM:E8EE		 fcb $3F ; ?
ROM:E8EF		 fcb $3F ; ?
ROM:E8F0		 fcb $3F ; ?
ROM:E8F1		 fcb $3F ; ?
ROM:E8F2		 fcb $3F ; ?
ROM:E8F3		 fcb $3F ; ?
ROM:E8F4		 fcb $3F ; ?
ROM:E8F5		 fcb $3F ; ?
ROM:E8F6		 fcb $3F ; ?
ROM:E8F7		 fcb $3F ; ?
ROM:E8F8		 fcb $3F ; ?
ROM:E8F9		 fcb $3F ; ?
ROM:E8FA		 fcb $3F ; ?
ROM:E8FB		 fcb $3F ; ?
ROM:E8FC		 fcb $3F ; ?
ROM:E8FD		 fcb $3F ; ?
ROM:E8FE		 fcb $3F ; ?
ROM:E8FF		 fcb $3F ; ?
ROM:E900 ; ---------------------------------------------------------------------------
ROM:E900 ; IC_IntHandler:
ROM:E900 ; IC1 is the crank sensor input
ROM:E900 ; IC2 is ???
ROM:E900
ROM:E900 IC_IntHandler:
ROM:E900		 ldaa	 TCSR1
ROM:E902		 bita	 #$80 ;	'€'      ; test IC1 IF
ROM:E904		 bne	 loc_E909	 ; bra if no IC1 interrupt
ROM:E906		 jmp	 loc_F77C
ROM:E909 ; ---------------------------------------------------------------------------
ROM:E909
ROM:E909 loc_E909:				 ; CODE	XREF: ROM:E904j
ROM:E909		 ldd	 ICR1H		 ; clear interrupt flags
ROM:E90B		 ldab	 status_A3
ROM:E90D		 ldaa	 TCSR2
ROM:E90F		 bita	 #$80 ;	'€'
ROM:E911 check hex?
ROM:E911		 beq	 loc_E915+1
ROM:E913		 orab	 #$20 ;	' '
ROM:E915
ROM:E915 loc_E915:				 ; CODE	XREF: ROM:E911j
ROM:E915		 cpx	 #$C4DF
ROM:E918		 stab	 status_A3
ROM:E91A		 ldab	 #2
ROM:E91C		 ldx	 #$99 ;	'™'
ROM:E91F		 jsr	 sub_F686	 ; sub_F686:
ROM:E91F					 ; called with:
ROM:E91F					 ;	X = 99h, B=2
ROM:E91F					 ;   or	X = 9Ah, B=1
ROM:E922		 jsr	 sub_F6FC	 ; sub_F6FC:
ROM:E922					 ; This	may be the cylinder counter
ROM:E925		 bita	 #1
ROM:E927		 beq	 loc_E937
ROM:E929		 ldaa	 status_A3
ROM:E92B		 bita	 #$80 ;	'€'
ROM:E92D		 beq	 loc_E933
ROM:E92F		 ldaa	 #7
ROM:E931		 staa	 byte_84	 ; byte_84 = 7
ROM:E933
ROM:E933 loc_E933:				 ; CODE	XREF: ROM:E92Dj
ROM:E933		 clra
ROM:E934		 staa	 byte_C4
ROM:E936		 rti
ROM:E937 ; ---------------------------------------------------------------------------
ROM:E937
ROM:E937 loc_E937:				 ; CODE	XREF: ROM:E927j
ROM:E937		 ldaa	 #7
ROM:E939		 jsr	 sub_E880
ROM:E93C		 rti
ROM:E93C ; ---------------------------------------------------------------------------
ROM:E93D		 fcb $3F ; ?
ROM:E93E		 fcb $3F ; ?
ROM:E93F		 fcb $3F ; ?
ROM:E940		 fcb $3F ; ?
ROM:E941		 fcb $3F ; ?
ROM:E942		 fcb $3F ; ?
ROM:E943		 fcb $3F ; ?
ROM:E944		 fcb $3F ; ?
ROM:E945		 fcb $3F ; ?
ROM:E946		 fcb $3F ; ?
ROM:E947		 fcb $3F ; ?
ROM:E948		 fcb $3F ; ?
ROM:E949		 fcb $3F ; ?
ROM:E94A		 fcb $3F ; ?
ROM:E94B		 fcb $3F ; ?
ROM:E94C		 fcb $3F ; ?
ROM:E94D		 fcb $3F ; ?
ROM:E94E		 fcb $3F ; ?
ROM:E94F		 fcb $3F ; ?
ROM:E950		 fcb $3F ; ?
ROM:E951		 fcb $3F ; ?
ROM:E952		 fcb $3F ; ?
ROM:E953		 fcb $3F ; ?
ROM:E954		 fcb $3F ; ?
ROM:E955		 fcb $3F ; ?
ROM:E956		 fcb $3F ; ?
ROM:E957		 fcb $3F ; ?
ROM:E958		 fcb $3F ; ?
ROM:E959		 fcb $3F ; ?
ROM:E95A		 fcb $3F ; ?
ROM:E95B		 fcb $3F ; ?
ROM:E95C		 fcb $3F ; ?
ROM:E95D		 fcb $3F ; ?
ROM:E95E		 fcb $3F ; ?
ROM:E95F		 fcb $3F ; ?
ROM:E960		 fcb $3F ; ?
ROM:E961		 fcb $3F ; ?
ROM:E962		 fcb $3F ; ?
ROM:E963		 fcb $3F ; ?
ROM:E964		 fcb $3F ; ?
ROM:E965		 fcb $3F ; ?
ROM:E966		 fcb $3F ; ?
ROM:E967		 fcb $3F ; ?
ROM:E968		 fcb $3F ; ?
ROM:E969		 fcb $3F ; ?
ROM:E96A		 fcb $3F ; ?
ROM:E96B		 fcb $3F ; ?
ROM:E96C		 fcb $3F ; ?
ROM:E96D		 fcb $3F ; ?
ROM:E96E		 fcb $3F ; ?
ROM:E96F		 fcb $3F ; ?
ROM:E970		 fcb $3F ; ?
ROM:E971		 fcb $3F ; ?
ROM:E972		 fcb $3F ; ?
ROM:E973		 fcb $3F ; ?
ROM:E974		 fcb $3F ; ?
ROM:E975		 fcb $3F ; ?
ROM:E976		 fcb $3F ; ?
ROM:E977		 fcb $3F ; ?
ROM:E978		 fcb $3F ; ?
ROM:E979		 fcb $3F ; ?
ROM:E97A		 fcb $3F ; ?
ROM:E97B		 fcb $3F ; ?
ROM:E97C		 fcb $3F ; ?
ROM:E97D		 fcb $3F ; ?
ROM:E97E		 fcb $3F ; ?
ROM:E97F		 fcb $3F ; ?
ROM:E980		 fcb $3F ; ?
ROM:E981		 fcb $3F ; ?
ROM:E982		 fcb $3F ; ?
ROM:E983		 fcb $3F ; ?
ROM:E984		 fcb $3F ; ?
ROM:E985		 fcb $3F ; ?
ROM:E986		 fcb $3F ; ?
ROM:E987		 fcb $3F ; ?
ROM:E988		 fcb $3F ; ?
ROM:E989		 fcb $3F ; ?
ROM:E98A		 fcb $3F ; ?
ROM:E98B		 fcb $3F ; ?
ROM:E98C		 fcb $3F ; ?
ROM:E98D		 fcb $3F ; ?
ROM:E98E		 fcb $3F ; ?
ROM:E98F		 fcb $3F ; ?
ROM:E990		 fcb $3F ; ?
ROM:E991		 fcb $3F ; ?
ROM:E992		 fcb $3F ; ?
ROM:E993		 fcb $3F ; ?
ROM:E994		 fcb $3F ; ?
ROM:E995		 fcb $3F ; ?
ROM:E996		 fcb $3F ; ?
ROM:E997		 fcb $3F ; ?
ROM:E998		 fcb $3F ; ?
ROM:E999		 fcb $3F ; ?
ROM:E99A		 fcb $3F ; ?
ROM:E99B		 fcb $3F ; ?
ROM:E99C		 fcb $3F ; ?
ROM:E99D		 fcb $3F ; ?
ROM:E99E		 fcb $3F ; ?
ROM:E99F		 fcb $3F ; ?
ROM:E9A0		 fcb $3F ; ?
ROM:E9A1		 fcb $3F ; ?
ROM:E9A2		 fcb $3F ; ?
ROM:E9A3		 fcb $3F ; ?
ROM:E9A4		 fcb $3F ; ?
ROM:E9A5		 fcb $3F ; ?
ROM:E9A6		 fcb $3F ; ?
ROM:E9A7		 fcb $3F ; ?
ROM:E9A8		 fcb $3F ; ?
ROM:E9A9		 fcb $3F ; ?
ROM:E9AA		 fcb $3F ; ?
ROM:E9AB		 fcb $3F ; ?
ROM:E9AC		 fcb $3F ; ?
ROM:E9AD		 fcb $3F ; ?
ROM:E9AE		 fcb $3F ; ?
ROM:E9AF		 fcb $3F ; ?
ROM:E9B0		 fcb $3F ; ?
ROM:E9B1		 fcb $3F ; ?
ROM:E9B2		 fcb $3F ; ?
ROM:E9B3		 fcb $3F ; ?
ROM:E9B4		 fcb $3F ; ?
ROM:E9B5		 fcb $3F ; ?
ROM:E9B6		 fcb $3F ; ?
ROM:E9B7		 fcb $3F ; ?
ROM:E9B8		 fcb $3F ; ?
ROM:E9B9		 fcb $3F ; ?
ROM:E9BA		 fcb $3F ; ?
ROM:E9BB		 fcb $3F ; ?
ROM:E9BC		 fcb $3F ; ?
ROM:E9BD		 fcb $3F ; ?
ROM:E9BE		 fcb $3F ; ?
ROM:E9BF		 fcb $3F ; ?
ROM:E9C0		 fcb $3F ; ?
ROM:E9C1		 fcb $3F ; ?
ROM:E9C2		 fcb $3F ; ?
ROM:E9C3		 fcb $3F ; ?
ROM:E9C4		 fcb $3F ; ?
ROM:E9C5		 fcb $3F ; ?
ROM:E9C6		 fcb $3F ; ?
ROM:E9C7		 fcb $3F ; ?
ROM:E9C8		 fcb $3F ; ?
ROM:E9C9		 fcb $3F ; ?
ROM:E9CA		 fcb $3F ; ?
ROM:E9CB		 fcb $3F ; ?
ROM:E9CC		 fcb $3F ; ?
ROM:E9CD		 fcb $3F ; ?
ROM:E9CE		 fcb $3F ; ?
ROM:E9CF		 fcb $3F ; ?
ROM:E9D0		 fcb $3F ; ?
ROM:E9D1		 fcb $3F ; ?
ROM:E9D2		 fcb $3F ; ?
ROM:E9D3		 fcb $3F ; ?
ROM:E9D4		 fcb $3F ; ?
ROM:E9D5		 fcb $3F ; ?
ROM:E9D6		 fcb $3F ; ?
ROM:E9D7		 fcb $3F ; ?
ROM:E9D8		 fcb $3F ; ?
ROM:E9D9		 fcb $3F ; ?
ROM:E9DA		 fcb $3F ; ?
ROM:E9DB		 fcb $3F ; ?
ROM:E9DC		 fcb $3F ; ?
ROM:E9DD		 fcb $3F ; ?
ROM:E9DE		 fcb $3F ; ?
ROM:E9DF		 fcb $3F ; ?
ROM:E9E0		 fcb $3F ; ?
ROM:E9E1		 fcb $3F ; ?
ROM:E9E2		 fcb $3F ; ?
ROM:E9E3		 fcb $3F ; ?
ROM:E9E4		 fcb $3F ; ?
ROM:E9E5		 fcb $3F ; ?
ROM:E9E6		 fcb $3F ; ?
ROM:E9E7		 fcb $3F ; ?
ROM:E9E8		 fcb $3F ; ?
ROM:E9E9		 fcb $3F ; ?
ROM:E9EA		 fcb $3F ; ?
ROM:E9EB		 fcb $3F ; ?
ROM:E9EC		 fcb $3F ; ?
ROM:E9ED		 fcb $3F ; ?
ROM:E9EE		 fcb $3F ; ?
ROM:E9EF		 fcb $3F ; ?
ROM:E9F0		 fcb $3F ; ?
ROM:E9F1		 fcb $3F ; ?
ROM:E9F2		 fcb $3F ; ?
ROM:E9F3		 fcb $3F ; ?
ROM:E9F4		 fcb $3F ; ?
ROM:E9F5		 fcb $3F ; ?
ROM:E9F6		 fcb $3F ; ?
ROM:E9F7		 fcb $3F ; ?
ROM:E9F8		 fcb $3F ; ?
ROM:E9F9		 fcb $3F ; ?
ROM:E9FA		 fcb $3F ; ?
ROM:E9FB		 fcb $3F ; ?
ROM:E9FC		 fcb $3F ; ?
ROM:E9FD		 fcb $3F ; ?
ROM:E9FE		 fcb $3F ; ?
ROM:E9FF		 fcb $3F ; ?
ROM:EA00
ROM:EA00 ; =============== S U B R O U T I N E =======================================
ROM:EA00
ROM:EA00 ; doTick_4ms:
ROM:EA00 ; called from F091 and	JMP_TBL1
ROM:EA00
ROM:EA00 doTick_4ms:
ROM:EA00		 nop
ROM:EA01		 nop
ROM:EA02		 nop
ROM:EA03		 jsr	 sub_FF86
ROM:EA06		 jsr	 sub_FFC6	 ;  memory copy??
ROM:EA09		 ldab	 sub_E7A0	 ; E7A0	= B6h
ROM:EA0C		 cmpb	 #$B6 ;	'¶'      ; There isn't anything at C000?
ROM:EA0E		 bne	 loc_EA13
ROM:EA10		 jsr	 sub_E7A0	 ; always call
ROM:EA13
ROM:EA13 loc_EA13:				 ; CODE	XREF: doTick_4ms+Ej
ROM:EA13		 jsr	 Get_MAP	 ; get_MAP:
ROM:EA13					 ; get MAP values from ADC, check against fault	limits
ROM:EA13					 ; apply default values	if out of range
ROM:EA13					 ;
ROM:EA16		 jsr	 MAP_EB00
ROM:EA19		 jsr	 get_VBatt
ROM:EA1C		 jsr	 sub_F3C2
ROM:EA1F		 jsr	 loc_EA8B
ROM:EA22		 ldx	 #$52 ;	'R'
ROM:EA25		 jsr	 sub_EA34
ROM:EA28		 inx
ROM:EA29		 inx
ROM:EA2A		 jsr	 sub_EA34
ROM:EA2D		 jsr	 loc_EB74
ROM:EA30		 jsr	 sub_F4E5
ROM:EA33		 rts
ROM:EA33 ; End of function doTick_4ms
ROM:EA33
ROM:EA34
ROM:EA34 ; =============== S U B R O U T I N E =======================================
ROM:EA34
ROM:EA34
ROM:EA34 sub_EA34:				 ; CODE	XREF: doTick_4ms+25P
ROM:EA34					 ; doTick_4ms+2AP
ROM:EA34		 ldaa	 byte_A4
ROM:EA36		 anda	 #7
ROM:EA38		 eora	 #7
ROM:EA3A		 bne	 loc_EA41
ROM:EA3C		 ldd	 word_E00C
ROM:EA3F		 bra	 loc_EA88
ROM:EA41 ; ---------------------------------------------------------------------------
ROM:EA41
ROM:EA41 loc_EA41:				 ; CODE	XREF: sub_EA34+6j
ROM:EA41		 ldab	 #$40 ;	'@'
ROM:EA43		 ldaa	 CTS_60		 ; a copy of CTS_C0 or CTS_BE
ROM:EA45		 beq	 loc_EA49
ROM:EA47		 addb	 #$80 ;	'€'
ROM:EA49
ROM:EA49 loc_EA49:				 ; CODE	XREF: sub_EA34+11j
ROM:EA49		 ldaa	 Baro_IAT_5E
ROM:EA4B		 mul
ROM:EA4C		 std	 byte_AF	 ; temporary register (Heap)?
ROM:EA4E		 ldaa	 Baro_IAT_5E
ROM:EA50		 ldab	 byte_61
ROM:EA52		 mul
ROM:EA53		 lsrd
ROM:EA54		 addd	 byte_AF	 ; temporary register (Heap)?
ROM:EA56		 std	 byte_AF	 ; temporary register (Heap)?
ROM:EA58		 lsrd
ROM:EA59		 lsrd
ROM:EA5A		 lsrd
ROM:EA5B		 std	 byte_B1
ROM:EA5D		 ldaa	 byte_5F
ROM:EA5F		 bne	 loc_EA64
ROM:EA61		 clrb
ROM:EA62		 bra	 loc_EA6D
ROM:EA64 ; ---------------------------------------------------------------------------
ROM:EA64
ROM:EA64 loc_EA64:				 ; CODE	XREF: sub_EA34+2Bj
ROM:EA64		 pshx
ROM:EA65		 psha
ROM:EA66		 ldd	 byte_AF	 ; temporary register (Heap)?
ROM:EA68		 jsr	 loc_FF43+1
ROM:EA6B		 pulx
ROM:EA6C		 lsrd
ROM:EA6D
ROM:EA6D loc_EA6D:				 ; CODE	XREF: sub_EA34+2Ej
ROM:EA6D		 addd	 byte_B1
ROM:EA6F		 lsrd
ROM:EA70		 lsrd
ROM:EA71		 pshx
ROM:EA72		 ldx	 4,x
ROM:EA74		 jsr	 Mult_FF5D
ROM:EA77		 bcs	 loc_EA84
ROM:EA79		 tsta
ROM:EA7A		 bmi	 loc_EA84
ROM:EA7C		 addd	 VBatt_5A
ROM:EA7E		 bmi	 loc_EA84
ROM:EA80		 addd	 byte_5C
ROM:EA82		 bpl	 loc_EA87
ROM:EA84
ROM:EA84 loc_EA84:				 ; CODE	XREF: sub_EA34+43j
ROM:EA84					 ; sub_EA34+46j ...
ROM:EA84		 ldd	 #$7FFF
ROM:EA87
ROM:EA87 loc_EA87:				 ; CODE	XREF: sub_EA34+4Ej
ROM:EA87		 pulx
ROM:EA88
ROM:EA88 loc_EA88:				 ; CODE	XREF: sub_EA34+Bj
ROM:EA88		 std	 0,x
ROM:EA8A		 rts
ROM:EA8A ; End of function sub_EA34
ROM:EA8A
ROM:EA8B ; ---------------------------------------------------------------------------
ROM:EA8B
ROM:EA8B loc_EA8B:				 ; CODE	XREF: doTick_4ms+1FP
ROM:EA8B		 ldd	 byte_86	 ;  D =	86:87
ROM:EA8D		 subd	 word_E019	 ;  =200h
ROM:EA90		 bcc	 loc_EAB7+1	 ;  bra	if 86:87 >200h
ROM:EA92		 ldaa	 TPS
ROM:EA94		 cmpa	 byte_E01B	 ;  TPS	- F1h
ROM:EA97		 bcc	 loc_EAB7+1	 ; bra if TPS>F1h)
ROM:EA99		 clrb			 ;  else clear B
ROM:EA9A		 ldaa	 TPS
ROM:EA9C		 suba	 byte_79	 ;  TPS	- byte_79
ROM:EA9E		 bls	 loc_EAB9	 ;  bra	if TPS < byte_79
ROM:EAA0		 ldx	 #$E1C0		 ;  else point to a 4-byte table
ROM:EAA3		 cmpa	 byte_E0E0	 ;  TPS	- 3
ROM:EAA6		 bls	 loc_EAB5	 ;  bra	if TPS<3
ROM:EAA8		 inx			 ;  else X = E1C1
ROM:EAA9		 cmpa	 byte_E0E1	 ;  TPS	- 5
ROM:EAAC		 bls	 loc_EAB5	 ;  bra	if TPS<5
ROM:EAAE		 inx			 ;  X =	E1C2
ROM:EAAF		 cmpa	 byte_E0E2	 ; TPS - Ah
ROM:EAB2		 bls	 loc_EAB5	 ;  bra	if TPS < A
ROM:EAB4		 inx			 ;  else X = E1C3
ROM:EAB5
ROM:EAB5 loc_EAB5:				 ; CODE	XREF: ROM:EAA6j
ROM:EAB5					 ; ROM:EAACj ...
ROM:EAB5		 ldab	 0,x
ROM:EAB7
ROM:EAB7 loc_EAB7:				 ; CODE	XREF: ROM:EA90j
ROM:EAB7					 ; ROM:EA97j
ROM:EAB7		 brn	 loc_EB17+1
ROM:EAB9
ROM:EAB9 loc_EAB9:				 ; CODE	XREF: ROM:EA9Ej
ROM:EAB9		 stab	 byte_5F
ROM:EABB		 rts
ROM:EABB ; ---------------------------------------------------------------------------
ROM:EABC		 fcb $3F ; ?
ROM:EABD		 fcb $3F ; ?
ROM:EABE		 fcb $3F ; ?
ROM:EABF		 fcb $3F ; ?
ROM:EAC0		 fcb $3F ; ?
ROM:EAC1		 fcb $3F ; ?
ROM:EAC2		 fcb $3F ; ?
ROM:EAC3		 fcb $3F ; ?
ROM:EAC4		 fcb $3F ; ?
ROM:EAC5		 fcb $3F ; ?
ROM:EAC6		 fcb $3F ; ?
ROM:EAC7		 fcb $3F ; ?
ROM:EAC8		 fcb $3F ; ?
ROM:EAC9		 fcb $3F ; ?
ROM:EACA		 fcb $3F ; ?
ROM:EACB		 fcb $3F ; ?
ROM:EACC		 fcb $3F ; ?
ROM:EACD		 fcb $3F ; ?
ROM:EACE		 fcb $3F ; ?
ROM:EACF		 fcb $3F ; ?
ROM:EAD0		 fcb $3F ; ?
ROM:EAD1		 fcb $3F ; ?
ROM:EAD2		 fcb $3F ; ?
ROM:EAD3		 fcb $3F ; ?
ROM:EAD4		 fcb $3F ; ?
ROM:EAD5		 fcb $3F ; ?
ROM:EAD6		 fcb $3F ; ?
ROM:EAD7		 fcb $3F ; ?
ROM:EAD8		 fcb $3F ; ?
ROM:EAD9		 fcb $3F ; ?
ROM:EADA		 fcb $3F ; ?
ROM:EADB		 fcb $3F ; ?
ROM:EADC		 fcb $3F ; ?
ROM:EADD		 fcb $3F ; ?
ROM:EADE		 fcb $3F ; ?
ROM:EADF		 fcb $3F ; ?
ROM:EAE0		 fcb $3F ; ?
ROM:EAE1		 fcb $3F ; ?
ROM:EAE2		 fcb $3F ; ?
ROM:EAE3		 fcb $3F ; ?
ROM:EAE4		 fcb $3F ; ?
ROM:EAE5		 fcb $3F ; ?
ROM:EAE6		 fcb $3F ; ?
ROM:EAE7		 fcb $3F ; ?
ROM:EAE8		 fcb $3F ; ?
ROM:EAE9		 fcb $3F ; ?
ROM:EAEA		 fcb $3F ; ?
ROM:EAEB		 fcb $3F ; ?
ROM:EAEC		 fcb $3F ; ?
ROM:EAED		 fcb $3F ; ?
ROM:EAEE		 fcb $3F ; ?
ROM:EAEF		 fcb $3F ; ?
ROM:EAF0		 fcb $3F ; ?
ROM:EAF1		 fcb $3F ; ?
ROM:EAF2		 fcb $3F ; ?
ROM:EAF3		 fcb $3F ; ?
ROM:EAF4		 fcb $3F ; ?
ROM:EAF5		 fcb $3F ; ?
ROM:EAF6		 fcb $3F ; ?
ROM:EAF7		 fcb $3F ; ?
ROM:EAF8		 fcb $3F ; ?
ROM:EAF9		 fcb $3F ; ?
ROM:EAFA		 fcb $3F ; ?
ROM:EAFB		 fcb $3F ; ?
ROM:EAFC		 fcb $3F ; ?
ROM:EAFD		 fcb $3F ; ?
ROM:EAFE		 fcb $3F ; ?
ROM:EAFF		 fcb $3F ; ?
ROM:EB00 ; ---------------------------------------------------------------------------
ROM:EB00 MAP_EB200:
ROM:EB00 called	after getMAP
ROM:EB00
ROM:EB00 MAP_EB00:				 ; CODE	XREF: doTick_4ms+16P
ROM:EB00		 ldab	 #1
ROM:EB02		 ldx	 #$E00E
ROM:EB05		 jsr	 sub_F511	 ; sub_F511:
ROM:EB05					 ;  called with	X = E00Eh, B=1h
ROM:EB05					 ;  or		X = E030h, B=2h
ROM:EB05					 ;  sets (fault?) flags	in status_A0
ROM:EB08		 ldd	 byte_86
ROM:EB0A		 jsr	 sub_FE88	 ; sub_FE88:
ROM:EB0A					 ;  jump to a table look up routine
ROM:EB0D		 lsrd
ROM:EB0D ; ---------------------------------------------------------------------------
ROM:EB0E		 fdb 0
ROM:EB10 ; ---------------------------------------------------------------------------
ROM:EB10		 nega
ROM:EB11		 lsld
ROM:EB12		 lsld
ROM:EB13		 std	 byte_B3
ROM:EB15		 ldaa	 status_A0
ROM:EB17
ROM:EB17 loc_EB17:				 ; CODE	XREF: ROM:loc_EAB7j
ROM:EB17		 bita	 #1
ROM:EB19		 beq	 loc_EB39	 ;  MAP	lookup from 3d LUT at E200
ROM:EB1B		 ldaa	 TPS		 ;  otherwise a	TPS look up
ROM:EB1D		 jsr	 sub_FE7A
ROM:EB20		 adcb	 $11,x
ROM:EB22		 ldab	 #$10
ROM:EB24		 cmpa	 #$58 ;	'X'
ROM:EB26		 bcc	 loc_EB2C
ROM:EB28		 aslb
ROM:EB29		 mul
ROM:EB2A		 bra	 loc_EB31
ROM:EB2C ; ---------------------------------------------------------------------------
ROM:EB2C
ROM:EB2C loc_EB2C:				 ; CODE	XREF: ROM:EB26j
ROM:EB2C		 lsrb
ROM:EB2D		 mul
ROM:EB2E		 addd	 #$840
ROM:EB31
ROM:EB31 loc_EB31:				 ; CODE	XREF: ROM:EB2Aj
ROM:EB31		 ldx	 #$E400
ROM:EB34		 bsr	 tableLU_3Db	 ; tableLU_3Db:
ROM:EB34					 ; called with:
ROM:EB34					 ;   ???
ROM:EB34					 ; calls:
ROM:EB34					 ;   table_LU_3D
ROM:EB34					 ; returns:
ROM:EB34					 ;    a	value in D
ROM:EB34					 ;    a	value in byte_58
ROM:EB34					 ;
ROM:EB36		 std	 byte_56
ROM:EB38		 rts
ROM:EB39 ; ---------------------------------------------------------------------------
ROM:EB39
ROM:EB39 loc_EB39:				 ; CODE	XREF: ROM:EB19j
ROM:EB39		 ldaa	 MAPL_Tn	 ; MAPL_Tn =
ROM:EB3B		 jsr	 MAP_F1CC	 ; MAP_F1CC:
ROM:EB3B					 ; Always called before	a MAP table look up
ROM:EB3B					 ; call	with:
ROM:EB3B					 ;    X	= table	address
ROM:EB3B					 ;    A	= MAP value
ROM:EB3B					 ; returns:
ROM:EB3B					 ;    a	value in D
ROM:EB3B					 ;
ROM:EB3E		 std	 byte_AF	 ; temporary register (Heap)?
ROM:EB40		 ldd	 byte_B3
ROM:EB42		 ldx	 #$E200		 ; MAPL_T1 look	up
ROM:EB45		 jsr	 tableLU_3D	 ; tableLU_3D:
ROM:EB45					 ; called with:
ROM:EB45					 ; ??
ROM:EB45					 ; called from:
ROM:EB45					 ;  tableLU_3Da
ROM:EB45					 ;  tableLU_3Db
ROM:EB48		 lsrd
ROM:EB49		 lsrd
ROM:EB4A		 std	 byte_56
ROM:EB4C
ROM:EB4C MAPR_LU:				 ; MAPR_T1 lookup
ROM:EB4C		 ldaa	 MAPR_T1
ROM:EB4E		 jsr	 MAP_F1CC	 ; MAP_F1CC:
ROM:EB4E					 ; Always called before	a MAP table look up
ROM:EB4E					 ; call	with:
ROM:EB4E					 ;    X	= table	address
ROM:EB4E					 ;    A	= MAP value
ROM:EB4E					 ; returns:
ROM:EB4E					 ;    a	value in D
ROM:EB4E					 ;
ROM:EB51		 ldx	 #$E200
ROM:EB54		 bsr	 tableLU_3Db	 ; tableLU_3Db:
ROM:EB54					 ; called with:
ROM:EB54					 ;   ???
ROM:EB54					 ; calls:
ROM:EB54					 ;   table_LU_3D
ROM:EB54					 ; returns:
ROM:EB54					 ;    a	value in D
ROM:EB54					 ;    a	value in byte_58
ROM:EB54					 ;
ROM:EB56		 ldaa	 MAPL_Raw
ROM:EB58		 beq	 loc_EB5F	 ; use MAPR if MAPL fault*
ROM:EB5A		 ldd	 result_58	 ; get value from table	look up
ROM:EB5C		 std	 byte_56	 ; and save to byte_56
ROM:EB5E		 rts
ROM:EB5F ; ---------------------------------------------------------------------------
ROM:EB5F
ROM:EB5F loc_EB5F:				 ; CODE	XREF: ROM:EB58j
ROM:EB5F		 ldaa	 MAPR_Raw	 ;  get	MAPR_Raw
ROM:EB61		 beq	 locret_EB67
ROM:EB63		 ldd	 byte_56	 ;  copy 56 to 58
ROM:EB65		 std	 result_58	 ; MAP related,	result from 3d LUT
ROM:EB67
ROM:EB67 locret_EB67:				 ; CODE	XREF: ROM:EB61j
ROM:EB67		 rts
ROM:EB68
ROM:EB68 ; =============== S U B R O U T I N E =======================================
ROM:EB68
ROM:EB68 ; tableLU_3Db:
ROM:EB68 ; called with:
ROM:EB68 ;   ???
ROM:EB68 ; calls:
ROM:EB68 ;   table_LU_3D
ROM:EB68 ; returns:
ROM:EB68 ;    a	value in D
ROM:EB68 ;    a	value in byte_58
ROM:EB68 ;
ROM:EB68
ROM:EB68 tableLU_3Db:				 ; CODE	XREF: ROM:EB34p
ROM:EB68					 ; ROM:EB54p
ROM:EB68		 std	 byte_AF	 ; temporary register (Heap)?
ROM:EB6A		 ldd	 byte_B3
ROM:EB6C		 jsr	 tableLU_3D	 ; tableLU_3D:
ROM:EB6C					 ; called with:
ROM:EB6C					 ; ??
ROM:EB6C					 ; called from:
ROM:EB6C					 ;  tableLU_3Da
ROM:EB6C					 ;  tableLU_3Db
ROM:EB6F		 lsrd
ROM:EB70		 lsrd
ROM:EB71		 std	 result_58	 ; MAP related,	result from 3d LUT
ROM:EB73		 rts
ROM:EB73 ; End of function tableLU_3Db
ROM:EB73
ROM:EB74 ; ---------------------------------------------------------------------------
ROM:EB74
ROM:EB74 loc_EB74:				 ; CODE	XREF: doTick_4ms+2DP
ROM:EB74		 ldaa	 status_A0
ROM:EB76		 bita	 #4
ROM:EB78		 beq	 loc_EB7F	 ; if 0? get value from	E500
ROM:EB7A		 ldaa	 byte_E03C	 ; else	load default = 50h = 80
ROM:EB7D		 bra	 loc_EBF4
ROM:EB7F ; ---------------------------------------------------------------------------
ROM:EB7F
ROM:EB7F loc_EB7F:				 ; CODE	XREF: ROM:EB78j
ROM:EB7F		 ldab	 #2
ROM:EB81		 ldx	 #$E030
ROM:EB84		 jsr	 sub_F511	 ; sub_F511:
ROM:EB84					 ;  called with	X = E00Eh, B=1h
ROM:EB84					 ;  or		X = E030h, B=2h
ROM:EB84					 ;  sets (fault?) flags	in status_A0
ROM:EB87		 ldd	 byte_86
ROM:EB89		 jsr	 sub_FE88	 ; sub_FE88:
ROM:EB89					 ;  jump to a table look up routine
ROM:EB89 ; ---------------------------------------------------------------------------
ROM:EB8C		 fcb 3
ROM:EB8D		 fcb $80 ; €
ROM:EB8E		 fcb   0
ROM:EB8F ; ---------------------------------------------------------------------------
ROM:EB8F		 bra	 loc_EB96
ROM:EB91 ; ---------------------------------------------------------------------------
ROM:EB91		 std	 byte_B3
ROM:EB93		 subd	 #$1C0
ROM:EB96
ROM:EB96 loc_EB96:				 ; CODE	XREF: ROM:EB8Fj
ROM:EB96		 bcc	 loc_EB9E
ROM:EB98		 ldd	 byte_B3
ROM:EB9A		 lsld
ROM:EB9B		 lsld
ROM:EB9C		 bra	 loc_EBAE
ROM:EB9E ; ---------------------------------------------------------------------------
ROM:EB9E
ROM:EB9E loc_EB9E:				 ; CODE	XREF: ROM:loc_EB96j
ROM:EB9E		 std	 byte_B3
ROM:EBA0		 subd	 #$300
ROM:EBA3		 bcc	 loc_EBAC
ROM:EBA5		 ldd	 byte_B3
ROM:EBA7		 lsld
ROM:EBA8		 adda	 #7
ROM:EBAA		 bra	 loc_EBAE
ROM:EBAC ; ---------------------------------------------------------------------------
ROM:EBAC
ROM:EBAC loc_EBAC:				 ; CODE	XREF: ROM:EBA3j
ROM:EBAC		 adda	 #$D
ROM:EBAE
ROM:EBAE loc_EBAE:				 ; CODE	XREF: ROM:EB9Cj
ROM:EBAE					 ; ROM:EBAAj
ROM:EBAE		 std	 byte_B3
ROM:EBB0		 ldab	 status_A0
ROM:EBB2		 bitb	 #2		 ; TPS v RPM
ROM:EBB4		 beq	 loc_EBD3
ROM:EBB6		 ldaa	 TPS
ROM:EBB8		 jsr	 sub_FE7A
ROM:EBBB		 adcb	 $11,x
ROM:EBBD		 ldab	 #$10
ROM:EBBF		 cmpa	 #$58 ;	'X'
ROM:EBC1		 bcc	 loc_EBC7
ROM:EBC3		 aslb
ROM:EBC4		 mul
ROM:EBC5		 bra	 loc_EBCC
ROM:EBC7 ; ---------------------------------------------------------------------------
ROM:EBC7
ROM:EBC7 loc_EBC7:				 ; CODE	XREF: ROM:EBC1j
ROM:EBC7		 lsrb
ROM:EBC8		 mul
ROM:EBC9		 addd	 #$840
ROM:EBCC
ROM:EBCC loc_EBCC:				 ; CODE	XREF: ROM:EBC5j
ROM:EBCC		 std	 byte_AF	 ; temporary register (Heap)?
ROM:EBCE		 ldx	 #$E600
ROM:EBD1		 bra	 loc_EBEF
ROM:EBD3 ; ---------------------------------------------------------------------------
ROM:EBD3
ROM:EBD3 loc_EBD3:				 ; CODE	XREF: ROM:EBB4j
ROM:EBD3		 ldaa	 MAPL_Raw
ROM:EBD5		 beq	 loc_EBDB
ROM:EBD7		 ldaa	 MAPR_T1
ROM:EBD9		 bra	 loc_EBE7
ROM:EBDB ; ---------------------------------------------------------------------------
ROM:EBDB
ROM:EBDB loc_EBDB:				 ; CODE	XREF: ROM:EBD5j
ROM:EBDB		 ldaa	 MAPR_Raw
ROM:EBDD		 beq	 loc_EBE3	 ;  bra	if MAPR	fault
ROM:EBDF		 ldaa	 MAPL_Tn	 ;  else get MAPL
ROM:EBE1		 bra	 loc_EBE7
ROM:EBE3 ; ---------------------------------------------------------------------------
ROM:EBE3
ROM:EBE3 loc_EBE3:				 ; CODE	XREF: ROM:EBDDj
ROM:EBE3		 ldd	 MAPL_Tn	 ;  fetch MAPL,	MAPR
ROM:EBE5		 aba
ROM:EBE6		 rora			 ;  MAP	average	= (L+R)/2
ROM:EBE7
ROM:EBE7 loc_EBE7:				 ; CODE	XREF: ROM:EBD9j
ROM:EBE7					 ; ROM:EBE1j
ROM:EBE7		 jsr	 MAP_F1CC	 ; MAP_F1CC:
ROM:EBE7					 ; Always called before	a MAP table look up
ROM:EBE7					 ; call	with:
ROM:EBE7					 ;    X	= table	address
ROM:EBE7					 ;    A	= MAP value
ROM:EBE7					 ; returns:
ROM:EBE7					 ;    a	value in D
ROM:EBE7					 ;
ROM:EBEA		 std	 byte_AF	 ; temporary register (Heap)?
ROM:EBEC		 ldx	 #$E500
ROM:EBEF
ROM:EBEF loc_EBEF:				 ; CODE	XREF: ROM:EBD1j
ROM:EBEF		 ldd	 byte_B3
ROM:EBF1		 jsr	 tableLU_3D	 ; tableLU_3D:
ROM:EBF1					 ; called with:
ROM:EBF1					 ; ??
ROM:EBF1					 ; called from:
ROM:EBF1					 ;  tableLU_3Da
ROM:EBF1					 ;  tableLU_3Db
ROM:EBF4
ROM:EBF4 loc_EBF4:				 ; CODE	XREF: ROM:EB7Dj
ROM:EBF4		 staa	 byte_63	 ; from	LUT at E500
ROM:EBF6		 rts
ROM:EBF6 ; ---------------------------------------------------------------------------
ROM:EBF7		 fcb $3F ; ?
ROM:EBF8		 fcb $3F ; ?
ROM:EBF9		 fcb $3F ; ?
ROM:EBFA		 fcb $3F ; ?
ROM:EBFB		 fcb $3F ; ?
ROM:EBFC		 fcb $3F ; ?
ROM:EBFD		 fcb $3F ; ?
ROM:EBFE		 fcb $3F ; ?
ROM:EBFF		 fcb $3F ; ?
ROM:EC00
ROM:EC00 ; =============== S U B R O U T I N E =======================================
ROM:EC00
ROM:EC00 ; Attributes: noreturn
ROM:EC00
ROM:EC00 Main_Loop:				 ; CODE	XREF: Main_Loop+7j
ROM:EC00					 ; Main_Loop:loc_EC92J	...
ROM:EC00		 jsr	 sub_F0C7	 ;  always call	this
ROM:EC03		 ldaa	 tmr_4ms	 ; 4.096ms timer
ROM:EC05		 cmpa	 FRCH		 ; byte_8E - FRCH
ROM:EC07		 bpl	 Main_Loop	 ; loop	back if	A<FRCH
ROM:EC09
ROM:EC09 calc_Tick_4ms:
ROM:EC09		 ldaa	 FRCH
ROM:EC0B		 adda	 #$10
ROM:EC0D		 staa	 tmr_4ms	 ; tmr_4ms = FRC+4096
ROM:EC0F		 inc	 count_4ms	 ; increments every 4ms
ROM:EC12		 sei
ROM:EC13		 ldaa	 count_4ms_B
ROM:EC15		 inca
ROM:EC16		 beq	 loc_EC3C
ROM:EC18		 staa	 count_4ms_B
ROM:EC1A		 ldx	 #$E02E
ROM:EC1D		 ldab	 byte_A7
ROM:EC1F		 bmi	 loc_EC22
ROM:EC21		 inx
ROM:EC22
ROM:EC22 loc_EC22:				 ; CODE	XREF: Main_Loop+1Fj
ROM:EC22		 cmpa	 0,x
ROM:EC24		 bcc	 loc_EC3C
ROM:EC26		 cli
ROM:EC27		 ldx	 #$E000
ROM:EC2A		 ldaa	 byte_A7
ROM:EC2C		 bmi	 loc_EC30
ROM:EC2E		 inx
ROM:EC2F		 inx
ROM:EC30
ROM:EC30 loc_EC30:				 ; CODE	XREF: Main_Loop+2Cj
ROM:EC30		 ldx	 0,x
ROM:EC32		 cpx	 byte_86
ROM:EC34		 bcc	 loc_EC5D
ROM:EC36		 ldab	 status_A0
ROM:EC38		 andb	 #$BF ;	'¿'
ROM:EC3A		 bra	 loc_EC5B
ROM:EC3C ; ---------------------------------------------------------------------------
ROM:EC3C
ROM:EC3C loc_EC3C:				 ; CODE	XREF: Main_Loop+16j
ROM:EC3C					 ; Main_Loop+24j
ROM:EC3C		 ldaa	 #$10
ROM:EC3E		 staa	 byte_84	 ; byte_84 = 16
ROM:EC40		 ldaa	 status_A3
ROM:EC42		 bmi	 loc_EC4A
ROM:EC44		 ldaa	 status_A0
ROM:EC46		 bita	 #$40 ;	'@'
ROM:EC48		 bne	 loc_EC5D
ROM:EC4A
ROM:EC4A loc_EC4A:				 ; CODE	XREF: Main_Loop+42j
ROM:EC4A		 clra
ROM:EC4B		 clrb
ROM:EC4C		 std	 byte_86	 ; clear byte_86
ROM:EC4E		 staa	 count_A1
ROM:EC50		 ldaa	 status_A3
ROM:EC52		 anda	 #7
ROM:EC54		 staa	 status_A3
ROM:EC56		 cli
ROM:EC57		 ldab	 status_A0
ROM:EC59		 orab	 #$40 ;	'@'
ROM:EC5B
ROM:EC5B loc_EC5B:				 ; CODE	XREF: Main_Loop+3Aj
ROM:EC5B		 stab	 status_A0
ROM:EC5D
ROM:EC5D loc_EC5D:				 ; CODE	XREF: Main_Loop+34j
ROM:EC5D					 ; Main_Loop+48j
ROM:EC5D		 ldaa	 byte_A6
ROM:EC5F		 bita	 #1
ROM:EC61		 bne	 loc_EC69
ROM:EC63		 anda	 #$C
ROM:EC65		 cmpa	 #$C
ROM:EC67		 bne	 loc_EC76
ROM:EC69
ROM:EC69 loc_EC69:				 ; CODE	XREF: Main_Loop+61j
ROM:EC69		 sei
ROM:EC6A		 ldaa	 PORT1
ROM:EC6C		 oraa	 #$C
ROM:EC6E		 staa	 PORT1		 ;  turn on LED3 and LED2
ROM:EC70		 clra
ROM:EC71		 clrb
ROM:EC72		 std	 byte_86	 ; clear byte_86
ROM:EC74		 staa	 byte_AD	 ; clear byte_AD
ROM:EC76
ROM:EC76 loc_EC76:				 ; CODE	XREF: Main_Loop+67j
ROM:EC76		 sei
ROM:EC77		 ldaa	 PORT2
ROM:EC79		 eora	 #$10
ROM:EC7B		 staa	 PORT2		 ; toggle watchdog reset
ROM:EC7D		 cli
ROM:EC7E		 ldab	 #4
ROM:EC80		 ldx	 #$EFC3
ROM:EC83
ROM:EC83 loc_EC83:				 ; CODE	XREF: Main_Loop+8Cj
ROM:EC83		 abx
ROM:EC84		 ldaa	 0,x
ROM:EC86		 beq	 loc_EC92
ROM:EC88		 anda	 count_4ms	 ; increments every 4ms
ROM:EC8A		 cmpa	 1,x
ROM:EC8C		 bne	 loc_EC83
ROM:EC8E		 ldx	 2,x
ROM:EC90		 jsr	 0,x
ROM:EC92
ROM:EC92 loc_EC92:				 ; CODE	XREF: Main_Loop+86j
ROM:EC92		 jmp	 Main_Loop
ROM:EC92 ; End of function Main_Loop
ROM:EC92
ROM:EC92 ; ---------------------------------------------------------------------------
ROM:EC95		 fcb $3F ; ?
ROM:EC96		 fcb $3F ; ?
ROM:EC97		 fcb $3F ; ?
ROM:EC98		 fcb $3F ; ?
ROM:EC99		 fcb $3F ; ?
ROM:EC9A		 fcb $3F ; ?
ROM:EC9B		 fcb $3F ; ?
ROM:EC9C		 fcb $3F ; ?
ROM:EC9D		 fcb $3F ; ?
ROM:EC9E		 fcb $3F ; ?
ROM:EC9F		 fcb $3F ; ?
ROM:ECA0		 fcb $3F ; ?
ROM:ECA1		 fcb $3F ; ?
ROM:ECA2		 fcb $3F ; ?
ROM:ECA3		 fcb $3F ; ?
ROM:ECA4		 fcb $3F ; ?
ROM:ECA5		 fcb $3F ; ?
ROM:ECA6		 fcb $3F ; ?
ROM:ECA7		 fcb $3F ; ?
ROM:ECA8		 fcb $3F ; ?
ROM:ECA9		 fcb $3F ; ?
ROM:ECAA		 fcb $3F ; ?
ROM:ECAB		 fcb $3F ; ?
ROM:ECAC		 fcb $3F ; ?
ROM:ECAD		 fcb $3F ; ?
ROM:ECAE		 fcb $3F ; ?
ROM:ECAF		 fcb $3F ; ?
ROM:ECB0		 fcb $3F ; ?
ROM:ECB1		 fcb $3F ; ?
ROM:ECB2		 fcb $3F ; ?
ROM:ECB3		 fcb $3F ; ?
ROM:ECB4		 fcb $3F ; ?
ROM:ECB5		 fcb $3F ; ?
ROM:ECB6		 fcb $3F ; ?
ROM:ECB7		 fcb $3F ; ?
ROM:ECB8		 fcb $3F ; ?
ROM:ECB9		 fcb $3F ; ?
ROM:ECBA		 fcb $3F ; ?
ROM:ECBB		 fcb $3F ; ?
ROM:ECBC		 fcb $3F ; ?
ROM:ECBD		 fcb $3F ; ?
ROM:ECBE		 fcb $3F ; ?
ROM:ECBF		 fcb $3F ; ?
ROM:ECC0		 fcb $3F ; ?
ROM:ECC1		 fcb $3F ; ?
ROM:ECC2		 fcb $3F ; ?
ROM:ECC3		 fcb $3F ; ?
ROM:ECC4		 fcb $3F ; ?
ROM:ECC5		 fcb $3F ; ?
ROM:ECC6		 fcb $3F ; ?
ROM:ECC7		 fcb $3F ; ?
ROM:ECC8		 fcb $3F ; ?
ROM:ECC9		 fcb $3F ; ?
ROM:ECCA		 fcb $3F ; ?
ROM:ECCB		 fcb $3F ; ?
ROM:ECCC		 fcb $3F ; ?
ROM:ECCD		 fcb $3F ; ?
ROM:ECCE		 fcb $3F ; ?
ROM:ECCF		 fcb $3F ; ?
ROM:ECD0		 fcb $3F ; ?
ROM:ECD1		 fcb $3F ; ?
ROM:ECD2		 fcb $3F ; ?
ROM:ECD3		 fcb $3F ; ?
ROM:ECD4		 fcb $3F ; ?
ROM:ECD5		 fcb $3F ; ?
ROM:ECD6		 fcb $3F ; ?
ROM:ECD7		 fcb $3F ; ?
ROM:ECD8		 fcb $3F ; ?
ROM:ECD9		 fcb $3F ; ?
ROM:ECDA		 fcb $3F ; ?
ROM:ECDB		 fcb $3F ; ?
ROM:ECDC		 fcb $3F ; ?
ROM:ECDD		 fcb $3F ; ?
ROM:ECDE		 fcb $3F ; ?
ROM:ECDF		 fcb $3F ; ?
ROM:ECE0		 fcb $3F ; ?
ROM:ECE1		 fcb $3F ; ?
ROM:ECE2		 fcb $3F ; ?
ROM:ECE3		 fcb $3F ; ?
ROM:ECE4		 fcb $3F ; ?
ROM:ECE5		 fcb $3F ; ?
ROM:ECE6		 fcb $3F ; ?
ROM:ECE7		 fcb $3F ; ?
ROM:ECE8		 fcb $3F ; ?
ROM:ECE9		 fcb $3F ; ?
ROM:ECEA		 fcb $3F ; ?
ROM:ECEB		 fcb $3F ; ?
ROM:ECEC		 fcb $3F ; ?
ROM:ECED		 fcb $3F ; ?
ROM:ECEE		 fcb $3F ; ?
ROM:ECEF		 fcb $3F ; ?
ROM:ECF0		 fcb $3F ; ?
ROM:ECF1		 fcb $3F ; ?
ROM:ECF2		 fcb $3F ; ?
ROM:ECF3		 fcb $3F ; ?
ROM:ECF4		 fcb $3F ; ?
ROM:ECF5		 fcb $3F ; ?
ROM:ECF6		 fcb $3F ; ?
ROM:ECF7		 fcb $3F ; ?
ROM:ECF8		 fcb $3F ; ?
ROM:ECF9		 fcb $3F ; ?
ROM:ECFA		 fcb $3F ; ?
ROM:ECFB		 fcb $3F ; ?
ROM:ECFC		 fcb $3F ; ?
ROM:ECFD		 fcb $3F ; ?
ROM:ECFE		 fcb $3F ; ?
ROM:ECFF		 fcb $3F ; ?
ROM:ED00 ; ---------------------------------------------------------------------------
ROM:ED00
ROM:ED00 locret_ED00:				 ; CODE	XREF: ROM:ED03j
ROM:ED00					 ; ROM:ED09j
ROM:ED00		 rts
ROM:ED01 ; ---------------------------------------------------------------------------
ROM:ED01
ROM:ED01 loc_ED01:				 ; CODE	XREF: sub_EEA6+19P
ROM:ED01					 ; sub_F3C2+5FP ...
ROM:ED01		 ldd	 0,x
ROM:ED03		 beq	 locret_ED00
ROM:ED05		 ldaa	 byte_A4
ROM:ED07		 bita	 #$C0 ;	'À'
ROM:ED09		 bne	 locret_ED00
ROM:ED0B		 sei
ROM:ED0C		 ldaa	 PORT1
ROM:ED0E		 bita	 #4
ROM:ED10		 beq	 loc_ED55
ROM:ED12		 ldd	 FRCH
ROM:ED14		 addd	 0,x
ROM:ED16		 std	 byte_4E
ROM:ED18		 ldaa	 PORT1
ROM:ED1A		 anda	 #$FB ;	'û'
ROM:ED1C		 staa	 PORT1		 ; clear P12
ROM:ED1E		 pshx
ROM:ED1F		 ldx	 #$48 ;	'H'
ROM:ED22		 jsr	 sub_F463
ROM:ED25		 pulx
ROM:ED26		 ldaa	 byte_9E
ROM:ED28		 bita	 #3
ROM:ED2A		 beq	 loc_ED3B
ROM:ED2C		 ldd	 OCR1H
ROM:ED2E		 subd	 FRCH		 ; OCR1H - FRCH
ROM:ED30		 bmi	 loc_ED3B	 ; has the time	passed?
ROM:ED32		 ldd	 OCR1H
ROM:ED34		 subd	 word_EE00	 ; OCR1H - 336us
ROM:ED37		 subd	 FRCH		 ; OCR1H-336us - FRCH
ROM:ED39		 bmi	 loc_ED73
ROM:ED3B
ROM:ED3B loc_ED3B:				 ; CODE	XREF: ROM:ED2Aj
ROM:ED3B					 ; ROM:ED30j
ROM:ED3B		 ldab	 TCSR1
ROM:ED3D		 ldaa	 PORT2
ROM:ED3F		 bita	 #2
ROM:ED41		 bne	 loc_ED45+1
ROM:ED43		 andb	 #$FE ;	'þ'      ; clear ICF1
ROM:ED45
ROM:ED45 loc_ED45:				 ; CODE	XREF: ROM:ED41j
ROM:ED45		 cpx	 #$CA01
ROM:ED48		 orab	 #8		 ; set IC1 En
ROM:ED4A		 stab	 TCSR1
ROM:ED4C		 ldd	 #$14
ROM:ED4F		 addd	 FRCH
ROM:ED51		 std	 OCR1H		 ;  20us timer
ROM:ED53		 bra	 loc_ED73
ROM:ED55 ; ---------------------------------------------------------------------------
ROM:ED55
ROM:ED55 loc_ED55:				 ; CODE	XREF: ROM:ED10j
ROM:ED55		 ldd	 FRCH
ROM:ED57		 addd	 0,x
ROM:ED59		 std	 byte_AF	 ; temporary register (Heap)?
ROM:ED5B		 subd	 byte_4E
ROM:ED5D		 bmi	 loc_ED73
ROM:ED5F		 std	 byte_B1
ROM:ED61		 ldd	 byte_AF	 ; temporary register (Heap)?
ROM:ED63		 std	 byte_4E
ROM:ED65		 ldd	 dCAS_Count	 ; CAS_Count goes up as	RPM goes down
ROM:ED67		 bmi	 loc_ED73	 ; bra if RPM increasing
ROM:ED69
ROM:ED69 RPMdecreasing:
ROM:ED69		 subd	 byte_B1
ROM:ED6B		 bpl	 loc_ED73
ROM:ED6D		 ldaa	 byte_9F
ROM:ED6F		 anda	 #$EF ;	'ï'
ROM:ED71		 staa	 byte_9F
ROM:ED73
ROM:ED73 loc_ED73:				 ; CODE	XREF: ROM:ED39j
ROM:ED73					 ; ROM:ED53j ...
ROM:ED73		 ldaa	 PORT1
ROM:ED75		 bita	 #8
ROM:ED77		 beq	 loc_EDBA
ROM:ED79		 ldd	 FRCH
ROM:ED7B		 addd	 0,x
ROM:ED7D		 std	 byte_46
ROM:ED7F		 ldaa	 PORT1
ROM:ED81		 anda	 #$F7 ;	'÷'
ROM:ED83		 staa	 PORT1		 ; clear P13
ROM:ED85		 ldx	 #$40 ;	'@'
ROM:ED88		 jsr	 sub_F463
ROM:ED8B		 ldaa	 byte_9E
ROM:ED8D		 bita	 #$C
ROM:ED8F		 beq	 loc_EDA0
ROM:ED91		 ldd	 OCR2H
ROM:ED93		 subd	 FRCH
ROM:ED95		 bmi	 loc_EDA0
ROM:ED97		 ldd	 OCR2H
ROM:ED99		 subd	 word_EE00
ROM:ED9C		 subd	 FRCH
ROM:ED9E		 bmi	 loc_EDD8
ROM:EDA0
ROM:EDA0 loc_EDA0:				 ; CODE	XREF: ROM:ED8Fj
ROM:EDA0					 ; ROM:ED95j
ROM:EDA0		 ldab	 TCSR2
ROM:EDA2		 ldaa	 PORT1
ROM:EDA4		 bita	 #2
ROM:EDA6		 bne	 loc_EDAA+1
ROM:EDA8		 andb	 #$FE ;	'þ'
ROM:EDAA
ROM:EDAA loc_EDAA:				 ; CODE	XREF: ROM:EDA6j
ROM:EDAA		 cpx	 #$CA01
ROM:EDAD		 orab	 #8
ROM:EDAF		 stab	 TCSR2
ROM:EDB1		 ldd	 #$14		 ;  5.12ms
ROM:EDB4		 addd	 FRCH
ROM:EDB6		 std	 OCR2H
ROM:EDB8		 bra	 loc_EDD8
ROM:EDBA ; ---------------------------------------------------------------------------
ROM:EDBA
ROM:EDBA loc_EDBA:				 ; CODE	XREF: ROM:ED77j
ROM:EDBA		 ldd	 FRCH
ROM:EDBC		 addd	 0,x
ROM:EDBE		 std	 byte_AF	 ; temporary register (Heap)?
ROM:EDC0		 subd	 byte_46
ROM:EDC2		 bmi	 loc_EDD8
ROM:EDC4		 std	 byte_B1
ROM:EDC6		 ldd	 byte_AF	 ; temporary register (Heap)?
ROM:EDC8		 std	 byte_46
ROM:EDCA		 ldd	 dCAS_Count
ROM:EDCC		 bmi	 loc_EDD8
ROM:EDCE		 subd	 byte_B1
ROM:EDD0		 bpl	 loc_EDD8
ROM:EDD2		 ldaa	 byte_9F
ROM:EDD4		 anda	 #$BF ;	'¿'
ROM:EDD6		 staa	 byte_9F
ROM:EDD8
ROM:EDD8 loc_EDD8:				 ; CODE	XREF: ROM:ED9Ej
ROM:EDD8					 ; ROM:EDB8j ...
ROM:EDD8		 cli
ROM:EDD9		 rts
ROM:EDD9 ; ---------------------------------------------------------------------------
ROM:EDDA		 fcb $3F ; ?
ROM:EDDB		 fcb $3F ; ?
ROM:EDDC		 fcb $3F ; ?
ROM:EDDD		 fcb $3F ; ?
ROM:EDDE		 fcb $3F ; ?
ROM:EDDF		 fcb $3F ; ?
ROM:EDE0		 fcb $3F ; ?
ROM:EDE1		 fcb $3F ; ?
ROM:EDE2		 fcb $3F ; ?
ROM:EDE3		 fcb $3F ; ?
ROM:EDE4		 fcb $3F ; ?
ROM:EDE5		 fcb $3F ; ?
ROM:EDE6		 fcb $3F ; ?
ROM:EDE7		 fcb $3F ; ?
ROM:EDE8		 fcb $3F ; ?
ROM:EDE9		 fcb $3F ; ?
ROM:EDEA		 fcb $3F ; ?
ROM:EDEB		 fcb $3F ; ?
ROM:EDEC		 fcb $3F ; ?
ROM:EDED		 fcb $3F ; ?
ROM:EDEE		 fcb $3F ; ?
ROM:EDEF		 fcb $3F ; ?
ROM:EDF0		 fcb $3F ; ?
ROM:EDF1		 fcb $3F ; ?
ROM:EDF2		 fcb $3F ; ?
ROM:EDF3		 fcb $3F ; ?
ROM:EDF4		 fcb $3F ; ?
ROM:EDF5		 fcb $3F ; ?
ROM:EDF6		 fcb $3F ; ?
ROM:EDF7		 fcb $3F ; ?
ROM:EDF8		 fcb $3F ; ?
ROM:EDF9		 fcb $3F ; ?
ROM:EDFA		 fcb $3F ; ?
ROM:EDFB		 fcb $3F ; ?
ROM:EDFC		 fcb $3F ; ?
ROM:EDFD		 fcb $3F ; ?
ROM:EDFE		 fcb $3F ; ?
ROM:EDFF		 fcb $3F ; ?
ROM:EE00 word_EE00:	 fdb $150		 ; DATA	XREF: ROM:ED34r
ROM:EE00					 ; ROM:ED99r ...
ROM:EE02 word_EE02:	 fdb $4F8		 ; DATA	XREF: sub_FB95+19r
ROM:EE02					 ; sub_FBF8+1Cr
ROM:EE04 word_EE04:	 fdb $150		 ; DATA	XREF: sub_FD78+2r
ROM:EE06 word_EE06:	 fdb $518		 ; DATA	XREF: JT3_0+49r
ROM:EE06					 ; JT3_0:loc_F976r
ROM:EE08		 fcb $3F ; ?
ROM:EE09		 fcb $3F ; ?
ROM:EE0A		 fcb $3F ; ?
ROM:EE0B		 fcb $3F ; ?
ROM:EE0C		 fcb $3F ; ?
ROM:EE0D		 fcb $3F ; ?
ROM:EE0E		 fcb $3F ; ?
ROM:EE0F		 fcb $3F ; ?
ROM:EE10		 fcb $AB ; «
ROM:EE11		 fcb $7B ; {
ROM:EE12		 fcb $3F ; ?
ROM:EE13		 fcb $3F ; ?
ROM:EE14		 fcb $3F ; ?
ROM:EE15		 fcb $3F ; ?
ROM:EE16		 fcb $3F ; ?
ROM:EE17		 fcb $3F ; ?
ROM:EE18		 fcb $3F ; ?
ROM:EE19		 fcb $3F ; ?
ROM:EE1A		 fcb $3F ; ?
ROM:EE1B		 fcb $3F ; ?
ROM:EE1C		 fcb $3F ; ?
ROM:EE1D		 fcb $3F ; ?
ROM:EE1E		 fcb $3F ; ?
ROM:EE1F		 fcb $3F ; ?
ROM:EE20		 fcb $3F ; ?
ROM:EE21		 fcb $3F ; ?
ROM:EE22		 fcb $3F ; ?
ROM:EE23		 fcb $3F ; ?
ROM:EE24		 fcb $3F ; ?
ROM:EE25		 fcb $3F ; ?
ROM:EE26		 fcb $3F ; ?
ROM:EE27		 fcb $3F ; ?
ROM:EE28		 fcb $3F ; ?
ROM:EE29		 fcb $3F ; ?
ROM:EE2A		 fcb $3F ; ?
ROM:EE2B		 fcb $3F ; ?
ROM:EE2C		 fcb $3F ; ?
ROM:EE2D		 fcb $3F ; ?
ROM:EE2E		 fcb $3F ; ?
ROM:EE2F		 fcb $3F ; ?
ROM:EE30		 fcb $3F ; ?
ROM:EE31		 fcb $3F ; ?
ROM:EE32		 fcb $3F ; ?
ROM:EE33		 fcb $3F ; ?
ROM:EE34		 fcb $3F ; ?
ROM:EE35		 fcb $3F ; ?
ROM:EE36		 fcb $3F ; ?
ROM:EE37		 fcb $3F ; ?
ROM:EE38		 fcb $3F ; ?
ROM:EE39		 fcb $3F ; ?
ROM:EE3A		 fcb $3F ; ?
ROM:EE3B		 fcb $3F ; ?
ROM:EE3C		 fcb $3F ; ?
ROM:EE3D		 fcb $3F ; ?
ROM:EE3E		 fcb $3F ; ?
ROM:EE3F		 fcb $3F ; ?
ROM:EE40 ; ---------------------------------------------------------------------------
ROM:EE40 loc_EE40:
ROM:EE40  call with:
ROM:EE40    X =	table base address + offfset
ROM:EE40    top	of stack = return address
ROM:EE40    stack+1 = ADC value
ROM:EE40
ROM:EE40 ; START OF FUNCTION CHUNK FOR limits_F5F1
ROM:EE40
ROM:EE40 loc_EE40:				 ; CODE	XREF: limits_F5F1:loc_F62DJ
ROM:EE40		 ldaa	 2,x
ROM:EE42		 stx	 byte_AF	 ; temporary register (Heap)?
ROM:EE44		 ldab	 3,x
ROM:EE46		 stab	 byte_B1
ROM:EE48		 pulx
ROM:EE49		 ldab	 0,x
ROM:EE4B		 incb
ROM:EE4C		 cmpb	 byte_B1
ROM:EE4E		 bcc	 loc_EE54
ROM:EE50		 stab	 0,x
ROM:EE52		 pulb
ROM:EE53		 rts
ROM:EE54 ; ---------------------------------------------------------------------------
ROM:EE54
ROM:EE54 loc_EE54:				 ; CODE	XREF: limits_F5F1-7A3j
ROM:EE54		 ldx	 #$E780
ROM:EE57		 pulb
ROM:EE58		 abx
ROM:EE59		 abx
ROM:EE5A		 ldab	 0,x
ROM:EE5C		 sei
ROM:EE5D		 orab	 byte_A4
ROM:EE5F		 stab	 byte_A4
ROM:EE61		 cli
ROM:EE62		 rts
ROM:EE62 ; END OF FUNCTION CHUNK FOR limits_F5F1
ROM:EE63 ; ---------------------------------------------------------------------------
ROM:EE63 ; START OF FUNCTION CHUNK FOR doTick_524ms
ROM:EE63
ROM:EE63 loc_EE63:				 ; CODE	XREF: doTick_524ms+7J
ROM:EE63					 ; DATA	XREF: doTick_524msr
ROM:EE63		 ldd	 #1
ROM:EE66		 std	 byte_AF	 ; temporary register (Heap)?
ROM:EE68		 ldaa	 #$80 ;	'€'
ROM:EE6A		 staa	 PIA_Result
ROM:EE6D		 ldaa	 #$2C ;	','
ROM:EE6F
ROM:EE6F loc_EE6F:				 ; CODE	XREF: doTick_524ms-75Dj
ROM:EE6F		 staa	 byte_B1
ROM:EE71		 ldab	 byte_B0
ROM:EE73		 jsr	 PIA_F485	 ; PIA_F484:
ROM:EE73					 ; Called with 27, 2A, 2B or 2C
ROM:EE73					 ; returns a value in A
ROM:EE76		 beq	 loc_EE7C
ROM:EE78		 orab	 byte_AF	 ; temporary register (Heap)?
ROM:EE7A		 bra	 loc_EE7F
ROM:EE7C ; ---------------------------------------------------------------------------
ROM:EE7C
ROM:EE7C loc_EE7C:				 ; CODE	XREF: doTick_524ms-770j
ROM:EE7C		 comb
ROM:EE7D		 andb	 byte_AF	 ; temporary register (Heap)?
ROM:EE7F
ROM:EE7F loc_EE7F:				 ; CODE	XREF: doTick_524ms-76Cj
ROM:EE7F		 stab	 byte_AF	 ; temporary register (Heap)?
ROM:EE81		 asl	 byte_B0
ROM:EE84		 ldaa	 byte_B1
ROM:EE86		 inca
ROM:EE87		 cmpa	 #$2F ;	'/'
ROM:EE89		 bls	 loc_EE6F
ROM:EE8B		 ldab	 byte_AF	 ; temporary register (Heap)?
ROM:EE8D		 andb	 #$F
ROM:EE8F		 stab	 byte_7A
ROM:EE91		 andb	 #7
ROM:EE93		 ldaa	 byte_E011	 ; =10h
ROM:EE96		 mul
ROM:EE97		 std	 byte_5C
ROM:EE99		 ldaa	 byte_7A
ROM:EE9B		 bita	 #8
ROM:EE9D		 beq	 locret_EEA5
ROM:EE9F		 clra
ROM:EEA0		 clrb
ROM:EEA1		 subd	 byte_5C
ROM:EEA3		 std	 byte_5C
ROM:EEA5
ROM:EEA5 locret_EEA5:				 ; CODE	XREF: doTick_524ms-749j
ROM:EEA5		 rts
ROM:EEA5 ; END OF FUNCTION CHUNK FOR doTick_524ms
ROM:EEA6
ROM:EEA6 ; =============== S U B R O U T I N E =======================================
ROM:EEA6
ROM:EEA6
ROM:EEA6 sub_EEA6:				 ; CODE	XREF: doTick_65ms+7P
ROM:EEA6					 ; DATA	XREF: doTick_65msr
ROM:EEA6		 ldaa	 #$80 ;	'€'
ROM:EEA8		 staa	 PIA_Result
ROM:EEAB		 ldaa	 #$2A ;	'*'
ROM:EEAD		 jsr	 PIA_F485	 ; PIA_F484:
ROM:EEAD					 ; Called with 27, 2A, 2B or 2C
ROM:EEAD					 ; returns a value in A
ROM:EEB0		 bne	 loc_EEC8
ROM:EEB2		 ldab	 byte_A7
ROM:EEB4		 bmi	 loc_EEC2
ROM:EEB6		 addb	 #$40 ;	'@'
ROM:EEB8		 stab	 byte_A7
ROM:EEBA		 bpl	 loc_EECE
ROM:EEBC		 ldx	 #$E013
ROM:EEBF		 jsr	 loc_ED01
ROM:EEC2
ROM:EEC2 loc_EEC2:				 ; CODE	XREF: sub_EEA6+Ej
ROM:EEC2		 ldd	 CTS_C0
ROM:EEC4		 std	 CTS_60		 ; a copy of CTS_C0 or CTS_BE
ROM:EEC6		 bra	 loc_EECE
ROM:EEC8 ; ---------------------------------------------------------------------------
ROM:EEC8
ROM:EEC8 loc_EEC8:				 ; CODE	XREF: sub_EEA6+Aj
ROM:EEC8		 ldab	 byte_A7
ROM:EECA		 andb	 #$7F ;	''
ROM:EECC		 stab	 byte_A7
ROM:EECE
ROM:EECE loc_EECE:				 ; CODE	XREF: sub_EEA6+14j
ROM:EECE					 ; sub_EEA6+20j
ROM:EECE		 ldaa	 #$80 ;	'€'
ROM:EED0		 staa	 PIA_Result
ROM:EED3		 ldaa	 #$27 ;	'''
ROM:EED5		 jsr	 PIA_F485	 ; PIA_F484:
ROM:EED5					 ; Called with 27, 2A, 2B or 2C
ROM:EED5					 ; returns a value in A
ROM:EED8		 beq	 loc_EEDD
ROM:EEDA		 clra
ROM:EEDB		 staa	 byte_A9
ROM:EEDD
ROM:EEDD loc_EEDD:				 ; CODE	XREF: sub_EEA6+32j
ROM:EEDD		 ldaa	 count_4ms_B
ROM:EEDF		 cmpa	 #$13
ROM:EEE1		 bcs	 loc_EEF9
ROM:EEE3		 ldaa	 byte_AE
ROM:EEE5		 cmpa	 #$F
ROM:EEE7		 bcc	 locret_EEF8
ROM:EEE9		 inca
ROM:EEEA		 staa	 byte_AE
ROM:EEEC		 cmpa	 #$F
ROM:EEEE		 bne	 locret_EEF8
ROM:EEF0		 sei
ROM:EEF1		 jsr	 loc_FA7D
ROM:EEF4		 jsr	 loc_FAA2
ROM:EEF7		 cli
ROM:EEF8
ROM:EEF8 locret_EEF8:				 ; CODE	XREF: sub_EEA6+41j
ROM:EEF8					 ; sub_EEA6+48j
ROM:EEF8		 rts
ROM:EEF9 ; ---------------------------------------------------------------------------
ROM:EEF9
ROM:EEF9 loc_EEF9:				 ; CODE	XREF: sub_EEA6+3Bj
ROM:EEF9		 clra
ROM:EEFA		 staa	 byte_AE
ROM:EEFC		 rts
ROM:EEFC ; End of function sub_EEA6
ROM:EEFC
ROM:EEFD ; ---------------------------------------------------------------------------
ROM:EEFD
ROM:EEFD INIT:					 ; CODE	XREF: ROM:F00FJ
ROM:EEFD					 ; DATA	XREF: ROM:F008r
ROM:EEFD		 sei			 ; disable interrupts
ROM:EEFE initialise ports
ROM:EEFE		 ldx	 #$FC08		 ; LEDs	on, ??
ROM:EF01		 stx	 PORT1		 ; PORT1 = FC
ROM:EF01					 ; PORT2 = 08 (WDogReset=1)
ROM:EF03		 ldx	 #$FE1E
ROM:EF06		 stx	 P1DDR		 ; P1DDR = FE
ROM:EF06					 ; P2DDR = 1E
ROM:EF08		 clra
ROM:EF09		 staa	 PORT2		 ; clear PORT2 all
ROM:EF0B initialise timers
ROM:EF0B		 ldd	 #$1B1B
ROM:EF0E		 staa	 TCSR1		 ; set EICI, EOCI, IEDG, OLVL
ROM:EF10		 stab	 TCSR2		 ; set EICI, EOCI, IEDG, OLVL
ROM:EF12		 ldd	 #$1E		 ; =30us?
ROM:EF15		 addd	 FRCH		 ; set up a pulse 1E00h	long
ROM:EF17		 std	 OCR1H		 ;  set	up a pulse 30us	long
ROM:EF19		 std	 OCR2H		 ;  set	up a pulse 30us	long
ROM:EF1B		 ldaa	 TCSR1		 ; clear any timer1 interrupt flags
ROM:EF1D		 ldd	 ICR1H		 ; clear any timer1 interrupts part2
ROM:EF1F		 ldaa	 TCSR2		 ; clear any timer2 interrupt flags
ROM:EF21		 ldd	 ICR2H		 ; clear any timer2 interrupts part2
ROM:EF23 Initialise and	test RAM from FF down
ROM:EF23		 ldx	 #$BF ;	'¿'      ; test the length of RAM??
ROM:EF26		 ldd	 #$FF00
ROM:EF29
ROM:EF29 testRAM:				 ; CODE	XREF: ROM:EF38j
ROM:EF29		 staa	 $40,x		 ; test	for stuck at 1
ROM:EF2B		 ldaa	 $40,x
ROM:EF2D		 cmpa	 #$FF
ROM:EF2F
ROM:EF2F loc_EF2F:				 ; CODE	XREF: ROM:loc_EF2Fj
ROM:EF2F		 bne	 loc_EF2F	 ; if RAM failed loop forever
ROM:EF31		 stab	 $40,x		 ; test	for stuck at 0
ROM:EF33		 ldab	 $40,x
ROM:EF35
ROM:EF35 loc_EF35:				 ; CODE	XREF: ROM:loc_EF35j
ROM:EF35		 bne	 loc_EF35	 ; if RAM failed loop forever
ROM:EF37		 dex
ROM:EF38		 bne	 testRAM	 ; test	for stuck at 1
ROM:EF3A initialise some more RAM variables
ROM:EF3A		 ldd	 #$CCFF
ROM:EF3D		 std	 byte_44
ROM:EF3F		 ldd	 #$33FF
ROM:EF42		 std	 byte_4C
ROM:EF44		 ldd	 #$2F10
ROM:EF47		 staa	 count_91	 ; count_91=2Fh
ROM:EF49		 stab	 byte_84	 ;  byte_84=10h=16
ROM:EF4B initialise ADC
ROM:EF4B		 ldd	 #$80 ;	'€'
ROM:EF4E		 staa	 PIA_Base	 ; start a conversion channel 0?
ROM:EF51		 stab	 PIA_Result	 ; write to the	result register?
ROM:EF54 initialise some more RAM
ROM:EF54		 stab	 byte_A5
ROM:EF56		 stab	 byte_AA
ROM:EF58 toggle	the watchdog reset line
ROM:EF58		 ldaa	 PORT2
ROM:EF5A		 eora	 #$10
ROM:EF5C		 staa	 PORT2		 ; toggle the watchdog
ROM:EF5E test for nIRQ code?
ROM:EF5E		 ldx	 #$E800
ROM:EF61		 ldd	 #0
ROM:EF64
ROM:EF64 loc_EF64:				 ; CODE	XREF: ROM:EF68j
ROM:EF64		 addd	 0,x
ROM:EF66		 inx
ROM:EF67		 inx
ROM:EF68		 bne	 loc_EF64
ROM:EF6A		 std	 byte_D2
ROM:EF6C
ROM:EF6C loc_EF6C:				 ; CODE	XREF: ROM:loc_EF6Cj
ROM:EF6C		 bne	 loc_EF6C	 ; loop	forever
ROM:EF6E toggle	watchdog
ROM:EF6E		 ldaa	 PORT2
ROM:EF70		 eora	 #$10
ROM:EF72		 staa	 PORT2		 ; toggle the watchdog
ROM:EF74 test for code at 8000h	- should always	skip this
ROM:EF74		 ldaa	 $8000		 ; this	needs checking!!
ROM:EF77		 cmpa	 #$5A ;	'Z'
ROM:EF79		 bne	 loc_EF7E
ROM:EF7B		 jsr	 $B000		 ; there is no code here (test code?)
ROM:EF7E
ROM:EF7E loc_EF7E:				 ; CODE	XREF: ROM:EF79j
ROM:EF7E		 ldab	 byte_A7
ROM:EF80		 ldaa	 #$2A ;	'*'
ROM:EF82		 jsr	 PIA_F485	 ; PIA_F484:
ROM:EF82					 ; Called with 27, 2A, 2B or 2C
ROM:EF82					 ; returns a value in A
ROM:EF85		 bne	 loc_EF89
ROM:EF87		 orab	 #$80 ;	'€'
ROM:EF89
ROM:EF89 loc_EF89:				 ; CODE	XREF: ROM:EF85j
ROM:EF89		 stab	 byte_A7
ROM:EF8B		 jsr	 get_TPS	 ; A:B = TPS:TPS
ROM:EF8E		 std	 byte_76	 ; TPS_T1:byte_77
ROM:EF90		 std	 byte_78	 ; byte_78:byte_79
ROM:EF92		 jsr	 doTick_262ms	 ; get_Temps:
ROM:EF92					 ; get the IAT and CTS readings
ROM:EF92					 ; called from jmp_table1
ROM:EF95		 jsr	 get_VBatt
ROM:EF98		 jsr	 get_BARO
ROM:EF9B		 ldd	 CTS_C0
ROM:EF9D		 std	 CTS_60		 ; a copy of CTS_C0 or CTS_BE
ROM:EF9F		 jsr	 Get_MAP	 ; get_MAP:
ROM:EF9F					 ; get MAP values from ADC, check against fault	limits
ROM:EF9F					 ; apply default values	if out of range
ROM:EF9F					 ;
ROM:EFA2		 ldd	 MAPL
ROM:EFA4		 std	 MAPL_Tn	 ; MAPL_Tn =
ROM:EFA6		 ldaa	 TCSR1		 ; clear flags?
ROM:EFA8		 ldd	 ICR1H
ROM:EFAA		 ldaa	 TCSR2
ROM:EFAC		 ldd	 ICR2H
ROM:EFAE		 ldaa	 PORT2
ROM:EFB0		 oraa	 #8
ROM:EFB2		 staa	 PORT2		 ; toggle P23 -	IRQ?
ROM:EFB4		 anda	 #$F7 ;	'÷'
ROM:EFB6		 staa	 PORT2		 ; toggle P23 -	IRQ?
ROM:EFB8		 ldaa	 #$27 ;	'''
ROM:EFBA		 jsr	 PIA_F485	 ; do something
ROM:EFBD		 bne	 X_EFC3		 ; if not zero jump
ROM:EFBF		 ldaa	 #$7F ;	''      ; else byte_A9 = 7F
ROM:EFC1		 staa	 byte_A9
ROM:EFC3
ROM:EFC3 X_EFC3:				 ; CODE	XREF: ROM:EFBDj
ROM:EFC3		 cli			 ; enable interrupts
ROM:EFC4		 jmp	 Main_Loop	 ; jump	to start of main loop
ROM:EFC4 ; ---------------------------------------------------------------------------
ROM:EFC7 JMP_TBL1:
ROM:EFC7  format:
ROM:EFC7    0,x	= bit mask
ROM:EFC7    1,x	= count
ROM:EFC7    2,x	= function address
ROM:EFC7
ROM:EFC7 JMP_TBL1:	 fcb   1
ROM:EFC8		 fcb   1
ROM:EFC9		 fdb $EA00		 ; 4.096ms tick
ROM:EFCB		 fcb   7
ROM:EFCC		 fcb   4
ROM:EFCD		 fdb $F2AC		 ; 16.384ms tick
ROM:EFCF		 fcb $1F
ROM:EFD0		 fcb $10
ROM:EFD1		 fdb $F47A		 ; 65.636ms tick
ROM:EFD3		 fcb $7F ; 
ROM:EFD4		 fcb $40 ; @
ROM:EFD5		 fdb $F1EC		 ; 262.14ms tick
ROM:EFD7		 fcb $FF
ROM:EFD8		 fcb $80 ; €
ROM:EFD9		 fdb $F5E6		 ; 524.288ms tick
ROM:EFDB		 fcb   0
ROM:EFDC ; ---------------------------------------------------------------------------
ROM:EFDC
ROM:EFDC JT1_done:				 ; CODE	XREF: sub_F0C7+7P
ROM:EFDC					 ; DATA	XREF: sub_F0C7r
ROM:EFDC		 nop			 ; code
ROM:EFDD		 rts
ROM:EFDD ; ---------------------------------------------------------------------------
ROM:EFDE
ROM:EFDE
ROM:EFDE		 fcb $3F ; ?
ROM:EFDF		 fcb $3F ; ?
ROM:EFE0		 fcb $3F ; ?
ROM:EFE1		 fcb $3F ; ?
ROM:EFE2		 fcb $3F ; ?
ROM:EFE3		 fcb $3F ; ?
ROM:EFE4		 fcb $3F ; ?
ROM:EFE5		 fcb $3F ; ?
ROM:EFE6		 fcb $3F ; ?
ROM:EFE7		 fcb $3F ; ?
ROM:EFE8		 fcb $3F ; ?
ROM:EFE9		 fcb $3F ; ?
ROM:EFEA		 fcb $3F ; ?
ROM:EFEB		 fcb $3F ; ?
ROM:EFEC		 fcb $3F ; ?
ROM:EFED		 fcb $3F ; ?
ROM:EFEE		 fcb $3F ; ?
ROM:EFEF		 fcb $3F ; ?
ROM:EFF0		 fcb $3F ; ?
ROM:EFF1		 fcb $3F ; ?
ROM:EFF2		 fcb $3F ; ?
ROM:EFF3		 fcb $3F ; ?
ROM:EFF4		 fcb $3F ; ?
ROM:EFF5		 fcb $3F ; ?
ROM:EFF6		 fcb $3F ; ?
ROM:EFF7		 fcb $3F ; ?
ROM:EFF8		 fcb $3F ; ?
ROM:EFF9		 fcb $3F ; ?
ROM:EFFA		 fcb $3F ; ?
ROM:EFFB		 fcb $3F ; ?
ROM:EFFC		 fcb $3F ; ?
ROM:EFFD		 fcb $3F ; ?
ROM:EFFE		 fcb $3F ; ?
ROM:EFFF		 fcb $3F ; ?
ROM:F000 ; ---------------------------------------------------------------------------
ROM:F000
ROM:F000 Reset:
ROM:F000		 sei
ROM:F001		 lds	 #$FF		 ; end of stack	= FFh
ROM:F004		 ldaa	 #$FF
ROM:F006		 staa	 P4DDR		 ; Port	4 are all outputs
ROM:F008		 ldaa	 INIT		 ; is there code present in 'otherchip'?
ROM:F00B		 cmpa	 #$F
ROM:F00D
ROM:F00D loc_F00D:				 ; CODE	XREF: ROM:loc_F00Dj
ROM:F00D		 bne	 loc_F00D	 ; no looop forever!!
ROM:F00F		 jmp	 INIT		 ; yes - execute the code
ROM:F012 ; ---------------------------------------------------------------------------
ROM:F012
ROM:F012 doTick_8ms?:				 ; CODE	XREF: ROM:F019j
ROM:F012					 ; ROM:F087j ...
ROM:F012		 jsr	 sub_F0C7
ROM:F015
ROM:F015 sch_tick_4ms:				 ; 4.096ms timer
ROM:F015		 ldaa	 tmr_4ms
ROM:F017		 cmpa	 FRCH
ROM:F019		 bpl	 doTick_8ms?
ROM:F01B		 ldaa	 FRCH
ROM:F01D		 adda	 #$10
ROM:F01F		 staa	 tmr_4ms	 ; 4.096ms timer
ROM:F021		 inc	 count_4ms	 ; increments every 4ms
ROM:F024		 sei
ROM:F025		 ldaa	 count_4ms_B
ROM:F027		 inca
ROM:F028		 beq	 loc_F041
ROM:F02A		 staa	 count_4ms_B
ROM:F02C		 bmi	 loc_F041
ROM:F02E		 cli
ROM:F02F		 ldx	 byte_86
ROM:F031		 cpx	 X_E000
ROM:F034		 bls	 loc_F058
ROM:F036		 cpx	 word_E002
ROM:F039		 bcs	 loc_F05E
ROM:F03B		 ldab	 status_A0
ROM:F03D		 andb	 #$BF ;	'¿'
ROM:F03F		 bra	 loc_F05C
ROM:F041 ; ---------------------------------------------------------------------------
ROM:F041
ROM:F041 loc_F041:				 ; CODE	XREF: ROM:F028j
ROM:F041					 ; ROM:F02Cj
ROM:F041		 ldaa	 status_A0
ROM:F043		 bita	 #$40 ;	'@'
ROM:F045		 bne	 loc_F05E
ROM:F047		 ldaa	 #$10
ROM:F049		 staa	 byte_84	 ; byte_84=10h=16
ROM:F04B		 clra
ROM:F04C		 clrb
ROM:F04D		 std	 byte_86	 ; clear byte_86
ROM:F04F		 staa	 count_A1
ROM:F051		 ldaa	 status_A3
ROM:F053		 anda	 #7
ROM:F055		 staa	 status_A3
ROM:F057		 cli
ROM:F058
ROM:F058 loc_F058:				 ; CODE	XREF: ROM:F034j
ROM:F058		 ldab	 status_A0
ROM:F05A		 orab	 #$40 ;	'@'
ROM:F05C
ROM:F05C loc_F05C:				 ; CODE	XREF: ROM:F03Fj
ROM:F05C		 stab	 status_A0
ROM:F05E
ROM:F05E loc_F05E:				 ; CODE	XREF: ROM:F039j
ROM:F05E					 ; ROM:F045j
ROM:F05E		 ldaa	 byte_A6
ROM:F060		 bita	 #1
ROM:F062		 bne	 loc_F06A
ROM:F064		 anda	 #$C
ROM:F066		 cmpa	 #$C
ROM:F068		 bne	 loc_F077
ROM:F06A
ROM:F06A loc_F06A:				 ; CODE	XREF: ROM:F062j
ROM:F06A		 sei
ROM:F06B		 ldaa	 PORT1
ROM:F06D		 oraa	 #$C
ROM:F06F		 staa	 PORT1		 ; turn	on LED3	and LED2
ROM:F071		 clra
ROM:F072		 clrb
ROM:F073		 std	 byte_86	 ; clear word_86
ROM:F075		 staa	 byte_AD	 ; clear byte_AD
ROM:F077
ROM:F077 loc_F077:				 ; CODE	XREF: ROM:F068j
ROM:F077		 sei
ROM:F078		 ldaa	 PORT2
ROM:F07A		 eora	 #$10
ROM:F07C		 staa	 PORT2		 ; toggle the watchdog
ROM:F07E		 cli
ROM:F07F		 ldab	 #4
ROM:F081		 ldx	 #$EFC3		 ; pointer to jump table at EFC7
ROM:F084
ROM:F084 loc_F084:				 ; CODE	XREF: ROM:F08Dj
ROM:F084		 abx			 ; search for a	match in the jump table
ROM:F085		 ldaa	 0,x		 ; EFC7	= 1
ROM:F087		 beq	 doTick_8ms?	 ; bra if 0 (don't use jump table)
ROM:F089		 anda	 count_4ms	 ; increments every 4ms
ROM:F08B		 cmpa	 1,x
ROM:F08D		 bne	 loc_F084	 ; search for a	match in the jump table
ROM:F08F
ROM:F08F code_F08F:				 ; get address of code
ROM:F08F		 ldx	 2,x
ROM:F091		 jsr	 0,x		 ; and call that code
ROM:F093		 jmp	 doTick_8ms?	 ; loop	back
ROM:F096 ; ---------------------------------------------------------------------------
ROM:F096 how do	we get here?
ROM:F096		 nop
ROM:F097		 nop
ROM:F098		 nop
ROM:F099		 jsr	 sub_FF86
ROM:F09C		 jsr	 sub_FFC6
ROM:F09F		 ldab	 sub_E7A0	 ; E7A0	= B6h
ROM:F0A2		 cmpb	 #$B6 ;	'¶'
ROM:F0A4		 bne	 loc_F0A9
ROM:F0A6		 jsr	 sub_E7A0	 ; always call
ROM:F0A9
ROM:F0A9 loc_F0A9:				 ; CODE	XREF: ROM:F0A4j
ROM:F0A9		 jsr	 Get_MAP	 ; get_MAP:
ROM:F0A9					 ; get MAP values from ADC, check against fault	limits
ROM:F0A9					 ; apply default values	if out of range
ROM:F0A9					 ;
ROM:F0AC		 jsr	 loc_F16E
ROM:F0AF		 jsr	 get_VBatt
ROM:F0B2		 jsr	 sub_F3C2
ROM:F0B5		 ldx	 #$52 ;	'R'
ROM:F0B8		 jsr	 sub_F12D
ROM:F0BB		 inx
ROM:F0BC		 inx
ROM:F0BD		 jsr	 sub_F12D
ROM:F0C0		 jsr	 loc_F548
ROM:F0C3		 jsr	 sub_F4E5
ROM:F0C6		 rts
ROM:F0C7
ROM:F0C7 ; =============== S U B R O U T I N E =======================================
ROM:F0C7
ROM:F0C7
ROM:F0C7 sub_F0C7:				 ; CODE	XREF: Main_LoopP
ROM:F0C7					 ; ROM:doTick_8ms?P
ROM:F0C7		 ldaa	 JT1_done
ROM:F0CA		 cmpa	 #1
ROM:F0CC		 bne	 loc_F0D1
ROM:F0CE		 jsr	 JT1_done
ROM:F0D1
ROM:F0D1 loc_F0D1:				 ; CODE	XREF: sub_F0C7+5j
ROM:F0D1		 sei
ROM:F0D2		 ldaa	 byte_A2
ROM:F0D4		 bita	 #2
ROM:F0D6		 beq	 loc_F0ED
ROM:F0D8		 anda	 #$FD ;	'ý'
ROM:F0DA		 staa	 byte_A2
ROM:F0DC		 cli
ROM:F0DD		 jsr	 sub_FEE7
ROM:F0E0		 jsr	 loc_F492
ROM:F0E3		 ldx	 byte_86
ROM:F0E5		 cpx	 #$380
ROM:F0E8		 bcc	 loc_F0ED
ROM:F0EA		 jsr	 loc_F5BA
ROM:F0ED
ROM:F0ED loc_F0ED:				 ; CODE	XREF: sub_F0C7+Fj
ROM:F0ED					 ; sub_F0C7+21j
ROM:F0ED		 cli
ROM:F0EE		 jsr	 sub_F630
ROM:F0F1		 rts
ROM:F0F1 ; End of function sub_F0C7
ROM:F0F1
ROM:F0F2
ROM:F0F2 ; =============== S U B R O U T I N E =======================================
ROM:F0F2
ROM:F0F2 ; get_MAP:
ROM:F0F2 ; get MAP values from ADC, check against fault	limits
ROM:F0F2 ; apply default values	if out of range
ROM:F0F2 ;
ROM:F0F2
ROM:F0F2 Get_MAP:				 ; CODE	XREF: doTick_4ms:loc_EA13P
ROM:F0F2					 ; ROM:EF9FP ...
ROM:F0F2		 ldaa	 #$80 ;	'€'      ; 80h = MAPL
ROM:F0F4
ROM:F0F4 get_MAPL:
ROM:F0F4		 jsr	 readADC
ROM:F0F7		 tba
ROM:F0F8		 ldx	 #$95 ;	'•'      ; return address = 95
ROM:F0FB		 ldab	 #1		 ; pointer to limits
ROM:F0FD		 jsr	 limits_F5F1	 ; apply limits
ROM:F100		 ldab	 MAPL_Raw
ROM:F102		 beq	 store_MAPL
ROM:F104		 ldaa	 MAPR
ROM:F106		 ldab	 MAPR_Raw
ROM:F108		 beq	 store_MAPL
ROM:F10A		 ldaa	 MAPR_Default	 ; MAP default value
ROM:F10D
ROM:F10D store_MAPL:				 ; CODE	XREF: Get_MAP+10j
ROM:F10D					 ; Get_MAP+16j
ROM:F10D		 staa	 MAPL
ROM:F10F
ROM:F10F get_MAPR:				 ; 81h = MAPR
ROM:F10F		 ldaa	 #$81 ;	''
ROM:F111		 jsr	 readADC
ROM:F114		 tba
ROM:F115		 ldx	 #$96 ;	'–'
ROM:F118		 ldab	 #0		 ; pointer to limits
ROM:F11A		 jsr	 limits_F5F1	 ; apply limits
ROM:F11D		 ldab	 MAPR_Raw
ROM:F11F		 beq	 store_MAPR	 ; bra if MAPR = 0
ROM:F121		 ldaa	 MAPL
ROM:F123		 ldab	 MAPL_Raw
ROM:F125		 beq	 store_MAPR
ROM:F127		 ldaa	 MAPL_Default	 ; load	default	value
ROM:F12A
ROM:F12A store_MAPR:				 ; CODE	XREF: Get_MAP+2Dj
ROM:F12A					 ; Get_MAP+33j
ROM:F12A		 staa	 MAPR
ROM:F12C		 rts
ROM:F12C ; End of function Get_MAP
ROM:F12C
ROM:F12D
ROM:F12D ; =============== S U B R O U T I N E =======================================
ROM:F12D
ROM:F12D
ROM:F12D sub_F12D:				 ; CODE	XREF: ROM:F0B8P
ROM:F12D					 ; ROM:F0BDP
ROM:F12D		 ldaa	 byte_A4
ROM:F12F		 anda	 #7
ROM:F131		 eora	 #7
ROM:F133		 bne	 loc_F13A
ROM:F135		 ldd	 word_E00C
ROM:F138		 bra	 loc_F16B
ROM:F13A ; ---------------------------------------------------------------------------
ROM:F13A
ROM:F13A loc_F13A:				 ; CODE	XREF: sub_F12D+6j
ROM:F13A		 ldab	 #$40 ;	'@'
ROM:F13C		 ldaa	 CTS_60		 ; a copy of CTS_C0 or CTS_BE
ROM:F13E		 beq	 loc_F142
ROM:F140		 addb	 #$80 ;	'€'
ROM:F142
ROM:F142 loc_F142:				 ; CODE	XREF: sub_F12D+11j
ROM:F142		 ldaa	 Baro_IAT_5E
ROM:F144		 mul
ROM:F145		 std	 byte_AF	 ; temporary register (Heap)?
ROM:F147		 ldaa	 Baro_IAT_5E
ROM:F149		 ldab	 byte_61
ROM:F14B		 mul
ROM:F14C		 lsrd
ROM:F14D		 addd	 byte_AF	 ; temporary register (Heap)?
ROM:F14F		 lsrd
ROM:F150		 lsrd
ROM:F151		 lsrd
ROM:F152		 lsrd
ROM:F153		 lsrd
ROM:F154		 pshx
ROM:F155		 ldx	 4,x
ROM:F157		 jsr	 Mult_FF5D
ROM:F15A		 bcs	 loc_F167
ROM:F15C		 tsta
ROM:F15D		 bmi	 loc_F167
ROM:F15F		 addd	 VBatt_5A
ROM:F161		 bmi	 loc_F167
ROM:F163		 addd	 byte_5C
ROM:F165		 bpl	 loc_F16A
ROM:F167
ROM:F167 loc_F167:				 ; CODE	XREF: sub_F12D+2Dj
ROM:F167					 ; sub_F12D+30j ...
ROM:F167		 ldd	 #$7FFF
ROM:F16A
ROM:F16A loc_F16A:				 ; CODE	XREF: sub_F12D+38j
ROM:F16A		 pulx
ROM:F16B
ROM:F16B loc_F16B:				 ; CODE	XREF: sub_F12D+Bj
ROM:F16B		 std	 0,x
ROM:F16D		 rts
ROM:F16D ; End of function sub_F12D
ROM:F16D
ROM:F16E ; ---------------------------------------------------------------------------
ROM:F16E
ROM:F16E loc_F16E:				 ; CODE	XREF: ROM:F0ACP
ROM:F16E		 ldab	 #1
ROM:F170		 ldx	 #$E00E
ROM:F173		 jsr	 sub_F511	 ; sub_F511:
ROM:F173					 ;  called with	X = E00Eh, B=1h
ROM:F173					 ;  or		X = E030h, B=2h
ROM:F173					 ;  sets (fault?) flags	in status_A0
ROM:F176		 ldd	 byte_86
ROM:F178		 jsr	 sub_FE88	 ; sub_FE88:
ROM:F178					 ;  jump to a table look up routine
ROM:F17B		 lsrd
ROM:F17B ; ---------------------------------------------------------------------------
ROM:F17C		 fcb   0
ROM:F17D		 fcb   0
ROM:F17E ; ---------------------------------------------------------------------------
ROM:F17E		 nega
ROM:F17F		 lsld
ROM:F180		 lsld
ROM:F181		 std	 byte_B3
ROM:F183		 ldaa	 status_A0
ROM:F185		 bita	 #1
ROM:F187		 beq	 loc_F1A7
ROM:F189		 ldaa	 TPS
ROM:F18B		 jsr	 sub_FE7A
ROM:F18E		 adcb	 $11,x
ROM:F190		 ldab	 #$10
ROM:F192		 cmpa	 #$58 ;	'X'
ROM:F194		 bcc	 loc_F19A
ROM:F196		 aslb
ROM:F197		 mul
ROM:F198		 bra	 loc_F19F
ROM:F19A ; ---------------------------------------------------------------------------
ROM:F19A
ROM:F19A loc_F19A:				 ; CODE	XREF: ROM:F194j
ROM:F19A		 lsrb
ROM:F19B		 mul
ROM:F19C		 addd	 #$840
ROM:F19F
ROM:F19F loc_F19F:				 ; CODE	XREF: ROM:F198j
ROM:F19F		 ldx	 #$E400
ROM:F1A2		 bsr	 tableLU_3Da
ROM:F1A4		 std	 byte_56
ROM:F1A6		 rts
ROM:F1A7 ; ---------------------------------------------------------------------------
ROM:F1A7
ROM:F1A7 loc_F1A7:				 ; CODE	XREF: ROM:F187j
ROM:F1A7		 ldaa	 MAPL_Tn	 ; MAPL_Tn =
ROM:F1A9		 bsr	 MAP_F1CC	 ; MAP_F1CC:
ROM:F1A9					 ; Always called before	a MAP table look up
ROM:F1A9					 ; call	with:
ROM:F1A9					 ;    X	= table	address
ROM:F1A9					 ;    A	= MAP value
ROM:F1A9					 ; returns:
ROM:F1A9					 ;    a	value in D
ROM:F1A9					 ;
ROM:F1AB		 std	 byte_AF	 ; temporary register (Heap)?
ROM:F1AD		 ldd	 byte_B3
ROM:F1AF		 ldx	 #$E200
ROM:F1B2		 jsr	 tableLU_3D	 ; tableLU_3D:
ROM:F1B2					 ; called with:
ROM:F1B2					 ; ??
ROM:F1B2					 ; called from:
ROM:F1B2					 ;  tableLU_3Da
ROM:F1B2					 ;  tableLU_3Db
ROM:F1B5		 lsrd
ROM:F1B6		 lsrd
ROM:F1B7		 std	 byte_56
ROM:F1B9		 ldaa	 MAPR_T1
ROM:F1BB		 bsr	 MAP_F1CC	 ; MAP_F1CC:
ROM:F1BB					 ; Always called before	a MAP table look up
ROM:F1BB					 ; call	with:
ROM:F1BB					 ;    X	= table	address
ROM:F1BB					 ;    A	= MAP value
ROM:F1BB					 ; returns:
ROM:F1BB					 ;    a	value in D
ROM:F1BB					 ;
ROM:F1BD		 ldx	 #$E200
ROM:F1C0 tableLU_3Da:
ROM:F1C0 main 3D table look up,	call with:
ROM:F1C0    X =	base address
ROM:F1C0    D =	a value
ROM:F1C0 calls:
ROM:F1C0   table_LU_3D
ROM:F1C0
ROM:F1C0 ; =============== S U B R O U T I N E =======================================
ROM:F1C0
ROM:F1C0
ROM:F1C0 tableLU_3Da:				 ; CODE	XREF: ROM:F1A2p
ROM:F1C0		 std	 byte_AF	 ; temporary register (Heap)?
ROM:F1C2		 ldd	 byte_B3
ROM:F1C4		 jsr	 tableLU_3D	 ; tableLU_3D:
ROM:F1C4					 ; called with:
ROM:F1C4					 ; ??
ROM:F1C4					 ; called from:
ROM:F1C4					 ;  tableLU_3Da
ROM:F1C4					 ;  tableLU_3Db
ROM:F1C7		 lsrd
ROM:F1C8		 lsrd
ROM:F1C9		 std	 result_58	 ; MAP related,	result from 3d LUT
ROM:F1CB		 rts
ROM:F1CB ; End of function tableLU_3Da
ROM:F1CB
ROM:F1CC
ROM:F1CC ; =============== S U B R O U T I N E =======================================
ROM:F1CC
ROM:F1CC ; MAP_F1CC:
ROM:F1CC ; Always called before	a MAP table look up
ROM:F1CC ; call	with:
ROM:F1CC ;    X	= table	address
ROM:F1CC ;    A	= MAP value
ROM:F1CC ; returns:
ROM:F1CC ;    a	value in D
ROM:F1CC ;
ROM:F1CC
ROM:F1CC MAP_F1CC:				 ; CODE	XREF: ROM:EB3BP
ROM:F1CC					 ; ROM:EB4EP ...
ROM:F1CC		 ldab	 Baro_7C
ROM:F1CE		 mul
ROM:F1CF		 lsld
ROM:F1D0		 bcc	 loc_F1D4
ROM:F1D2		 ldaa	 #$FF
ROM:F1D4
ROM:F1D4 loc_F1D4:				 ; CODE	XREF: MAP_F1CC+4j
ROM:F1D4		 jsr	 sub_FE7A
ROM:F1D7		 addd	 #$23C6
ROM:F1DA		 sba
ROM:F1DB		 cmpa	 #$30 ;	'0'
ROM:F1DD		 bcs	 loc_F1EA
ROM:F1DF		 cmpa	 #$80 ;	'€'
ROM:F1E1		 bcc	 loc_F1E8
ROM:F1E3		 aslb
ROM:F1E4		 mul
ROM:F1E5		 suba	 #3
ROM:F1E7		 rts
ROM:F1E8 ; ---------------------------------------------------------------------------
ROM:F1E8
ROM:F1E8 loc_F1E8:				 ; CODE	XREF: MAP_F1CC+15j
ROM:F1E8		 adda	 #$50 ;	'P'
ROM:F1EA
ROM:F1EA loc_F1EA:				 ; CODE	XREF: MAP_F1CC+11j
ROM:F1EA		 mul
ROM:F1EB		 rts
ROM:F1EB ; End of function MAP_F1CC
ROM:F1EB
ROM:F1EC
ROM:F1EC ; =============== S U B R O U T I N E =======================================
ROM:F1EC
ROM:F1EC ; get_Temps:
ROM:F1EC ; get the IAT and CTS readings
ROM:F1EC ; called from jmp_table1
ROM:F1EC
ROM:F1EC doTick_262ms:				 ; CODE	XREF: ROM:EF92P
ROM:F1EC		 ldaa	 #$83 ;	'ƒ'      ; 83h = IAT
ROM:F1EE		 bsr	 readADC
ROM:F1F0		 tba
ROM:F1F1		 ldx	 #$92 ;	'’'      ; IAT_RAW
ROM:F1F4		 ldab	 #4		 ; pointer to limits
ROM:F1F6		 jsr	 limits_F5F1	 ; test	against	limits
ROM:F1F9		 staa	 IAT
ROM:F1FB		 ldx	 #$E110
ROM:F1FE		 jsr	 sub_FE99
ROM:F201		 staa	 IAT_7D
ROM:F203		 ldaa	 #$84 ;	'„'      ; 84h = CTS
ROM:F205		 bsr	 readADC
ROM:F207		 tba
ROM:F208		 ldx	 #$93 ;	'“'      ; CTS_Raw
ROM:F20B		 ldab	 #5		 ; pointer to limits
ROM:F20D		 jsr	 limits_F5F1	 ; limits_F5F1:
ROM:F20D					 ; This	code appears to	check the ADC values against limits
ROM:F20D					 ; to check for	sensor faults
ROM:F210		 staa	 CTS
ROM:F212		 ldx	 #$E160
ROM:F215		 jsr	 sub_FE99
ROM:F218		 aslb
ROM:F219		 tab
ROM:F21A		 ldaa	 #0
ROM:F21C		 rolb
ROM:F21D		 rola
ROM:F21E		 std	 CTS_C0
ROM:F220		 ldaa	 CTS
ROM:F222		 ldx	 #$E170
ROM:F225		 jsr	 sub_FE99
ROM:F228		 aslb
ROM:F229		 tab
ROM:F22A		 ldaa	 #0
ROM:F22C		 rolb
ROM:F22D		 rola
ROM:F22E		 std	 CTS_BE
ROM:F230		 ldaa	 CTS
ROM:F232		 ldx	 #$E180
ROM:F235		 jsr	 sub_FE99
ROM:F238		 staa	 CTS_64
ROM:F23A		 ldx	 #$E010
ROM:F23D		 ldaa	 byte_A9
ROM:F23F		 beq	 loc_F244
ROM:F241		 ldx	 #$E0C0
ROM:F244
ROM:F244 loc_F244:				 ; CODE	XREF: doTick_262ms+53j
ROM:F244		 ldaa	 byte_A7
ROM:F246		 bita	 #$80 ;	'€'
ROM:F248		 bne	 locret_F25F
ROM:F24A		 ldd	 CTS_60		 ; a copy of CTS_C0 or CTS_BE
ROM:F24C		 subb	 0,x
ROM:F24E		 sbca	 #0
ROM:F250		 bcs	 loc_F258
ROM:F252		 std	 byte_AF	 ; temporary register (Heap)?
ROM:F254		 subd	 CTS_BE
ROM:F256		 bcc	 loc_F25A+1
ROM:F258
ROM:F258 loc_F258:				 ; CODE	XREF: doTick_262ms+64j
ROM:F258		 ldd	 CTS_BE
ROM:F25A
ROM:F25A loc_F25A:				 ; CODE	XREF: doTick_262ms+6Aj
ROM:F25A		 cpx	 #$DCAF
ROM:F25D		 std	 CTS_60		 ; a copy of CTS_C0 or CTS_BE
ROM:F25F
ROM:F25F locret_F25F:				 ; CODE	XREF: doTick_262ms+5Cj
ROM:F25F		 rts
ROM:F25F ; End of function doTick_262ms
ROM:F25F
ROM:F260 readADC:
ROM:F260    call with channel number in	A
ROM:F260    return result in B
ROM:F260
ROM:F260 ; =============== S U B R O U T I N E =======================================
ROM:F260
ROM:F260
ROM:F260 readADC:				 ; CODE	XREF: Get_MAP:get_MAPLP
ROM:F260					 ; Get_MAP+1FP	...
ROM:F260		 staa	 PIA_Ctrl	 ; start ADC conversion
ROM:F263
ROM:F263 loc_F263:				 ; CODE	XREF: readADC+8j
ROM:F263		 ldaa	 PIA_Status
ROM:F266		 bita	 #$40 ;	'@'      ; test the status bit
ROM:F268		 bne	 loc_F263	 ; loop	back if	not complete
ROM:F26A		 ldab	 PIA_Result	 ; else	get the	result
ROM:F26D		 rts
ROM:F26D ; End of function readADC
ROM:F26D
ROM:F26E
ROM:F26E ; =============== S U B R O U T I N E =======================================
ROM:F26E
ROM:F26E
ROM:F26E get_BARO:				 ; CODE	XREF: ROM:EF98P
ROM:F26E					 ; doTick_16msp
ROM:F26E		 ldaa	 #$C3 ;	'Ã'
ROM:F270		 ldab	 byte_A9
ROM:F272		 bne	 loc_F282
ROM:F274		 ldaa	 #$82 ;	'‚'      ; Baro = AN2
ROM:F276		 jsr	 readADC
ROM:F279		 tba
ROM:F27A		 ldx	 #$94 ;	'”'      ; 94 = Baro
ROM:F27D		 ldab	 #3
ROM:F27F		 jsr	 limits_F5F1	 ; limits_F5F1:
ROM:F27F					 ; This	code appears to	check the ADC values against limits
ROM:F27F					 ; to check for	sensor faults
ROM:F282
ROM:F282 loc_F282:				 ; CODE	XREF: get_BARO+4j
ROM:F282		 staa	 Baro_70
ROM:F284		 jsr	 sub_FE7A
ROM:F287		 addd	 $73C6
ROM:F28A		 sba
ROM:F28B		 mul
ROM:F28C		 ldx	 #$E120
ROM:F28F		 jsr	 tableLU_2D
ROM:F292		 staa	 Baro_7C
ROM:F294		 ldaa	 IAT_7D
ROM:F296		 psha
ROM:F297		 ldaa	 Baro_70
ROM:F299		 ldab	 byte_E012	 ; B=54h =84
ROM:F29C		 mul			 ; Baro_70*84
ROM:F29D		 jsr	 loc_FF43+1
ROM:F2A0		 cmpa	 #$40 ;	'@'
ROM:F2A2		 bcs	 loc_F2A7
ROM:F2A4		 ldd	 #$3FFF
ROM:F2A7
ROM:F2A7 loc_F2A7:				 ; CODE	XREF: get_BARO+34j
ROM:F2A7		 lsld
ROM:F2A8		 lsld
ROM:F2A9		 staa	 Baro_IAT_5E
ROM:F2AB		 rts
ROM:F2AB ; End of function get_BARO
ROM:F2AB
ROM:F2AC
ROM:F2AC ; =============== S U B R O U T I N E =======================================
ROM:F2AC
ROM:F2AC ; doTick_16ms:
ROM:F2AC ; Called from jump_table1
ROM:F2AC
ROM:F2AC doTick_16ms:
ROM:F2AC		 bsr	 get_BARO
ROM:F2AE		 ldaa	 Count_9D
ROM:F2B0		 beq	 loc_F2B5
ROM:F2B2		 deca
ROM:F2B3		 staa	 Count_9D
ROM:F2B5
ROM:F2B5 loc_F2B5:				 ; CODE	XREF: doTick_16ms+4j
ROM:F2B5		 ldaa	 count_C2
ROM:F2B7		 beq	 loc_F2BC
ROM:F2B9		 deca
ROM:F2BA		 staa	 count_C2
ROM:F2BC
ROM:F2BC loc_F2BC:				 ; CODE	XREF: doTick_16ms+Bj
ROM:F2BC		 sei
ROM:F2BD		 ldaa	 byte_A6
ROM:F2BF		 oraa	 byte_A5
ROM:F2C1		 staa	 byte_A5
ROM:F2C3		 cli
ROM:F2C4		 ldd	 byte_A4	 ; A4:A5
ROM:F2C6		 bne	 loc_F2D7	 ; test	P27
ROM:F2C8		 staa	 byte_90
ROM:F2CA		 staa	 LEDs_8F
ROM:F2CC		 sei
ROM:F2CD		 ldd	 PORT1		 ; PORT1:PORT2
ROM:F2CF		 anda	 #$F		 ; LEDs	OFF
ROM:F2D1		 orab	 #4		 ; set P22
ROM:F2D3		 std	 PORT1		 ; update PORT1:PORT2
ROM:F2D5		 cli
ROM:F2D6		 rts
ROM:F2D7 ; ---------------------------------------------------------------------------
ROM:F2D7
ROM:F2D7 loc_F2D7:				 ; CODE	XREF: doTick_16ms+1Aj
ROM:F2D7		 bitb	 #$80 ;	'€'      ; test byte_A5
ROM:F2D9		 bne	 loc_F32A
ROM:F2DB		 ldaa	 byte_90
ROM:F2DD		 bne	 loc_F30B
ROM:F2DF
ROM:F2DF loc_F2DF:				 ; CODE	XREF: doTick_16ms+4Bj
ROM:F2DF		 ldab	 LEDs_8F
ROM:F2E1		 incb
ROM:F2E2		 cmpb	 #$D
ROM:F2E4		 bcs	 loc_F2E8
ROM:F2E6		 ldab	 #1
ROM:F2E8
ROM:F2E8 loc_F2E8:				 ; CODE	XREF: doTick_16ms+38j
ROM:F2E8		 stab	 LEDs_8F
ROM:F2EA		 ldx	 #$E77E
ROM:F2ED		 abx
ROM:F2EE		 abx
ROM:F2EF		 ldd	 byte_A4
ROM:F2F1		 anda	 0,x
ROM:F2F3		 bne	 loc_F2F9
ROM:F2F5		 andb	 1,x
ROM:F2F7		 beq	 loc_F2DF
ROM:F2F9
ROM:F2F9 loc_F2F9:				 ; CODE	XREF: doTick_16ms+47j
ROM:F2F9		 ldab	 LEDs_8F
ROM:F2FB		 ldaa	 #$10
ROM:F2FD		 mul			 ;  count_8F <<	4
ROM:F2FE		 sei
ROM:F2FF		 ldaa	 PORT1
ROM:F301		 anda	 #$F		 ;  LEDs off
ROM:F303		 aba			 ;  add	LED bits
ROM:F304		 ldab	 PORT2
ROM:F306		 andb	 #$FB ;	'û'      ;  clear P22
ROM:F308		 std	 PORT1		 ;  save PORT1:PORT2
ROM:F30A		 cli
ROM:F30B
ROM:F30B loc_F30B:				 ; CODE	XREF: doTick_16ms+31j
ROM:F30B		 ldx	 #$E064
ROM:F30E		 ldaa	 byte_90
ROM:F310		 bpl	 loc_F31B
ROM:F312		 deca
ROM:F313		 cmpa	 1,x		 ; E065	= F0h
ROM:F315		 bcc	 loc_F318
ROM:F317		 clra
ROM:F318
ROM:F318 loc_F318:				 ; CODE	XREF: doTick_16ms+69j
ROM:F318		 staa	 byte_90
ROM:F31A		 rts
ROM:F31B ; ---------------------------------------------------------------------------
ROM:F31B
ROM:F31B loc_F31B:				 ; CODE	XREF: doTick_16ms+64j
ROM:F31B		 inca
ROM:F31C		 cmpa	 0,x		 ; E064	= 10h
ROM:F31E		 bcs	 loc_F327
ROM:F320		 ldaa	 #$FF
ROM:F322		 staa	 byte_90
ROM:F324		 sei
ROM:F325		 bra	 loc_F33A
ROM:F327 ; ---------------------------------------------------------------------------
ROM:F327
ROM:F327 loc_F327:				 ; CODE	XREF: doTick_16ms+72j
ROM:F327		 staa	 byte_90
ROM:F329		 rts
ROM:F32A ; ---------------------------------------------------------------------------
ROM:F32A
ROM:F32A loc_F32A:				 ; CODE	XREF: doTick_16ms+2Dj
ROM:F32A		 ldaa	 count_91
ROM:F32C		 beq	 loc_F333
ROM:F32E		 deca
ROM:F32F		 staa	 count_91
ROM:F331		 bne	 loc_F340
ROM:F333
ROM:F333 loc_F333:				 ; CODE	XREF: doTick_16ms+80j
ROM:F333		 sei
ROM:F334		 ldaa	 byte_A5
ROM:F336		 anda	 #$7F ;	''
ROM:F338		 staa	 byte_A5
ROM:F33A
ROM:F33A loc_F33A:				 ; CODE	XREF: doTick_16ms+79j
ROM:F33A		 ldaa	 PORT1
ROM:F33C		 anda	 #$F		 ; LEDs	off
ROM:F33E		 staa	 PORT1
ROM:F340
ROM:F340 loc_F340:				 ; CODE	XREF: doTick_16ms+85j
ROM:F340		 cli
ROM:F341		 rts
ROM:F341 ; End of function doTick_16ms
ROM:F341
ROM:F342
ROM:F342 ; =============== S U B R O U T I N E =======================================
ROM:F342
ROM:F342
ROM:F342 get_VBatt:				 ; CODE	XREF: doTick_4ms+19P
ROM:F342					 ; ROM:EF95P ...
ROM:F342		 ldaa	 #$85 ;	'…'      ; VBAtt = AN5
ROM:F344		 jsr	 readADC
ROM:F347		 stab	 VBatt		 ; VBatt = B+ *	0.2857
ROM:F349		 tba
ROM:F34A		 jsr	 sub_FE7A
ROM:F34D		 subb	 $40C6
ROM:F350		 sba
ROM:F351		 mul
ROM:F352		 ldx	 #$E150
ROM:F355		 jsr	 tableLU_2D
ROM:F358		 lsrd
ROM:F359		 lsrd
ROM:F35A		 lsrd
ROM:F35B		 lsrd
ROM:F35C		 std	 VBatt_5A
ROM:F35E		 ldaa	 VBatt		 ; VBatt = B+ *	0.2857
ROM:F360		 jsr	 sub_FE7A
ROM:F363		 subb	 $40C6		 ; A= A-B
ROM:F366		 sba
ROM:F367		 mul
ROM:F368		 ldx	 #$E190
ROM:F36B		 jsr	 tableLU_2D
ROM:F36E		 lsrd
ROM:F36F		 lsrd
ROM:F370		 lsrd
ROM:F371		 lsrd
ROM:F372		 std	 VBatt_69	 ; from	the LUT	at E190
ROM:F374
ROM:F374 code_F374:
ROM:F374		 ldaa	 TPS
ROM:F376		 suba	 byte_79
ROM:F378		 bcs	 loc_F38C
ROM:F37A		 cmpa	 byte_E03B
ROM:F37D		 bcs	 loc_F38C
ROM:F37F		 ldaa	 byte_E039
ROM:F382		 staa	 count_6D
ROM:F384		 ldaa	 status_A0
ROM:F386		 oraa	 #8
ROM:F388		 staa	 status_A0
ROM:F38A		 bra	 loc_F39B
ROM:F38C ; ---------------------------------------------------------------------------
ROM:F38C
ROM:F38C loc_F38C:				 ; CODE	XREF: get_VBatt+36j
ROM:F38C					 ; get_VBatt+3Bj
ROM:F38C		 ldaa	 count_6D
ROM:F38E		 beq	 loc_F395
ROM:F390		 deca
ROM:F391		 staa	 count_6D
ROM:F393		 bne	 loc_F39B
ROM:F395
ROM:F395 loc_F395:				 ; CODE	XREF: get_VBatt+4Cj
ROM:F395		 ldaa	 status_A0
ROM:F397		 anda	 #$F7 ;	'÷'
ROM:F399		 staa	 status_A0
ROM:F39B
ROM:F39B loc_F39B:				 ; CODE	XREF: get_VBatt+48j
ROM:F39B					 ; get_VBatt+51j
ROM:F39B		 ldd	 byte_86
ROM:F39D		 subd	 word_E036
ROM:F3A0		 bcc	 loc_F3AB+1	 ; 3-cyle NOP, modified	code or	duff binary?
ROM:F3A2		 ldaa	 status_A0
ROM:F3A4		 bita	 #8
ROM:F3A6		 beq	 loc_F3AB+1	 ; 3-cyle NOP, modified	code or	duff binary?
ROM:F3A8		 ldaa	 byte_E03A
ROM:F3AB
ROM:F3AB loc_F3AB:				 ; CODE	XREF: get_VBatt+5Ej
ROM:F3AB					 ; get_VBatt+64j
ROM:F3AB		 brn	 loc_F3FB+1	 ; 3-cyle NOP, modified	code or	duff binary?
ROM:F3AD		 staa	 byte_6B
ROM:F3AF		 rts
ROM:F3AF ; End of function get_VBatt
ROM:F3AF
ROM:F3B0
ROM:F3B0 ; =============== S U B R O U T I N E =======================================
ROM:F3B0
ROM:F3B0
ROM:F3B0 get_TPS:				 ; CODE	XREF: ROM:EF8BP
ROM:F3B0					 ; sub_F3C2+8p
ROM:F3B0		 ldaa	 #$86 ;	'†'
ROM:F3B2		 jsr	 readADC
ROM:F3B5		 tba
ROM:F3B6		 ldx	 #$97 ;	'—'
ROM:F3B9		 ldab	 #2
ROM:F3BB		 jsr	 limits_F5F1	 ; limits_F5F1:
ROM:F3BB					 ; This	code appears to	check the ADC values against limits
ROM:F3BB					 ; to check for	sensor faults
ROM:F3BE		 staa	 TPS
ROM:F3C0		 tab
ROM:F3C1		 rts
ROM:F3C1 ; End of function get_TPS
ROM:F3C1
ROM:F3C2
ROM:F3C2 ; =============== S U B R O U T I N E =======================================
ROM:F3C2
ROM:F3C2
ROM:F3C2 sub_F3C2:				 ; CODE	XREF: doTick_4ms+1CP
ROM:F3C2					 ; ROM:F0B2P
ROM:F3C2		 ldd	 byte_77
ROM:F3C4		 std	 byte_78
ROM:F3C6		 ldd	 TPS
ROM:F3C8		 std	 byte_76	 ;  D =	TPS:TPS
ROM:F3CA		 bsr	 get_TPS
ROM:F3CC		 ldaa	 status_A0
ROM:F3CE		 subb	 byte_79	 ;  B=B-byte_79
ROM:F3D0		 bcc	 loc_F3DA	 ; bra if TPS>byte_79
ROM:F3D2
ROM:F3D2 loc_F3D2:				 ; CODE	XREF: sub_F3C2+23j
ROM:F3D2		 anda	 #$DF ;	'ß'
ROM:F3D4		 staa	 status_A0
ROM:F3D6
ROM:F3D6 clr_Count_90:				 ; CODE	XREF: sub_F3C2+1Fj
ROM:F3D6		 clr	 Count_9D
ROM:F3D9		 rts
ROM:F3DA ; ---------------------------------------------------------------------------
ROM:F3DA loc_F3DA:
ROM:F3DA Called	with:
ROM:F3DA   A=Status_A0
ROM:F3DA   B=(TPS_T1-byte_79)
ROM:F3DA
ROM:F3DA loc_F3DA:				 ; CODE	XREF: sub_F3C2+Ej
ROM:F3DA		 cmpb	 byte_E01D
ROM:F3DD		 bhi	 loc_F3E8
ROM:F3DF		 bita	 #$20 ;	' '
ROM:F3E1		 beq	 clr_Count_90
ROM:F3E3		 ldab	 Count_9D
ROM:F3E5		 beq	 loc_F3D2
ROM:F3E7		 rts
ROM:F3E8 ; ---------------------------------------------------------------------------
ROM:F3E8
ROM:F3E8 loc_F3E8:				 ; CODE	XREF: sub_F3C2+1Bj
ROM:F3E8		 ldx	 #$E1A0
ROM:F3EB		 cmpb	 byte_E01E	 ;  A TPS delta?
ROM:F3EE		 bls	 loc_F3F9
ROM:F3F0		 inx
ROM:F3F1		 inx
ROM:F3F2		 cmpb	 byte_E01F
ROM:F3F5		 bls	 loc_F3F9
ROM:F3F7		 inx
ROM:F3F8		 inx
ROM:F3F9
ROM:F3F9 loc_F3F9:				 ; CODE	XREF: sub_F3C2+2Cj
ROM:F3F9					 ; sub_F3C2+33j
ROM:F3F9		 stab	 byte_AF	 ; temporary register (Heap)?
ROM:F3FB
ROM:F3FB loc_F3FB:				 ; CODE	XREF: get_VBatt:loc_F3ABj
ROM:F3FB		 ldd	 byte_86	 ;  also loc_EA8B
ROM:F3FD		 subd	 word_E019	 ; =200h
ROM:F400		 bcc	 locret_F424
ROM:F402		 ldaa	 TPS
ROM:F404		 cmpa	 byte_E01B	 ; =F1
ROM:F407		 bcc	 locret_F424
ROM:F409		 ldaa	 count_C2
ROM:F40B		 bne	 locret_F424
ROM:F40D		 ldaa	 byte_E02D
ROM:F410		 staa	 count_C2
ROM:F412		 ldaa	 byte_E020
ROM:F415		 staa	 Count_9D
ROM:F417		 ldaa	 status_A0
ROM:F419		 bita	 #$20 ;	' '
ROM:F41B		 bne	 locret_F424
ROM:F41D		 oraa	 #$20 ;	' '
ROM:F41F		 staa	 status_A0
ROM:F421		 jsr	 loc_ED01
ROM:F424
ROM:F424 locret_F424:				 ; CODE	XREF: sub_F3C2+3Ej
ROM:F424					 ; sub_F3C2+45j ...
ROM:F424		 rts
ROM:F424 ; End of function sub_F3C2
ROM:F424
ROM:F424 ; ---------------------------------------------------------------------------
ROM:F425		 fcb $3F ; ?
ROM:F426		 fcb $3F ; ?
ROM:F427		 fcb $3F ; ?
ROM:F428		 fcb $3F ; ?
ROM:F429		 fcb $3F ; ?
ROM:F42A		 fcb $3F ; ?
ROM:F42B		 fcb $3F ; ?
ROM:F42C		 fcb $3F ; ?
ROM:F42D		 fcb $3F ; ?
ROM:F42E		 fcb $3F ; ?
ROM:F42F		 fcb $3F ; ?
ROM:F430		 fcb $3F ; ?
ROM:F431		 fcb $3F ; ?
ROM:F432		 fcb $3F ; ?
ROM:F433		 fcb $3F ; ?
ROM:F434		 fcb $3F ; ?
ROM:F435		 fcb $3F ; ?
ROM:F436		 fcb $3F ; ?
ROM:F437		 fcb $3F ; ?
ROM:F438		 fcb $3F ; ?
ROM:F439		 fcb $3F ; ?
ROM:F43A		 fcb $3F ; ?
ROM:F43B		 fcb $3F ; ?
ROM:F43C		 fcb $3F ; ?
ROM:F43D		 fcb $3F ; ?
ROM:F43E		 fcb $3F ; ?
ROM:F43F		 fcb $3F ; ?
ROM:F440		 fcb $3F ; ?
ROM:F441		 fcb $3F ; ?
ROM:F442		 fcb $3F ; ?
ROM:F443		 fcb $3F ; ?
ROM:F444		 fcb $3F ; ?
ROM:F445		 fcb $3F ; ?
ROM:F446		 fcb $3F ; ?
ROM:F447		 fcb $3F ; ?
ROM:F448		 fcb $3F ; ?
ROM:F449		 fcb $3F ; ?
ROM:F44A		 fcb $3F ; ?
ROM:F44B		 fcb $3F ; ?
ROM:F44C		 fcb $3F ; ?
ROM:F44D		 fcb $3F ; ?
ROM:F44E		 fcb $3F ; ?
ROM:F44F		 fcb $3F ; ?
ROM:F450		 fcb $3F ; ?
ROM:F451		 fcb $3F ; ?
ROM:F452		 fcb $3F ; ?
ROM:F453		 fcb $3F ; ?
ROM:F454		 fcb $3F ; ?
ROM:F455		 fcb $3F ; ?
ROM:F456		 fcb $3F ; ?
ROM:F457		 fcb $3F ; ?
ROM:F458		 fcb $3F ; ?
ROM:F459		 fcb $3F ; ?
ROM:F45A		 fcb $3F ; ?
ROM:F45B		 fcb $3F ; ?
ROM:F45C		 fcb $3F ; ?
ROM:F45D		 fcb $3F ; ?
ROM:F45E		 fcb $3F ; ?
ROM:F45F		 fcb $3F ; ?
ROM:F460		 fcb $3F ; ?
ROM:F461		 fcb $3F ; ?
ROM:F462		 fcb $3F ; ?
ROM:F463
ROM:F463 ; =============== S U B R O U T I N E =======================================
ROM:F463
ROM:F463
ROM:F463 sub_F463:				 ; CODE	XREF: ROM:ED22P
ROM:F463					 ; ROM:ED88P
ROM:F463		 ldaa	 #$50 ;	'P'
ROM:F465		 anda	 4,x
ROM:F467		 oraa	 byte_A8
ROM:F469		 staa	 byte_A8
ROM:F46B		 ldaa	 byte_86
ROM:F46D		 cmpa	 #2
ROM:F46F		 bcc	 locret_F479
ROM:F471		 ldaa	 #$50 ;	'P'
ROM:F473		 anda	 4,x
ROM:F475		 oraa	 byte_9F
ROM:F477		 staa	 byte_9F
ROM:F479
ROM:F479 locret_F479:				 ; CODE	XREF: sub_F463+Cj
ROM:F479		 rts
ROM:F479 ; End of function sub_F463
ROM:F479
ROM:F47A
ROM:F47A ; =============== S U B R O U T I N E =======================================
ROM:F47A
ROM:F47A ; doTick_65ms
ROM:F47A ; called from jmp_table1
ROM:F47A
ROM:F47A doTick_65ms:
ROM:F47A		 ldaa	 sub_EEA6
ROM:F47D		 cmpa	 #$86 ;	'†'
ROM:F47F		 bne	 locret_F484
ROM:F481		 jsr	 sub_EEA6
ROM:F484
ROM:F484 locret_F484:				 ; CODE	XREF: doTick_65ms+5j
ROM:F484		 rts
ROM:F484 ; End of function doTick_65ms
ROM:F484
ROM:F485
ROM:F485 ; =============== S U B R O U T I N E =======================================
ROM:F485
ROM:F485 ; PIA_F484:
ROM:F485 ; Called with 27, 2A, 2B or 2C
ROM:F485 ; returns a value in A
ROM:F485
ROM:F485 PIA_F485:				 ; CODE	XREF: doTick_524ms-773P
ROM:F485					 ; sub_EEA6+7P	...
ROM:F485		 staa	 PIA_Ctrl
ROM:F488
ROM:F488 loc_F488:				 ; CODE	XREF: PIA_F485+8j
ROM:F488		 ldaa	 PIA_Status	 ; get status
ROM:F48B		 bita	 #$40 ;	'@'      ; test bit6
ROM:F48D		 bne	 loc_F488	 ; loop	back if	not done
ROM:F48F		 anda	 #$20 ;	' '      ; clear all but bit5
ROM:F491		 rts
ROM:F491 ; End of function PIA_F485
ROM:F491
ROM:F492 ; ---------------------------------------------------------------------------
ROM:F492
ROM:F492 loc_F492:				 ; CODE	XREF: sub_F0C7+19P
ROM:F492		 ldd	 byte_86
ROM:F494		 jsr	 sub_FE88	 ; sub_FE88:
ROM:F494					 ;  jump to a table look up routine
ROM:F497		 lsrd
ROM:F497 ; ---------------------------------------------------------------------------
ROM:F498		 fcb   0
ROM:F499		 fcb   0
ROM:F49A ; ---------------------------------------------------------------------------
ROM:F49A		 nega
ROM:F49B		 lsld
ROM:F49C		 lsld
ROM:F49D		 ldx	 #$E130		 ;  table is all 0's
ROM:F4A0		 jsr	 tableLU_2D
ROM:F4A3		 staa	 byte_AF	 ; always 0
ROM:F4A5		 ldab	 byte_A4
ROM:F4A7		 bitb	 #2
ROM:F4A9		 bne	 loc_F4AF
ROM:F4AB		 ldab	 MAPL_Tn	 ; MAPL_Tn =
ROM:F4AD		 bra	 loc_F4B5
ROM:F4AF ; ---------------------------------------------------------------------------
ROM:F4AF
ROM:F4AF loc_F4AF:				 ; CODE	XREF: ROM:F4A9j
ROM:F4AF		 bitb	 #1
ROM:F4B1		 bne	 loc_F4DE
ROM:F4B3		 ldab	 MAPR_T1
ROM:F4B5
ROM:F4B5 loc_F4B5:				 ; CODE	XREF: ROM:F4ADj
ROM:F4B5		 ldaa	 byte_E012
ROM:F4B8		 mul
ROM:F4B9		 ldab	 Baro_70
ROM:F4BB		 mul
ROM:F4BC		 lsld
ROM:F4BD		 lsld
ROM:F4BE		 tab
ROM:F4BF		 ldaa	 status_A0
ROM:F4C1		 bita	 #$10
ROM:F4C3		 bne	 loc_F4CE
ROM:F4C5		 subb	 byte_AF	 ; temporary register (Heap)?
ROM:F4C7		 bcc	 locret_F4CD
ROM:F4C9		 oraa	 #$10
ROM:F4CB		 staa	 status_A0
ROM:F4CD
ROM:F4CD locret_F4CD:				 ; CODE	XREF: ROM:F4C7j
ROM:F4CD		 rts
ROM:F4CE ; ---------------------------------------------------------------------------
ROM:F4CE
ROM:F4CE loc_F4CE:				 ; CODE	XREF: ROM:F4C3j
ROM:F4CE		 subb	 byte_E01C
ROM:F4D1		 bcc	 loc_F4D4
ROM:F4D3		 clrb
ROM:F4D4
ROM:F4D4 loc_F4D4:				 ; CODE	XREF: ROM:F4D1j
ROM:F4D4		 subb	 byte_AF	 ; temporary register (Heap)?
ROM:F4D6		 bcs	 locret_F4E4
ROM:F4D8		 ldx	 #$E015
ROM:F4DB		 jsr	 loc_ED01
ROM:F4DE
ROM:F4DE loc_F4DE:				 ; CODE	XREF: ROM:F4B1j
ROM:F4DE		 ldaa	 status_A0
ROM:F4E0		 anda	 #$EF ;	'ï'
ROM:F4E2		 staa	 status_A0
ROM:F4E4
ROM:F4E4 locret_F4E4:				 ; CODE	XREF: ROM:F4D6j
ROM:F4E4		 rts
ROM:F4E5
ROM:F4E5 ; =============== S U B R O U T I N E =======================================
ROM:F4E5
ROM:F4E5
ROM:F4E5 sub_F4E5:				 ; CODE	XREF: doTick_4ms+30P
ROM:F4E5					 ; ROM:F0C3P
ROM:F4E5		 ldd	 byte_86
ROM:F4E7		 subd	 word_E032	 ; =200h
ROM:F4EA		 bcc	 loc_F4FA+1
ROM:F4EC		 ldaa	 TPS
ROM:F4EE		 suba	 byte_79
ROM:F4F0		 bcs	 loc_F4FA+1
ROM:F4F2		 cmpa	 byte_E034	 ; =3h
ROM:F4F5		 bcs	 loc_F4FA+1
ROM:F4F7		 ldaa	 byte_E035	 ; =0h
ROM:F4FA
ROM:F4FA loc_F4FA:				 ; CODE	XREF: sub_F4E5+5j
ROM:F4FA					 ; sub_F4E5+Bj	...
ROM:F4FA		 brn	 loc_F54A+1
ROM:F4FC		 staa	 byte_65
ROM:F4FE		 clra
ROM:F4FF		 ldab	 byte_63	 ; from	LUT at E500
ROM:F501		 addb	 CTS_64
ROM:F503		 adca	 #0
ROM:F505		 addb	 byte_65
ROM:F507		 adca	 #0
ROM:F509		 tsta
ROM:F50A		 beq	 loc_F50E
ROM:F50C		 ldab	 #$FF
ROM:F50E
ROM:F50E loc_F50E:				 ; CODE	XREF: sub_F4E5+25j
ROM:F50E		 stab	 byte_62
ROM:F510		 rts
ROM:F510 ; End of function sub_F4E5
ROM:F510
ROM:F511
ROM:F511 ; =============== S U B R O U T I N E =======================================
ROM:F511
ROM:F511 ; sub_F511:
ROM:F511 ;  called with	X = E00Eh, B=1h
ROM:F511 ;  or		X = E030h, B=2h
ROM:F511 ;  sets (fault?) flags	in status_A0
ROM:F511
ROM:F511 sub_F511:				 ; CODE	XREF: ROM:EB05P
ROM:F511					 ; ROM:EB84P ...
ROM:F511		 ldaa	 MAPL_Raw	 ; get MAPL
ROM:F513		 beq	 MAP_fault_F521
ROM:F515		 ldaa	 MAPR_Raw	 ; get MAPR
ROM:F517		 beq	 MAP_fault_F521
ROM:F519		 ldaa	 TPS_Raw	 ; get TPS
ROM:F51B		 bne	 loc_F52A	 ; bra if no fault
ROM:F51D
ROM:F51D TPS_fault:				 ; else	set bit1 or bit0
ROM:F51D		 orab	 status_A0
ROM:F51F		 bra	 loc_F543
ROM:F521 ; ---------------------------------------------------------------------------
ROM:F521
ROM:F521 MAP_fault_F521:			 ; CODE	XREF: sub_F511+2j
ROM:F521					 ; sub_F511+6j
ROM:F521		 ldaa	 TPS_Raw
ROM:F523		 beq	 loc_F532	 ; bra if fault
ROM:F525		 comb			 ; elase clear flags
ROM:F526		 andb	 status_A0	 ; clear flags?
ROM:F528		 bra	 loc_F543
ROM:F52A ; ---------------------------------------------------------------------------
ROM:F52A
ROM:F52A loc_F52A:				 ; CODE	XREF: sub_F511+Aj
ROM:F52A		 pulx			 ; retrieve table pointer
ROM:F52B		 ldab	 status_A0
ROM:F52D		 orab	 #4
ROM:F52F		 stab	 status_A0	 ; set status_A0 bit2
ROM:F531		 rts
ROM:F532 ; ---------------------------------------------------------------------------
ROM:F532
ROM:F532 loc_F532:				 ; CODE	XREF: sub_F511+12j
ROM:F532		 ldaa	 TPS
ROM:F534		 cmpa	 0,x		 ; TPS - table value 1
ROM:F536		 bcc	 loc_F53D	 ; bra if TPS>table value
ROM:F538		 comb			 ; else	clear flags
ROM:F539		 andb	 status_A0
ROM:F53B		 bra	 loc_F543
ROM:F53D ; ---------------------------------------------------------------------------
ROM:F53D
ROM:F53D loc_F53D:				 ; CODE	XREF: sub_F511+25j
ROM:F53D		 cmpa	 1,x		 ; TPS - table value 2
ROM:F53F		 bls	 locret_F547	 ; bra if TPS< table value 2
ROM:F541		 orab	 status_A0	 ; else	set status_A0 bit0 or 1
ROM:F543
ROM:F543 loc_F543:				 ; CODE	XREF: sub_F511+Ej
ROM:F543					 ; sub_F511+17j ...
ROM:F543		 andb	 #$FB ;	'û'
ROM:F545		 stab	 status_A0	 ; clear status_A0 flags
ROM:F547
ROM:F547 locret_F547:				 ; CODE	XREF: sub_F511+2Ej
ROM:F547		 rts
ROM:F547 ; End of function sub_F511
ROM:F547
ROM:F548 ; ---------------------------------------------------------------------------
ROM:F548
ROM:F548 loc_F548:				 ; CODE	XREF: ROM:F0C0P
ROM:F548		 ldaa	 status_A0
ROM:F54A
ROM:F54A loc_F54A:				 ; CODE	XREF: sub_F4E5:loc_F4FAj
ROM:F54A		 bita	 #4
ROM:F54C		 beq	 loc_F553
ROM:F54E		 ldaa	 byte_E03C
ROM:F551		 bra	 loc_F5B7
ROM:F553 ; ---------------------------------------------------------------------------
ROM:F553
ROM:F553 loc_F553:				 ; CODE	XREF: ROM:F54Cj
ROM:F553		 ldab	 #2
ROM:F555		 ldx	 #$E030
ROM:F558		 bsr	 sub_F511	 ; sub_F511:
ROM:F558					 ;  called with	X = E00Eh, B=1h
ROM:F558					 ;  or		X = E030h, B=2h
ROM:F558					 ;  sets (fault?) flags	in status_A0
ROM:F55A		 ldd	 byte_86
ROM:F55C		 jsr	 sub_FE88	 ; sub_FE88:
ROM:F55C					 ;  jump to a table look up routine
ROM:F55C ; ---------------------------------------------------------------------------
ROM:F55F		 fcb   3
ROM:F560		 fcb $80 ; €
ROM:F561		 fcb   0
ROM:F562		 fcb $20
ROM:F563		 fcb   5
ROM:F564		 fcb $DD ; Ý
ROM:F565 ; ---------------------------------------------------------------------------
ROM:F565		 subd	 $8301
ROM:F568		 subb	 #$24 ;	'$'
ROM:F56A		 tap
ROM:F56B		 ldd	 byte_B3
ROM:F56D		 lsld
ROM:F56E		 lsld
ROM:F56F		 bra	 loc_F581
ROM:F571 ; ---------------------------------------------------------------------------
ROM:F571		 std	 byte_B3
ROM:F573		 subd	 #$300
ROM:F576		 bcc	 loc_F57F
ROM:F578		 ldd	 byte_B3
ROM:F57A		 lsld
ROM:F57B		 adda	 #7
ROM:F57D		 bra	 loc_F581
ROM:F57F ; ---------------------------------------------------------------------------
ROM:F57F
ROM:F57F loc_F57F:				 ; CODE	XREF: ROM:F576j
ROM:F57F		 adda	 #$D
ROM:F581
ROM:F581 loc_F581:				 ; CODE	XREF: ROM:F56Fj
ROM:F581					 ; ROM:F57Dj
ROM:F581		 std	 byte_B3
ROM:F583		 ldab	 status_A0
ROM:F585		 bitb	 #2
ROM:F587		 beq	 loc_F5A6
ROM:F589		 ldaa	 TPS
ROM:F58B		 jsr	 sub_FE7A
ROM:F58E		 adcb	 $11,x
ROM:F590		 ldab	 #$10
ROM:F592		 cmpa	 #$58 ;	'X'
ROM:F594		 bcc	 loc_F59A
ROM:F596		 aslb
ROM:F597		 mul
ROM:F598		 bra	 loc_F59F
ROM:F59A ; ---------------------------------------------------------------------------
ROM:F59A
ROM:F59A loc_F59A:				 ; CODE	XREF: ROM:F594j
ROM:F59A		 lsrb
ROM:F59B		 mul
ROM:F59C		 addd	 #$840
ROM:F59F
ROM:F59F loc_F59F:				 ; CODE	XREF: ROM:F598j
ROM:F59F		 std	 byte_AF	 ; temporary register (Heap)?
ROM:F5A1		 ldx	 #$E600
ROM:F5A4		 bra	 loc_F5B2
ROM:F5A6 ; ---------------------------------------------------------------------------
ROM:F5A6
ROM:F5A6 loc_F5A6:				 ; CODE	XREF: ROM:F587j
ROM:F5A6		 ldd	 MAPL_Tn	 ; MAPL_Tn =
ROM:F5A8		 aba
ROM:F5A9		 rora
ROM:F5AA		 jsr	 MAP_F1CC	 ; MAP_F1CC:
ROM:F5AA					 ; Always called before	a MAP table look up
ROM:F5AA					 ; call	with:
ROM:F5AA					 ;    X	= table	address
ROM:F5AA					 ;    A	= MAP value
ROM:F5AA					 ; returns:
ROM:F5AA					 ;    a	value in D
ROM:F5AA					 ;
ROM:F5AD		 std	 byte_AF	 ; temporary register (Heap)?
ROM:F5AF		 ldx	 #$E500
ROM:F5B2
ROM:F5B2 loc_F5B2:				 ; CODE	XREF: ROM:F5A4j
ROM:F5B2		 ldd	 byte_B3
ROM:F5B4		 jsr	 tableLU_3D	 ; tableLU_3D:
ROM:F5B4					 ; called with:
ROM:F5B4					 ; ??
ROM:F5B4					 ; called from:
ROM:F5B4					 ;  tableLU_3Da
ROM:F5B4					 ;  tableLU_3Db
ROM:F5B7
ROM:F5B7 loc_F5B7:				 ; CODE	XREF: ROM:F551j
ROM:F5B7		 staa	 byte_63	 ; from	LUT at E500
ROM:F5B9		 rts
ROM:F5BA ; ---------------------------------------------------------------------------
ROM:F5BA
ROM:F5BA loc_F5BA:				 ; CODE	XREF: sub_F0C7+23P
ROM:F5BA		 ldd	 byte_86
ROM:F5BC		 jsr	 sub_FE88	 ; sub_FE88:
ROM:F5BC					 ;  jump to a table look up routine
ROM:F5BF		 lsrd
ROM:F5BF ; ---------------------------------------------------------------------------
ROM:F5C0		 fcb   0
ROM:F5C1		 fcb   0
ROM:F5C2 ; ---------------------------------------------------------------------------
ROM:F5C2		 suba	 #5
ROM:F5C4		 ldx	 #$E1B0
ROM:F5C7		 jsr	 tableLU_2D
ROM:F5CA		 staa	 byte_68
ROM:F5CC		 psha
ROM:F5CD		 ldd	 dCAS_Count_T1
ROM:F5CF		 jsr	 loc_FF43+1
ROM:F5D2		 lsld
ROM:F5D3		 bcs	 loc_F5E0
ROM:F5D5		 lsld
ROM:F5D6		 bcs	 loc_F5E0
ROM:F5D8		 bmi	 loc_F5E0
ROM:F5DA		 addd	 VBatt_69	 ; from	the LUT	at E190
ROM:F5DC		 addd	 byte_6B
ROM:F5DE		 bpl	 loc_F5E3
ROM:F5E0
ROM:F5E0 loc_F5E0:				 ; CODE	XREF: ROM:F5D3j
ROM:F5E0					 ; ROM:F5D6j ...
ROM:F5E0		 ldd	 #$7FFF
ROM:F5E3
ROM:F5E3 loc_F5E3:				 ; CODE	XREF: ROM:F5DEj
ROM:F5E3		 std	 byte_66
ROM:F5E5		 rts
ROM:F5E6
ROM:F5E6 ; =============== S U B R O U T I N E =======================================
ROM:F5E6
ROM:F5E6 ; doTick_524ms:
ROM:F5E6 ; called from jmp_table1
ROM:F5E6 ; code	is present at EE63 so this executes
ROM:F5E6
ROM:F5E6 doTick_524ms:
ROM:F5E6
ROM:F5E6 ; FUNCTION CHUNK AT ROM:EE63 SIZE 00000043 BYTES
ROM:F5E6
ROM:F5E6		 ldaa	 loc_EE63
ROM:F5E9		 cmpa	 #$CC ;	'Ì'      ; check for code at EE63
ROM:F5EB		 bne	 locret_F5F0	 ; exit	if not present
ROM:F5ED		 jmp	 loc_EE63	 ; else	call code
ROM:F5F0 ; ---------------------------------------------------------------------------
ROM:F5F0
ROM:F5F0 locret_F5F0:				 ; CODE	XREF: doTick_524ms+5j
ROM:F5F0		 rts
ROM:F5F0 ; End of function doTick_524ms
ROM:F5F0
ROM:F5F1
ROM:F5F1 ; =============== S U B R O U T I N E =======================================
ROM:F5F1
ROM:F5F1 ; limits_F5F1:
ROM:F5F1 ; This	code appears to	check the ADC values against limits
ROM:F5F1 ; to check for	sensor faults
ROM:F5F1
ROM:F5F1 limits_F5F1:				 ; CODE	XREF: Get_MAP+BP
ROM:F5F1					 ; Get_MAP+28P	...
ROM:F5F1
ROM:F5F1 ; FUNCTION CHUNK AT ROM:EE40 SIZE 00000023 BYTES
ROM:F5F1
ROM:F5F1		 pshb
ROM:F5F2		 pshx
ROM:F5F3		 ldx	 #$E040		 ; point X to table
ROM:F5F6		 tst	 byte_A9	 ; a flag?
ROM:F5F9		 beq	 loc_F5FE	 ; bra if flag?	is zero
ROM:F5FB		 ldx	 #$E0C1		 ; else	point to other table
ROM:F5FE
ROM:F5FE loc_F5FE:				 ; CODE	XREF: limits_F5F1+8j
ROM:F5FE		 aslb
ROM:F5FF		 aslb			 ; B = B * 4
ROM:F600		 abx			 ; X = base address + (B*4)
ROM:F601		 cmpa	 0,x		 ; A - limit 1
ROM:F603		 bls	 loc_F62D	 ; bra if A<limit
ROM:F605		 cmpa	 1,x		 ; else	A - Limit 2
ROM:F607		 bcc	 loc_F62D	 ; bra if A>limit
ROM:F609		 ldab	 2,x		 ; else	get default value?
ROM:F60B		 stab	 byte_AF	 ;  default value to AF?
ROM:F60D		 pulx
ROM:F60E		 pulb
ROM:F60F		 pshx
ROM:F610		 ldx	 #$E780		 ; 16-bit table?
ROM:F613		 abx
ROM:F614		 abx			 ; 16-bit offset
ROM:F615		 ldab	 0,x
ROM:F617		 pulx
ROM:F618		 bitb	 byte_A4
ROM:F61A		 beq	 setToZero
ROM:F61C		 tst	 byte_A9
ROM:F61F		 beq	 loc_F62A	 ; return byte_AF in A
ROM:F621		 comb
ROM:F622		 andb	 byte_A4
ROM:F624		 stab	 byte_A4
ROM:F626
ROM:F626 setToZero:				 ; CODE	XREF: limits_F5F1+29j
ROM:F626		 clrb
ROM:F627		 stab	 0,x		 ; return a value in B
ROM:F629		 rts
ROM:F62A ; ---------------------------------------------------------------------------
ROM:F62A
ROM:F62A loc_F62A:				 ; CODE	XREF: limits_F5F1+2Ej
ROM:F62A		 ldaa	 byte_AF	 ; return byte_AF in A
ROM:F62C		 rts
ROM:F62D ; ---------------------------------------------------------------------------
ROM:F62D
ROM:F62D loc_F62D:				 ; CODE	XREF: limits_F5F1+12j
ROM:F62D					 ; limits_F5F1+16j
ROM:F62D		 jmp	 loc_EE40
ROM:F62D ; End of function limits_F5F1
ROM:F62D
ROM:F630
ROM:F630 ; =============== S U B R O U T I N E =======================================
ROM:F630
ROM:F630
ROM:F630 sub_F630:				 ; CODE	XREF: sub_F0C7+27P
ROM:F630		 sei
ROM:F631		 ldab	 byte_A2
ROM:F633		 bitb	 #4
ROM:F635		 beq	 loc_F64C
ROM:F637		 andb	 #$FB ;	'û'
ROM:F639		 stab	 byte_A2
ROM:F63B		 ldaa	 byte_A8
ROM:F63D		 bita	 #$10
ROM:F63F		 bne	 loc_F649
ROM:F641		 ldd	 #$2840
ROM:F644		 ldx	 #$9B ;	'›'
ROM:F647		 bsr	 sub_F660
ROM:F649
ROM:F649 loc_F649:				 ; CODE	XREF: sub_F630+Fj
ROM:F649		 sei
ROM:F64A		 ldab	 byte_A2
ROM:F64C
ROM:F64C loc_F64C:				 ; CODE	XREF: sub_F630+5j
ROM:F64C		 bitb	 #8
ROM:F64E		 beq	 loc_F681
ROM:F650		 andb	 #$F7 ;	'÷'
ROM:F652		 stab	 byte_A2
ROM:F654		 ldaa	 byte_A8
ROM:F656		 bita	 #$40 ;	'@'
ROM:F658		 bne	 loc_F681
ROM:F65A		 ldd	 #$2980
ROM:F65D		 ldx	 #$9C ;	'œ'
ROM:F65D ; End of function sub_F630
ROM:F65D
ROM:F660
ROM:F660 ; =============== S U B R O U T I N E =======================================
ROM:F660
ROM:F660
ROM:F660 sub_F660:				 ; CODE	XREF: sub_F630+17p
ROM:F660		 psha
ROM:F661		 ldaa	 #$80 ;	'€'
ROM:F663		 staa	 PIA_Result
ROM:F666		 pula
ROM:F667		 jsr	 PIA_F485	 ; PIA_F484:
ROM:F667					 ; Called with 27, 2A, 2B or 2C
ROM:F667					 ; returns a value in A
ROM:F66A		 cli
ROM:F66B		 beq	 loc_F679
ROM:F66D		 ldaa	 0,x
ROM:F66F		 inca
ROM:F670		 cmpa	 #5
ROM:F672		 bcs	 loc_F683
ROM:F674		 sei
ROM:F675		 orab	 byte_A4
ROM:F677		 bra	 loc_F67F
ROM:F679 ; ---------------------------------------------------------------------------
ROM:F679
ROM:F679 loc_F679:				 ; CODE	XREF: sub_F660+Bj
ROM:F679		 clr	 0,x
ROM:F67B		 sei
ROM:F67C		 comb
ROM:F67D		 andb	 byte_A4
ROM:F67F
ROM:F67F loc_F67F:				 ; CODE	XREF: sub_F660+17j
ROM:F67F		 stab	 byte_A4
ROM:F681
ROM:F681 loc_F681:				 ; CODE	XREF: sub_F630+1Ej
ROM:F681					 ; sub_F630+28j
ROM:F681		 cli
ROM:F682		 rts
ROM:F683 ; ---------------------------------------------------------------------------
ROM:F683
ROM:F683 loc_F683:				 ; CODE	XREF: sub_F660+12j
ROM:F683		 staa	 0,x
ROM:F685		 rts
ROM:F685 ; End of function sub_F660
ROM:F685
ROM:F686
ROM:F686 ; =============== S U B R O U T I N E =======================================
ROM:F686
ROM:F686 ; sub_F686:
ROM:F686 ; called with:
ROM:F686 ;	X = 99h, B=2
ROM:F686 ;   or	X = 9Ah, B=1
ROM:F686
ROM:F686 sub_F686:				 ; CODE	XREF: ROM:E825P
ROM:F686					 ; ROM:E91FP ...
ROM:F686		 stab	 byte_B7
ROM:F688		 tba
ROM:F689		 asla
ROM:F68A		 asla
ROM:F68B		 coma
ROM:F68C		 anda	 byte_A6
ROM:F68E		 staa	 byte_A6
ROM:F690		 clra
ROM:F691		 eorb	 #3
ROM:F693		 andb	 status_A3
ROM:F695		 bne	 loc_F6A2
ROM:F697		 bra	 loc_F69B
ROM:F699 ; ---------------------------------------------------------------------------
ROM:F699
ROM:F699 loc_F699:				 ; CODE	XREF: JT3_0+BP
ROM:F699					 ; JT3_0+11P
ROM:F699		 stab	 byte_B7
ROM:F69B
ROM:F69B loc_F69B:				 ; CODE	XREF: sub_F686+11j
ROM:F69B		 ldaa	 0,x
ROM:F69D		 inca
ROM:F69E		 cmpa	 #4
ROM:F6A0		 bcc	 loc_F6AF
ROM:F6A2
ROM:F6A2 loc_F6A2:				 ; CODE	XREF: sub_F686+Fj
ROM:F6A2		 staa	 0,x
ROM:F6A4
ROM:F6A4 loc_F6A4:				 ; CODE	XREF: sub_F686+33j
ROM:F6A4		 ldab	 status_A3
ROM:F6A6		 andb	 #$FC ;	'ü'
ROM:F6A8		 addb	 byte_B7
ROM:F6AA		 orab	 #4
ROM:F6AC		 stab	 status_A3
ROM:F6AE		 rts
ROM:F6AF ; ---------------------------------------------------------------------------
ROM:F6AF
ROM:F6AF loc_F6AF:				 ; CODE	XREF: sub_F686+1Aj
ROM:F6AF		 ldaa	 byte_B7
ROM:F6B1		 eora	 #3
ROM:F6B3		 asla
ROM:F6B4		 asla
ROM:F6B5		 oraa	 byte_A6
ROM:F6B7		 staa	 byte_A6
ROM:F6B9		 bra	 loc_F6A4
ROM:F6B9 ; End of function sub_F686
ROM:F6B9
ROM:F6BB
ROM:F6BB ; =============== S U B R O U T I N E =======================================
ROM:F6BB
ROM:F6BB
ROM:F6BB sub_F6BB:				 ; CODE	XREF: ROM:F741P
ROM:F6BB					 ; ROM:F778P
ROM:F6BB		 ldab	 status_A3
ROM:F6BD		 bitb	 #8
ROM:F6BF		 bne	 loc_F6CB
ROM:F6C1		 clra
ROM:F6C2		 clrb
ROM:F6C3		 std	 byte_88
ROM:F6C5		 staa	 byte_8A
ROM:F6C7		 staa	 byte_AD
ROM:F6C9		 bra	 loc_F6EB
ROM:F6CB ; ---------------------------------------------------------------------------
ROM:F6CB
ROM:F6CB loc_F6CB:				 ; CODE	XREF: sub_F6BB+4j
ROM:F6CB		 andb	 #$F7 ;	'÷'
ROM:F6CD		 stab	 status_A3
ROM:F6CF		 cmpa	 byte_84
ROM:F6D1		 beq	 loc_F6F2
ROM:F6D3		 deca
ROM:F6D4		 cmpa	 byte_84
ROM:F6D6		 bne	 loc_F6DE
ROM:F6D8		 ldab	 status_A3
ROM:F6DA		 bitb	 #$20 ;	' '
ROM:F6DC		 bne	 locret_F6FB
ROM:F6DE
ROM:F6DE loc_F6DE:				 ; CODE	XREF: sub_F6BB+1Bj
ROM:F6DE		 inca
ROM:F6DF		 staa	 byte_84	 ; inc byte_84
ROM:F6E1		 ldaa	 count_98
ROM:F6E3		 inca
ROM:F6E4		 cmpa	 #4
ROM:F6E6		 bcc	 loc_F6EB
ROM:F6E8		 staa	 count_98
ROM:F6EA		 rts
ROM:F6EB ; ---------------------------------------------------------------------------
ROM:F6EB
ROM:F6EB loc_F6EB:				 ; CODE	XREF: sub_F6BB+Ej
ROM:F6EB					 ; sub_F6BB+2Bj
ROM:F6EB		 ldab	 byte_A6
ROM:F6ED		 orab	 #1
ROM:F6EF		 stab	 byte_A6
ROM:F6F1		 rts
ROM:F6F2 ; ---------------------------------------------------------------------------
ROM:F6F2
ROM:F6F2 loc_F6F2:				 ; CODE	XREF: sub_F6BB+16j
ROM:F6F2		 ldab	 byte_A6
ROM:F6F4		 andb	 #$FE ;	'þ'
ROM:F6F6		 stab	 byte_A6
ROM:F6F8		 clrb
ROM:F6F9		 stab	 count_98
ROM:F6FB
ROM:F6FB locret_F6FB:				 ; CODE	XREF: sub_F6BB+21j
ROM:F6FB		 rts
ROM:F6FB ; End of function sub_F6BB
ROM:F6FB
ROM:F6FC
ROM:F6FC ; =============== S U B R O U T I N E =======================================
ROM:F6FC
ROM:F6FC ; sub_F6FC:
ROM:F6FC ; This	may be the cylinder counter
ROM:F6FC
ROM:F6FC sub_F6FC:				 ; CODE	XREF: ROM:E828P
ROM:F6FC					 ; ROM:E922P ...
ROM:F6FC		 ldaa	 count_A1	 ; get bank counter
ROM:F6FE		 bita	 #2		 ; test	bit1 (10h=4)
ROM:F700		 bne	 locret_F705	 ; if not 4 skip ?????
ROM:F702		 inca			 ; else	increment count
ROM:F703		 staa	 count_A1	 ; and update
ROM:F705
ROM:F705 locret_F705:				 ; CODE	XREF: sub_F6FC+4j
ROM:F705		 rts
ROM:F705 ; End of function sub_F6FC
ROM:F705
ROM:F706 ; ---------------------------------------------------------------------------
ROM:F706		 ldaa	 PORT2
ROM:F708		 oraa	 #8
ROM:F70A		 staa	 PORT2		 ; toggle P23 -	nIRQ?
ROM:F70C		 anda	 #$F7 ;	'÷'
ROM:F70E		 staa	 PORT2		 ; toggle P23 -	nIRQ?
ROM:F710		 ldab	 status_A3
ROM:F712		 ldx	 byte_86
ROM:F714		 cpx	 #$180
ROM:F717		 bcs	 loc_F721+1
ROM:F719		 ldaa	 TCSR2
ROM:F71B		 bita	 #$80 ;	'€'
ROM:F71D		 beq	 loc_F721+1
ROM:F71F		 orab	 #$20 ;	' '
ROM:F721
ROM:F721 loc_F721:				 ; CODE	XREF: ROM:F717j
ROM:F721					 ; ROM:F71Dj
ROM:F721		 cpx	 #$C4DF
ROM:F724		 stab	 status_A3
ROM:F726		 ldab	 #1
ROM:F728		 ldx	 #$9A ;	'š'
ROM:F72B		 jsr	 sub_F686	 ; sub_F686:
ROM:F72B					 ; called with:
ROM:F72B					 ;	X = 99h, B=2
ROM:F72B					 ;   or	X = 9Ah, B=1
ROM:F72E		 bsr	 sub_F6FC	 ; sub_F6FC:
ROM:F72E					 ; This	may be the cylinder counter
ROM:F730		 bita	 #1
ROM:F732		 beq	 loc_F73F
ROM:F734		 ldaa	 status_A3
ROM:F736		 bita	 #$80 ;	'€'
ROM:F738		 beq	 locret_F73E
ROM:F73A		 ldaa	 #$F
ROM:F73C		 staa	 byte_84	 ; byte_84 = Fh
ROM:F73E
ROM:F73E locret_F73E:				 ; CODE	XREF: ROM:F738j
ROM:F73E		 rti
ROM:F73F ; ---------------------------------------------------------------------------
ROM:F73F
ROM:F73F loc_F73F:				 ; CODE	XREF: ROM:F732j
ROM:F73F		 ldaa	 #$F
ROM:F741		 jsr	 sub_F6BB
ROM:F744		 rti
ROM:F745 ; ---------------------------------------------------------------------------
ROM:F745		 ldaa	 TCSR1
ROM:F747		 bita	 #$80 ;	'€'      ; test IC1 IF
ROM:F749		 beq	 loc_F77C	 ; bra if zero?
ROM:F74B		 ldd	 ICR1H
ROM:F74D		 ldab	 status_A3
ROM:F74F		 ldaa	 TCSR2
ROM:F751		 bita	 #$80 ;	'€'      ; test IC2 IF
ROM:F753		 beq	 IC2_F757?+1	 ; bra if ??
ROM:F755		 orab	 #$20 ;	' '
ROM:F757
ROM:F757 IC2_F757?:				 ; CODE	XREF: ROM:F753j
ROM:F757		 cpx	 #$C4DF
ROM:F75A		 stab	 status_A3
ROM:F75C		 ldab	 #2
ROM:F75E		 ldx	 #$99 ;	'™'
ROM:F761		 jsr	 sub_F686	 ; sub_F686:
ROM:F761					 ; called with:
ROM:F761					 ;	X = 99h, B=2
ROM:F761					 ;   or	X = 9Ah, B=1
ROM:F764		 jsr	 sub_F6FC	 ; sub_F6FC:
ROM:F764					 ; This	may be the cylinder counter
ROM:F767		 bita	 #1
ROM:F769		 beq	 loc_F776
ROM:F76B		 ldaa	 status_A3
ROM:F76D		 bita	 #$80 ;	'€'
ROM:F76F		 beq	 locret_F77B
ROM:F771		 ldaa	 #7
ROM:F773		 staa	 byte_84	 ; byte_84 = 7
ROM:F775		 rti
ROM:F776 ; ---------------------------------------------------------------------------
ROM:F776
ROM:F776 loc_F776:				 ; CODE	XREF: ROM:F769j
ROM:F776		 ldaa	 #7
ROM:F778		 jsr	 sub_F6BB
ROM:F77B
ROM:F77B locret_F77B:				 ; CODE	XREF: ROM:F76Fj
ROM:F77B		 rti
ROM:F77C ; ---------------------------------------------------------------------------
ROM:F77C
ROM:F77C loc_F77C:				 ; CODE	XREF: ROM:E906J
ROM:F77C					 ; ROM:F749j
ROM:F77C		 ldab	 status_A3
ROM:F77E		 orab	 #8
ROM:F780		 stab	 status_A3
ROM:F782		 ldaa	 TCSR2
ROM:F784		 bita	 #$80 ;	'€'
ROM:F786		 beq	 locret_F799
ROM:F788		 ldaa	 status_A3
ROM:F78A		 bita	 #$80 ;	'€'
ROM:F78C		 bne	 loc_F79A
ROM:F78E		 oraa	 #$80 ;	'€'
ROM:F790		 staa	 status_A3
ROM:F792		 ldx	 ICR2H
ROM:F794		 stx	 CAS_Count
ROM:F796		 clra
ROM:F797		 staa	 count_4ms_B
ROM:F799
ROM:F799 locret_F799:				 ; CODE	XREF: ROM:F786j
ROM:F799					 ; ROM:F7F8j ...
ROM:F799		 rti
ROM:F79A ; ---------------------------------------------------------------------------
ROM:F79A
ROM:F79A loc_F79A:				 ; CODE	XREF: ROM:F78Cj
ROM:F79A		 ldd	 ICR2H
ROM:F79C		 subd	 CAS_Count
ROM:F79E		 std	 dCAS_Count
ROM:F7A0		 ldx	 ICR2H
ROM:F7A2		 stx	 CAS_Count
ROM:F7A4		 ldx	 byte_AA
ROM:F7A6		 bmi	 loc_F7B5
ROM:F7A8		 cpx	 #$40 ;	'@'
ROM:F7AB		 beq	 loc_F7B2
ROM:F7AD		 jsr	 sub_FCA7
ROM:F7B0		 bra	 loc_F7B5
ROM:F7B2 ; ---------------------------------------------------------------------------
ROM:F7B2
ROM:F7B2 loc_F7B2:				 ; CODE	XREF: ROM:F7ABj
ROM:F7B2		 jsr	 sub_FCEF
ROM:F7B5
ROM:F7B5 loc_F7B5:				 ; CODE	XREF: ROM:F7A6j
ROM:F7B5					 ; ROM:F7B0j
ROM:F7B5		 jsr	 sub_FD60
ROM:F7B8
ROM:F7B8 ; count_4ms_B must be between 61.44ms and
ROM:F7B8 ; 81.92ms o0r count_4ms_B gets	reset??
ROM:F7B8		 ldab	 count_4ms_B
ROM:F7BA		 cmpb	 #$E
ROM:F7BC		 bls	 loc_F7CB
ROM:F7BE		 cmpb	 #$13
ROM:F7C0		 bhi	 loc_F7C6
ROM:F7C2		 ldaa	 dCAS_Count	 ; test	for RPM	up or down
ROM:F7C4		 bmi	 loc_F7CB
ROM:F7C6
ROM:F7C6 loc_F7C6:				 ; CODE	XREF: ROM:F7C0j
ROM:F7C6		 ldd	 #$FFFF
ROM:F7C9		 std	 dCAS_Count
ROM:F7CB
ROM:F7CB loc_F7CB:				 ; CODE	XREF: ROM:F7BCj
ROM:F7CB					 ; ROM:F7C4j
ROM:F7CB		 clra
ROM:F7CC		 staa	 count_4ms_B
ROM:F7CE		 ldd	 dCAS_Count
ROM:F7D0		 lsrd
ROM:F7D1		 addd	 byte_8C
ROM:F7D3		 bcc	 loc_F7D8
ROM:F7D5		 inc	 byte_8B
ROM:F7D8
ROM:F7D8 loc_F7D8:				 ; CODE	XREF: ROM:F7D3j
ROM:F7D8		 std	 byte_8C
ROM:F7DA		 inc	 byte_AD
ROM:F7DD		 ldd	 dCAS_Count
ROM:F7DF		 lsld
ROM:F7E0		 bcc	 loc_F7E5
ROM:F7E2		 ldd	 #$FFFF
ROM:F7E5
ROM:F7E5 loc_F7E5:				 ; CODE	XREF: ROM:F7E0j
ROM:F7E5		 std	 dCAS_Count_T1
ROM:F7E7		 ldab	 byte_A2
ROM:F7E9		 ldaa	 count_A1
ROM:F7EB		 bita	 #3
ROM:F7ED		 bne	 loc_F805
ROM:F7EF		 ldaa	 byte_C4
ROM:F7F1		 inca
ROM:F7F2		 cmpa	 #$24 ;	'$'
ROM:F7F4		 bcc	 loc_F7FA
ROM:F7F6		 staa	 byte_C4
ROM:F7F8		 bra	 locret_F799
ROM:F7FA ; ---------------------------------------------------------------------------
ROM:F7FA
ROM:F7FA loc_F7FA:				 ; CODE	XREF: ROM:F7F4j
ROM:F7FA		 ldaa	 byte_A6
ROM:F7FC		 oraa	 #$C
ROM:F7FE		 staa	 byte_A6
ROM:F800		 clra
ROM:F801		 staa	 count_A1
ROM:F803		 bra	 locret_F799
ROM:F805 ; ---------------------------------------------------------------------------
ROM:F805
ROM:F805 loc_F805:				 ; CODE	XREF: ROM:F7EDj
ROM:F805		 clr	 byte_C4
ROM:F808		 bita	 #2
ROM:F80A		 beq	 loc_F872
ROM:F80C		 ldx	 byte_86
ROM:F80E		 ldaa	 byte_84
ROM:F810		 cmpa	 #$F
ROM:F812		 bne	 loc_F853
ROM:F814		 cpx	 word_E025
ROM:F817		 bcc	 loc_F82A
ROM:F819		 ldaa	 byte_A4
ROM:F81B		 bita	 #$C0 ;	'À'
ROM:F81D		 bne	 loc_F82A
ROM:F81F		 cpx	 word_E027
ROM:F822		 bcc	 loc_F830
ROM:F824		 ldaa	 byte_AC
ROM:F826		 anda	 #$7F ;	''
ROM:F828		 bra	 loc_F82E
ROM:F82A ; ---------------------------------------------------------------------------
ROM:F82A
ROM:F82A loc_F82A:				 ; CODE	XREF: ROM:F817j
ROM:F82A					 ; ROM:F81Dj
ROM:F82A		 ldaa	 byte_AC
ROM:F82C		 oraa	 #$80 ;	'€'
ROM:F82E
ROM:F82E loc_F82E:				 ; CODE	XREF: ROM:F828j
ROM:F82E		 staa	 byte_AC
ROM:F830
ROM:F830 loc_F830:				 ; CODE	XREF: ROM:F822j
ROM:F830		 ldaa	 byte_84
ROM:F832		 psha
ROM:F833		 ldaa	 dCAS_Count
ROM:F835		 cmpa	 #$A
ROM:F837		 pula
ROM:F838		 bcc	 loc_F851
ROM:F83A		 cpx	 word_E004
ROM:F83D		 bcs	 loc_F84C
ROM:F83F		 bitb	 #$40 ;	'@'
ROM:F841		 bne	 loc_F853
ROM:F843		 orab	 #$40 ;	'@'
ROM:F845		 stab	 byte_A2
ROM:F847		 jsr	 sub_FA71
ROM:F84A		 bra	 loc_F87E
ROM:F84C ; ---------------------------------------------------------------------------
ROM:F84C
ROM:F84C loc_F84C:				 ; CODE	XREF: ROM:F83Dj
ROM:F84C		 cpx	 word_E006
ROM:F84F		 bcc	 loc_F853
ROM:F851
ROM:F851 loc_F851:				 ; CODE	XREF: ROM:F838j
ROM:F851		 andb	 #$BF ;	'¿'
ROM:F853
ROM:F853 loc_F853:				 ; CODE	XREF: ROM:F812j
ROM:F853					 ; ROM:F841j ...
ROM:F853		 tsta
ROM:F854		 beq	 loc_F85C
ROM:F856		 bitb	 #$80 ;	'€'
ROM:F858		 beq	 loc_F86C
ROM:F85A		 bra	 loc_F87C
ROM:F85C ; ---------------------------------------------------------------------------
ROM:F85C
ROM:F85C loc_F85C:				 ; CODE	XREF: ROM:F854j
ROM:F85C		 cpx	 word_E021
ROM:F85F		 bcs	 loc_F865
ROM:F861		 orab	 #$20 ;	' '
ROM:F863		 bra	 loc_F87A
ROM:F865 ; ---------------------------------------------------------------------------
ROM:F865
ROM:F865 loc_F865:				 ; CODE	XREF: ROM:F85Fj
ROM:F865		 cpx	 word_E023
ROM:F868		 bcc	 loc_F86C
ROM:F86A		 andb	 #$DF ;	'ß'
ROM:F86C
ROM:F86C loc_F86C:				 ; CODE	XREF: ROM:F858j
ROM:F86C					 ; ROM:F868j
ROM:F86C		 ldaa	 dCAS_Count
ROM:F86E		 cmpa	 #$75 ;	'u'
ROM:F870		 bcs	 loc_F876
ROM:F872
ROM:F872 loc_F872:				 ; CODE	XREF: ROM:F80Aj
ROM:F872		 orab	 #$80 ;	'€'
ROM:F874		 bra	 loc_F87C
ROM:F876 ; ---------------------------------------------------------------------------
ROM:F876
ROM:F876 loc_F876:				 ; CODE	XREF: ROM:F870j
ROM:F876		 cmpa	 #$6D ;	'm'
ROM:F878		 bcc	 loc_F87C
ROM:F87A
ROM:F87A loc_F87A:				 ; CODE	XREF: ROM:F863j
ROM:F87A		 andb	 #$7F ;	''
ROM:F87C
ROM:F87C loc_F87C:				 ; CODE	XREF: ROM:F85Aj
ROM:F87C					 ; ROM:F874j ...
ROM:F87C		 stab	 byte_A2
ROM:F87E
ROM:F87E loc_F87E:				 ; CODE	XREF: ROM:F84Aj
ROM:F87E		 clrb
ROM:F87F		 stab	 byte_50
ROM:F881		 ldaa	 byte_84
ROM:F883		 inca
ROM:F884		 cmpa	 #$10
ROM:F886		 bcs	 loc_F893
ROM:F888		 clra
ROM:F889		 ldab	 byte_A6
ROM:F88B		 andb	 #$C
ROM:F88D		 eorb	 #$C
ROM:F88F		 bne	 loc_F893
ROM:F891		 ldaa	 #$10
ROM:F893
ROM:F893 loc_F893:				 ; CODE	XREF: ROM:F886j
ROM:F893					 ; ROM:F88Fj
ROM:F893		 staa	 byte_84	 ; byte_84=10h=16
ROM:F895		 ldab	 byte_A6
ROM:F897		 bitb	 #1
ROM:F899		 beq	 loc_F89C
ROM:F89B		 rti
ROM:F89C ; ---------------------------------------------------------------------------
ROM:F89C
ROM:F89C loc_F89C:				 ; CODE	XREF: ROM:F899j
ROM:F89C		 cmpa	 byte_E02A
ROM:F89F		 bne	 loc_F8A5
ROM:F8A1		 ldab	 MAPL
ROM:F8A3		 stab	 MAPL_Tn	 ; MAPL_Tn =
ROM:F8A5
ROM:F8A5 loc_F8A5:				 ; CODE	XREF: ROM:F89Fj
ROM:F8A5		 cmpa	 byte_E029
ROM:F8A8		 bne	 loc_F8AE
ROM:F8AA		 ldab	 MAPR
ROM:F8AC		 stab	 MAPR_T1
ROM:F8AE
ROM:F8AE loc_F8AE:				 ; CODE	XREF: ROM:F8A8j
ROM:F8AE		 ldab	 byte_A2
ROM:F8B0		 bitb	 #$20 ;	' '
ROM:F8B2		 beq	 loc_F8CF
ROM:F8B4		 ldx	 #$E008
ROM:F8B7		 cmpa	 0,x
ROM:F8B9		 beq	 loc_F8BF
ROM:F8BB		 cmpa	 1,x
ROM:F8BD		 bne	 loc_F8C4
ROM:F8BF
ROM:F8BF loc_F8BF:				 ; CODE	XREF: ROM:F8B9j
ROM:F8BF		 jsr	 sub_FA71
ROM:F8C2		 bra	 loc_F8CF
ROM:F8C4 ; ---------------------------------------------------------------------------
ROM:F8C4
ROM:F8C4 loc_F8C4:				 ; CODE	XREF: ROM:F8BDj
ROM:F8C4		 cmpa	 2,x
ROM:F8C6		 beq	 loc_F8CC
ROM:F8C8		 cmpa	 3,x
ROM:F8CA		 bne	 loc_F8CF
ROM:F8CC
ROM:F8CC loc_F8CC:				 ; CODE	XREF: ROM:F8C6j
ROM:F8CC		 jsr	 sub_FA96
ROM:F8CF
ROM:F8CF loc_F8CF:				 ; CODE	XREF: ROM:F8B2j
ROM:F8CF					 ; ROM:F8C2j ...
ROM:F8CF		 ldaa	 byte_84
ROM:F8D1		 cmpa	 byte_E02C	 ; =3h
ROM:F8D4		 bne	 loc_F8E1	 ; Bh
ROM:F8D6		 ldx	 #$4E ;	'N'
ROM:F8D9		 ldd	 #$1004
ROM:F8DC		 jsr	 sub_FB39	 ; sub_FB39:
ROM:F8DC					 ;  called with:
ROM:F8DC					 ;    A	= ?
ROM:F8DC					 ;    B	= ?
ROM:F8DC					 ;    X	= ?
ROM:F8DF		 ldaa	 byte_84
ROM:F8E1
ROM:F8E1 loc_F8E1:				 ; CODE	XREF: ROM:F8D4j
ROM:F8E1		 cmpa	 byte_E02B	 ; Bh
ROM:F8E4		 bne	 loc_F8EF
ROM:F8E6		 ldx	 #$46 ;	'F'
ROM:F8E9		 ldd	 #$4008
ROM:F8EC		 jsr	 sub_FB39	 ; sub_FB39:
ROM:F8EC					 ;  called with:
ROM:F8EC					 ;    A	= ?
ROM:F8EC					 ;    B	= ?
ROM:F8EC					 ;    X	= ?
ROM:F8EF
ROM:F8EF loc_F8EF:				 ; CODE	XREF: ROM:F8E4j
ROM:F8EF		 ldab	 byte_84
ROM:F8F1		 aslb			 ; B*2
ROM:F8F2		 ldx	 #$F8FA		 ; JMP_TBL3
ROM:F8F5		 abx
ROM:F8F6		 ldx	 0,x
ROM:F8F8		 jmp	 0,x		 ; jump	to code	pointed	to from	F8FA
ROM:F8F8 ; ---------------------------------------------------------------------------
ROM:F8FA JMP_TBL3:
ROM:F8FA 16 address jump table
ROM:F8FA
ROM:F8FA JMP_TBL3:	 fdb $F91D		 ; adcb	is one byte!!!!
ROM:F8FC		 fdb $F9C7		 ; JT3_1
ROM:F8FE		 fdb $F9DC		 ; JT3_2
ROM:F900		 fdb $F9E2		 ; JT3_3
ROM:F902		 fdb $F9FA		 ; should be F9EB????
ROM:F904		 fdb $FA56		 ; JT3_5
ROM:F906		 fdb $FA56		 ; JT3_5 (2)
ROM:F908		 fdb $FA5C		 ; JT3_6
ROM:F90A		 fdb $FA64		 ; JT3_7
ROM:F90C		 fdb $F9C7		 ; JT3_1 (2)
ROM:F90E		 fdb $F9DC		 ; JT3_2 (2)
ROM:F910		 fdb $F9E2		 ; JT3_3 (2)
ROM:F912		 fdb $F9EB		 ; JT3_4?
ROM:F914		 fdb $FA56		 ; JT3_5 (3)
ROM:F916		 fdb $FA56		 ; JT3_5 (4)
ROM:F918		 fdb $FA5C		 ; JT3_6 (2)
ROM:F91A		 fdb $F91C		 ; rti
ROM:F91C ; ---------------------------------------------------------------------------
ROM:F91C
ROM:F91C JT3_done:
ROM:F91C		 rti
ROM:F91D
ROM:F91D ; =============== S U B R O U T I N E =======================================
ROM:F91D
ROM:F91D
ROM:F91D JT3_0:
ROM:F91D
ROM:F91D ; FUNCTION CHUNK AT ROM:FAE9 SIZE 0000001D BYTES
ROM:F91D
ROM:F91D		 ldaa	 status_A3
ROM:F91F		 bita	 #4
ROM:F921		 bne	 loc_F933
ROM:F923		 ldx	 #$99 ;	'™'
ROM:F926		 ldab	 #2
ROM:F928		 jsr	 loc_F699
ROM:F92B		 inx
ROM:F92C		 ldab	 #1
ROM:F92E		 jsr	 loc_F699
ROM:F931		 ldaa	 status_A3
ROM:F933
ROM:F933 loc_F933:				 ; CODE	XREF: JT3_0+4j
ROM:F933		 anda	 #$FB ;	'û'
ROM:F935		 staa	 status_A3
ROM:F937		 ldaa	 byte_A2
ROM:F939		 bita	 #$20 ;	' '
ROM:F93B		 beq	 loc_F942
ROM:F93D		 jsr	 sub_FAC9
ROM:F940		 bra	 loc_F945
ROM:F942 ; ---------------------------------------------------------------------------
ROM:F942
ROM:F942 loc_F942:				 ; CODE	XREF: JT3_0+1Ej
ROM:F942		 jsr	 sub_FABB
ROM:F945
ROM:F945 loc_F945:				 ; CODE	XREF: JT3_0+23j
ROM:F945		 ldaa	 #8
ROM:F947
ROM:F947 loc_F947:				 ; CODE	XREF: JT3_7+AJ
ROM:F947		 staa	 byte_4D
ROM:F949		 ldaa	 byte_9E
ROM:F94B		 anda	 #$CC ;	'Ì'
ROM:F94D		 staa	 byte_9E
ROM:F94F		 ldab	 byte_84
ROM:F951		 bne	 loc_F995
ROM:F953		 ldaa	 byte_A2
ROM:F955		 bita	 #$40 ;	'@'
ROM:F957		 beq	 loc_F995
ROM:F959		 stab	 byte_B7
ROM:F95B		 jsr	 sub_FD60
ROM:F95E		 ldx	 #$40 ;	'@'
ROM:F961		 jsr	 sub_FBC8
ROM:F964		 std	 byte_B5
ROM:F966		 subd	 word_EE06
ROM:F969		 bcs	 loc_F976
ROM:F96B
ROM:F96B loc_F96B:				 ; CODE	XREF: JT3_0+55j
ROM:F96B		 subd	 dCAS_Count
ROM:F96D		 bcs	 loc_F974
ROM:F96F		 inc	 byte_B7
ROM:F972		 bra	 loc_F96B
ROM:F974 ; ---------------------------------------------------------------------------
ROM:F974
ROM:F974 loc_F974:				 ; CODE	XREF: JT3_0+50j
ROM:F974		 addd	 dCAS_Count
ROM:F976
ROM:F976 loc_F976:				 ; CODE	XREF: JT3_0+4Cj
ROM:F976		 addd	 word_EE06
ROM:F979		 std	 byte_BC
ROM:F97B		 ldaa	 byte_B7
ROM:F97D		 staa	 byte_BB
ROM:F97F		 bne	 loc_F99C
ROM:F981		 adda	 #4
ROM:F983		 staa	 byte_BB
ROM:F985		 ldaa	 byte_A8
ROM:F987		 cmpa	 #$50 ;	'P'
ROM:F989		 beq	 loc_F990
ROM:F98B		 jsr	 sub_FB95
ROM:F98E		 bra	 loc_F9BE
ROM:F990 ; ---------------------------------------------------------------------------
ROM:F990
ROM:F990 loc_F990:				 ; CODE	XREF: JT3_0+6Cj
ROM:F990		 jsr	 sub_FBB3
ROM:F993		 bra	 loc_F9BE
ROM:F995 ; ---------------------------------------------------------------------------
ROM:F995
ROM:F995 loc_F995:				 ; CODE	XREF: JT3_0+34j
ROM:F995					 ; JT3_0+3Aj
ROM:F995		 ldaa	 byte_A2
ROM:F997		 bpl	 loc_F99F
ROM:F999		 jsr	 loc_FAA8
ROM:F99C
ROM:F99C loc_F99C:				 ; CODE	XREF: JT3_0+62j
ROM:F99C		 jmp	 loc_FAEB
ROM:F99F ; ---------------------------------------------------------------------------
ROM:F99F
ROM:F99F loc_F99F:				 ; CODE	XREF: JT3_0+7Aj
ROM:F99F					 ; JT3_0+C1j ...
ROM:F99F		 ldx	 #$40 ;	'@'
ROM:F9A2		 ldaa	 byte_A2
ROM:F9A4		 bita	 #$40 ;	'@'
ROM:F9A6		 beq	 loc_F9BB
ROM:F9A8		 ldaa	 byte_BB
ROM:F9AA		 cmpa	 byte_84
ROM:F9AC		 bne	 loc_F9C4
ROM:F9AE		 adda	 #4
ROM:F9B0		 staa	 byte_BB
ROM:F9B2		 ldd	 byte_BC
ROM:F9B4		 std	 byte_B5
ROM:F9B6		 jsr	 sub_FBB3
ROM:F9B9		 bra	 loc_F9BE
ROM:F9BB ; ---------------------------------------------------------------------------
ROM:F9BB
ROM:F9BB loc_F9BB:				 ; CODE	XREF: JT3_0+89j
ROM:F9BB		 jsr	 sub_FB84
ROM:F9BE
ROM:F9BE loc_F9BE:				 ; CODE	XREF: JT3_0+71j
ROM:F9BE					 ; JT3_0+76j ...
ROM:F9BE		 ldx	 #$48 ;	'H'
ROM:F9C1		 jmp	 loc_FA2F
ROM:F9C4 ; ---------------------------------------------------------------------------
ROM:F9C4
ROM:F9C4 loc_F9C4:				 ; CODE	XREF: JT3_0+8Fj
ROM:F9C4					 ; JT3_0+C3j ...
ROM:F9C4		 jmp	 loc_FAEB
ROM:F9C7 ; ---------------------------------------------------------------------------
ROM:F9C7
ROM:F9C7 JT3_1:
ROM:F9C7		 ldab	 byte_AC
ROM:F9C9		 ldaa	 count_A1
ROM:F9CB		 bita	 #2
ROM:F9CD		 beq	 loc_F9D5
ROM:F9CF		 ldaa	 status_A0
ROM:F9D1		 bita	 #$40 ;	'@'
ROM:F9D3		 bne	 loc_F9D7+1
ROM:F9D5
ROM:F9D5 loc_F9D5:				 ; CODE	XREF: JT3_0+B0j
ROM:F9D5		 andb	 #$BF ;	'¿'
ROM:F9D7
ROM:F9D7 loc_F9D7:				 ; CODE	XREF: JT3_0+B6j
ROM:F9D7		 cpx	 #$CA40
ROM:F9DA		 stab	 byte_AC
ROM:F9DC
ROM:F9DC JT3_2:
ROM:F9DC		 ldaa	 byte_A2
ROM:F9DE		 bpl	 loc_F99F
ROM:F9E0		 bra	 loc_F9C4
ROM:F9E2 ; ---------------------------------------------------------------------------
ROM:F9E2
ROM:F9E2 JT3_3:
ROM:F9E2		 ldaa	 byte_A2
ROM:F9E4		 bpl	 loc_F99F
ROM:F9E6		 jsr	 sub_FA71
ROM:F9E9		 bra	 loc_F9C4
ROM:F9EB ; ---------------------------------------------------------------------------
ROM:F9EB
ROM:F9EB JT3_4?:
ROM:F9EB		 ldaa	 dCAS_Count
ROM:F9ED		 cmpa	 #6		 ; byte_7E - 6
ROM:F9EF		 bcc	 loc_F9F7	 ; bra if byte_7E < 6
ROM:F9F1		 ldaa	 PORT2		 ; else	toggle watchdog
ROM:F9F3		 eora	 #$10
ROM:F9F5		 staa	 PORT2		 ; toggle watchdog
ROM:F9F7
ROM:F9F7 loc_F9F7:				 ; CODE	XREF: JT3_0+D2j
ROM:F9F7		 ldaa	 #4
ROM:F9F9		 cpx	 #$860C
ROM:F9FC		 staa	 byte_45
ROM:F9FE		 ldaa	 byte_9E
ROM:FA00		 anda	 #$33 ;	'3'
ROM:FA02		 staa	 byte_9E
ROM:FA04		 ldaa	 byte_A2
ROM:FA06		 bpl	 loc_FA0D
ROM:FA08		 jsr	 loc_FA83
ROM:FA0B		 bra	 loc_F9C4
ROM:FA0D ; ---------------------------------------------------------------------------
ROM:FA0D
ROM:FA0D loc_FA0D:				 ; CODE	XREF: JT3_0+E9j
ROM:FA0D					 ; JT3_5+2j ...
ROM:FA0D		 ldx	 #$48 ;	'H'
ROM:FA10		 ldaa	 byte_A2
ROM:FA12		 bita	 #$40 ;	'@'
ROM:FA14		 beq	 loc_FA29
ROM:FA16		 ldaa	 byte_BB
ROM:FA18		 cmpa	 byte_84
ROM:FA1A		 bne	 loc_FA53
ROM:FA1C		 adda	 #4
ROM:FA1E		 staa	 byte_BB
ROM:FA20		 ldd	 byte_BC
ROM:FA22		 std	 byte_B5
ROM:FA24		 jsr	 sub_FBB3
ROM:FA27		 bra	 loc_FA2C
ROM:FA29 ; ---------------------------------------------------------------------------
ROM:FA29
ROM:FA29 loc_FA29:				 ; CODE	XREF: JT3_0+F7j
ROM:FA29		 jsr	 sub_FB84
ROM:FA2C
ROM:FA2C loc_FA2C:				 ; CODE	XREF: JT3_0+10Aj
ROM:FA2C		 ldx	 #$40 ;	'@'
ROM:FA2F
ROM:FA2F loc_FA2F:				 ; CODE	XREF: JT3_0+A4J
ROM:FA2F		 ldaa	 byte_50
ROM:FA31		 beq	 loc_FA53
ROM:FA33		 ldaa	 byte_A2
ROM:FA35		 bita	 #$20 ;	' '
ROM:FA37		 bne	 loc_FA50
ROM:FA39		 pshx
ROM:FA3A		 jsr	 sub_FB26
ROM:FA3D		 pulx
ROM:FA3E		 clra
ROM:FA3F		 staa	 byte_50
ROM:FA41		 ldd	 dCAS_Count_T1
ROM:FA43		 lsld
ROM:FA44		 bcs	 loc_FA50
ROM:FA46		 addd	 byte_B5
ROM:FA48		 bcs	 loc_FA50
ROM:FA4A		 jsr	 sub_FBF8
ROM:FA4D		 jsr	 sub_FD60
ROM:FA50
ROM:FA50 loc_FA50:				 ; CODE	XREF: JT3_0+11Aj
ROM:FA50					 ; JT3_0+127j ...
ROM:FA50		 jmp	 loc_FAE9
ROM:FA53 ; ---------------------------------------------------------------------------
ROM:FA53
ROM:FA53 loc_FA53:				 ; CODE	XREF: JT3_0+FDj
ROM:FA53					 ; JT3_0+114j ...
ROM:FA53		 jmp	 loc_FAEB
ROM:FA53 ; End of function JT3_0
ROM:FA53
ROM:FA56
ROM:FA56 ; =============== S U B R O U T I N E =======================================
ROM:FA56
ROM:FA56
ROM:FA56 JT3_5:
ROM:FA56		 ldaa	 byte_A2	 ; code?
ROM:FA58		 bpl	 loc_FA0D
ROM:FA5A		 bra	 loc_FA53
ROM:FA5A ; End of function JT3_5
ROM:FA5A
ROM:FA5C
ROM:FA5C ; =============== S U B R O U T I N E =======================================
ROM:FA5C
ROM:FA5C
ROM:FA5C JT3_6:
ROM:FA5C		 ldaa	 byte_A2
ROM:FA5E		 bpl	 loc_FA0D
ROM:FA60		 bsr	 sub_FA96
ROM:FA62		 bra	 loc_FA53
ROM:FA62 ; End of function JT3_6
ROM:FA62
ROM:FA64
ROM:FA64 ; =============== S U B R O U T I N E =======================================
ROM:FA64
ROM:FA64
ROM:FA64 JT3_7:
ROM:FA64		 ldaa	 byte_A2
ROM:FA66		 bita	 #$20 ;	' '
ROM:FA68		 bne	 loc_FA6D
ROM:FA6A		 jsr	 sub_FABB
ROM:FA6D
ROM:FA6D loc_FA6D:				 ; CODE	XREF: JT3_7+4j
ROM:FA6D		 clra
ROM:FA6E		 jmp	 loc_F947
ROM:FA6E ; End of function JT3_7
ROM:FA6E
ROM:FA71
ROM:FA71 ; =============== S U B R O U T I N E =======================================
ROM:FA71
ROM:FA71
ROM:FA71 sub_FA71:				 ; CODE	XREF: ROM:F847P
ROM:FA71					 ; ROM:loc_F8BFP ...
ROM:FA71		 ldab	 #$40 ;	'@'
ROM:FA73		 ldaa	 byte_AC
ROM:FA75		 bne	 loc_FA8A
ROM:FA77		 ldaa	 TCSR2
ROM:FA79		 anda	 #$F6 ;	'ö'
ROM:FA7B		 bra	 loc_FA88
ROM:FA7D ; ---------------------------------------------------------------------------
ROM:FA7D
ROM:FA7D loc_FA7D:				 ; CODE	XREF: sub_EEA6+4BP
ROM:FA7D		 ldab	 PORT1
ROM:FA7F		 bitb	 #2
ROM:FA81		 bne	 locret_FA95
ROM:FA83
ROM:FA83 loc_FA83:				 ; CODE	XREF: JT3_0+EBP
ROM:FA83		 clrb
ROM:FA84		 ldaa	 TCSR2
ROM:FA86		 oraa	 #1
ROM:FA88
ROM:FA88 loc_FA88:				 ; CODE	XREF: sub_FA71+Aj
ROM:FA88		 staa	 TCSR2
ROM:FA8A
ROM:FA8A loc_FA8A:				 ; CODE	XREF: sub_FA71+4j
ROM:FA8A		 orab	 byte_9E	 ;  set	up a 5.12ms interrupt
ROM:FA8C		 stab	 byte_9E
ROM:FA8E		 ldab	 #$14
ROM:FA90		 ldx	 FRCH
ROM:FA92		 abx
ROM:FA93		 stx	 OCR2H
ROM:FA95
ROM:FA95 locret_FA95:				 ; CODE	XREF: sub_FA71+10j
ROM:FA95		 rts
ROM:FA95 ; End of function sub_FA71
ROM:FA95
ROM:FA96
ROM:FA96 ; =============== S U B R O U T I N E =======================================
ROM:FA96
ROM:FA96
ROM:FA96 sub_FA96:				 ; CODE	XREF: ROM:loc_F8CCP
ROM:FA96					 ; JT3_6+4p
ROM:FA96		 ldab	 #$10
ROM:FA98		 ldaa	 byte_AC
ROM:FA9A		 bne	 loc_FAAF
ROM:FA9C		 ldaa	 TCSR1
ROM:FA9E		 anda	 #$F6 ;	'ö'
ROM:FAA0		 bra	 loc_FAAD
ROM:FAA2 ; ---------------------------------------------------------------------------
ROM:FAA2
ROM:FAA2 loc_FAA2:				 ; CODE	XREF: sub_EEA6+4EP
ROM:FAA2		 ldab	 PORT2
ROM:FAA4		 bitb	 #2
ROM:FAA6		 bne	 locret_FABA
ROM:FAA8
ROM:FAA8 loc_FAA8:				 ; CODE	XREF: JT3_0+7CP
ROM:FAA8		 clrb
ROM:FAA9		 ldaa	 TCSR1
ROM:FAAB		 oraa	 #1
ROM:FAAD
ROM:FAAD loc_FAAD:				 ; CODE	XREF: sub_FA96+Aj
ROM:FAAD		 staa	 TCSR1
ROM:FAAF
ROM:FAAF loc_FAAF:				 ; CODE	XREF: sub_FA96+4j
ROM:FAAF		 orab	 byte_9E
ROM:FAB1		 stab	 byte_9E
ROM:FAB3		 ldab	 #$14
ROM:FAB5		 ldx	 FRCH
ROM:FAB7		 abx
ROM:FAB8		 stx	 OCR1H		 ;  20us timer
ROM:FABA
ROM:FABA locret_FABA:				 ; CODE	XREF: sub_FA96+10j
ROM:FABA		 rts
ROM:FABA ; End of function sub_FA96
ROM:FABA
ROM:FABB
ROM:FABB ; =============== S U B R O U T I N E =======================================
ROM:FABB
ROM:FABB
ROM:FABB sub_FABB:				 ; CODE	XREF: JT3_0:loc_F942P
ROM:FABB					 ; JT3_7+6P
ROM:FABB		 ldaa	 byte_AD
ROM:FABD		 cmpa	 #8
ROM:FABF		 bne	 loc_FAE0
ROM:FAC1		 ldaa	 byte_8B
ROM:FAC3		 staa	 byte_88
ROM:FAC5		 ldd	 byte_8C
ROM:FAC7		 bra	 loc_FAD8
ROM:FAC7 ; End of function sub_FABB
ROM:FAC7
ROM:FAC9
ROM:FAC9 ; =============== S U B R O U T I N E =======================================
ROM:FAC9
ROM:FAC9
ROM:FAC9 sub_FAC9:				 ; CODE	XREF: JT3_0+20P
ROM:FAC9		 ldaa	 byte_AD
ROM:FACB		 cmpa	 #$10
ROM:FACD		 bne	 loc_FAE0
ROM:FACF		 ldaa	 byte_8B
ROM:FAD1		 lsra
ROM:FAD2		 staa	 byte_88
ROM:FAD4		 ldd	 byte_8C
ROM:FAD6		 rora
ROM:FAD7		 rorb
ROM:FAD8
ROM:FAD8 loc_FAD8:				 ; CODE	XREF: sub_FABB+Cj
ROM:FAD8		 std	 byte_89
ROM:FADA		 ldaa	 byte_A2
ROM:FADC		 oraa	 #2
ROM:FADE		 staa	 byte_A2
ROM:FAE0
ROM:FAE0 loc_FAE0:				 ; CODE	XREF: sub_FABB+4j
ROM:FAE0					 ; sub_FAC9+4j
ROM:FAE0		 clra
ROM:FAE1		 clrb
ROM:FAE2		 staa	 byte_8B
ROM:FAE4		 std	 byte_8C
ROM:FAE6		 stab	 byte_AD
ROM:FAE8		 rts
ROM:FAE8 ; End of function sub_FAC9
ROM:FAE8
ROM:FAE9 ; ---------------------------------------------------------------------------
ROM:FAE9 ; START OF FUNCTION CHUNK FOR JT3_0
ROM:FAE9
ROM:FAE9 loc_FAE9:				 ; CODE	XREF: JT3_0:loc_FA50J
ROM:FAE9		 bsr	 sub_FB26
ROM:FAEB
ROM:FAEB loc_FAEB:				 ; CODE	XREF: JT3_0:loc_F99CJ
ROM:FAEB					 ; JT3_0:loc_F9C4J ...
ROM:FAEB		 ldaa	 #$FF
ROM:FAED		 staa	 byte_AA
ROM:FAEF		 ldaa	 byte_A8
ROM:FAF1		 bita	 #$10
ROM:FAF3		 beq	 loc_FAFC
ROM:FAF5		 ldx	 #$48 ;	'H'
ROM:FAF8		 bsr	 sub_FB06
ROM:FAFA		 ldaa	 byte_A8
ROM:FAFC
ROM:FAFC loc_FAFC:				 ; CODE	XREF: JT3_0+1D6j
ROM:FAFC		 bita	 #$40 ;	'@'
ROM:FAFE		 beq	 locret_FB05
ROM:FB00		 ldx	 #$40 ;	'@'
ROM:FB03		 bsr	 sub_FB06
ROM:FB05
ROM:FB05 locret_FB05:				 ; CODE	XREF: JT3_0+1E1j
ROM:FB05		 rti
ROM:FB05 ; END OF FUNCTION CHUNK FOR JT3_0
ROM:FB06
ROM:FB06 ; =============== S U B R O U T I N E =======================================
ROM:FB06
ROM:FB06
ROM:FB06 sub_FB06:				 ; CODE	XREF: JT3_0+1DBp
ROM:FB06					 ; JT3_0+1E6p
ROM:FB06		 ldaa	 byte_9F
ROM:FB08		 anda	 4,x
ROM:FB0A		 bita	 #$50 ;	'P'
ROM:FB0C		 bne	 loc_FB1F
ROM:FB0E		 ldaa	 dCAS_Count_T1
ROM:FB10		 bmi	 loc_FB1F
ROM:FB12		 ldd	 6,x
ROM:FB14		 subd	 FRCH
ROM:FB16		 subd	 #$280
ROM:FB19		 bmi	 loc_FB1F
ROM:FB1B		 subd	 dCAS_Count_T1
ROM:FB1D		 bpl	 locret_FB25
ROM:FB1F
ROM:FB1F loc_FB1F:				 ; CODE	XREF: sub_FB06+6j
ROM:FB1F					 ; sub_FB06+Aj	...
ROM:FB1F		 jsr	 sub_FD37
ROM:FB22		 jsr	 sub_FDB5	 ; sub_FDB5:
ROM:FB22					 ; Calls code from a jump table	at FDD6
ROM:FB22					 ; called with X = 40h or 48h or something else
ROM:FB25
ROM:FB25 locret_FB25:				 ; CODE	XREF: sub_FB06+17j
ROM:FB25		 rts
ROM:FB25 ; End of function sub_FB06
ROM:FB25
ROM:FB26
ROM:FB26 ; =============== S U B R O U T I N E =======================================
ROM:FB26
ROM:FB26
ROM:FB26 sub_FB26:				 ; CODE	XREF: JT3_0+11DP
ROM:FB26					 ; JT3_0:loc_FAE9p
ROM:FB26		 ldaa	 byte_50
ROM:FB28		 bita	 #$C
ROM:FB2A		 beq	 loc_FB31
ROM:FB2C		 jsr	 sub_FCEF
ROM:FB2F		 ldaa	 byte_50
ROM:FB31
ROM:FB31 loc_FB31:				 ; CODE	XREF: sub_FB26+4j
ROM:FB31		 bita	 #3
ROM:FB33		 beq	 locret_FB38
ROM:FB35		 jsr	 sub_FCA7
ROM:FB38
ROM:FB38 locret_FB38:				 ; CODE	XREF: sub_FB26+Dj
ROM:FB38		 rts
ROM:FB38 ; End of function sub_FB26
ROM:FB38
ROM:FB39
ROM:FB39 ; =============== S U B R O U T I N E =======================================
ROM:FB39
ROM:FB39 ; sub_FB39:
ROM:FB39 ;  called with:
ROM:FB39 ;    A	= ?
ROM:FB39 ;    B	= ?
ROM:FB39 ;    X	= ?
ROM:FB39
ROM:FB39 sub_FB39:				 ; CODE	XREF: ROM:F8DCP
ROM:FB39					 ; ROM:F8ECP
ROM:FB39		 staa	 byte_B5
ROM:FB3B		 ldaa	 byte_AC
ROM:FB3D		 bne	 locret_FB83
ROM:FB3F		 ldaa	 status_A0
ROM:FB41		 bita	 #$10
ROM:FB43		 bne	 locret_FB83
ROM:FB45		 ldaa	 count_A1
ROM:FB47		 bita	 #2
ROM:FB49		 beq	 locret_FB83
ROM:FB4B		 clra
ROM:FB4C		 staa	 byte_B6
ROM:FB4E		 bitb	 PORT1		 ; test	PORT1?
ROM:FB50		 beq	 loc_FB54
ROM:FB52		 stab	 byte_B6
ROM:FB54
ROM:FB54 loc_FB54:				 ; CODE	XREF: sub_FB39+17j
ROM:FB54		 comb
ROM:FB55		 andb	 PORT1
ROM:FB57		 stab	 PORT1		 ; test	PORT1?
ROM:FB59		 ldd	 byte_52
ROM:FB5B		 cpx	 #$46 ;	'F'
ROM:FB5E		 bne	 loc_FB62
ROM:FB60		 ldd	 byte_54
ROM:FB62
ROM:FB62 loc_FB62:				 ; CODE	XREF: sub_FB39+25j
ROM:FB62		 addd	 FRCH
ROM:FB64		 subd	 #$30 ;	'0'
ROM:FB67		 tst	 byte_B6
ROM:FB6A		 bne	 loc_FB74
ROM:FB6C		 std	 byte_B7
ROM:FB6E		 subd	 0,x
ROM:FB70		 bmi	 locret_FB83
ROM:FB72		 ldd	 byte_B7
ROM:FB74
ROM:FB74 loc_FB74:				 ; CODE	XREF: sub_FB39+31j
ROM:FB74		 std	 0,x
ROM:FB76		 ldaa	 byte_B5
ROM:FB78		 oraa	 byte_A8
ROM:FB7A		 staa	 byte_A8
ROM:FB7C		 ldaa	 byte_B5
ROM:FB7E		 coma
ROM:FB7F		 anda	 byte_9F
ROM:FB81		 staa	 byte_9F
ROM:FB83
ROM:FB83 locret_FB83:				 ; CODE	XREF: sub_FB39+4j
ROM:FB83					 ; sub_FB39+Aj	...
ROM:FB83		 rts
ROM:FB83 ; End of function sub_FB39
ROM:FB83
ROM:FB84
ROM:FB84 ; =============== S U B R O U T I N E =======================================
ROM:FB84
ROM:FB84
ROM:FB84 sub_FB84:				 ; CODE	XREF: JT3_0:loc_F9BBP
ROM:FB84					 ; JT3_0:loc_FA29P
ROM:FB84		 ldaa	 4,x
ROM:FB86		 anda	 #$A0 ;	' '
ROM:FB88		 bita	 byte_9E
ROM:FB8A		 bne	 locret_FBC7
ROM:FB8C		 pshx
ROM:FB8D		 jsr	 sub_FD60
ROM:FB90		 pulx
ROM:FB91		 bsr	 sub_FBC8
ROM:FB93		 bsr	 sub_FBF8
ROM:FB93 ; End of function sub_FB84
ROM:FB93
ROM:FB95
ROM:FB95 ; =============== S U B R O U T I N E =======================================
ROM:FB95
ROM:FB95
ROM:FB95 sub_FB95:				 ; CODE	XREF: JT3_0+6EP
ROM:FB95		 pshx
ROM:FB96		 jsr	 sub_FD60
ROM:FB99		 pulx
ROM:FB9A		 ldaa	 byte_9E
ROM:FB9C		 anda	 4,x
ROM:FB9E		 bita	 #$A0 ;	' '
ROM:FBA0		 bne	 locret_FBC7
ROM:FBA2		 ldaa	 byte_A2
ROM:FBA4		 bita	 #$40 ;	'@'
ROM:FBA6		 bne	 sub_FBB3
ROM:FBA8		 ldd	 byte_B5
ROM:FBAA		 subd	 dCAS_Count
ROM:FBAC		 bcs	 sub_FBB3
ROM:FBAE		 subd	 word_EE02
ROM:FBB1		 bcc	 locret_FBC7
ROM:FBB1 ; End of function sub_FB95
ROM:FBB1
ROM:FBB3
ROM:FBB3 ; =============== S U B R O U T I N E =======================================
ROM:FBB3
ROM:FBB3
ROM:FBB3 sub_FBB3:				 ; CODE	XREF: JT3_0:loc_F990P
ROM:FBB3					 ; JT3_0+99P ...
ROM:FBB3		 ldd	 byte_B5
ROM:FBB5		 addd	 CAS_Count
ROM:FBB7		 std	 2,x
ROM:FBB9		 ldaa	 #$A
ROM:FBB9 ; End of function sub_FBB3
ROM:FBB9
ROM:FBBB
ROM:FBBB ; =============== S U B R O U T I N E =======================================
ROM:FBBB
ROM:FBBB
ROM:FBBB sub_FBBB:				 ; CODE	XREF: sub_FBF8+2Fp
ROM:FBBB		 anda	 4,x
ROM:FBBD		 oraa	 byte_9E
ROM:FBBF		 staa	 byte_9E
ROM:FBC1		 ldaa	 4,x
ROM:FBC3		 oraa	 byte_50
ROM:FBC5		 staa	 byte_50
ROM:FBC7
ROM:FBC7 locret_FBC7:				 ; CODE	XREF: sub_FB84+6j
ROM:FBC7					 ; sub_FB95+Bj	...
ROM:FBC7		 rts
ROM:FBC7 ; End of function sub_FBBB
ROM:FBC7
ROM:FBC8
ROM:FBC8 ; =============== S U B R O U T I N E =======================================
ROM:FBC8
ROM:FBC8
ROM:FBC8 sub_FBC8:				 ; CODE	XREF: JT3_0+44P
ROM:FBC8					 ; sub_FB84+Dp
ROM:FBC8		 ldaa	 5,x
ROM:FBCA		 suba	 byte_84
ROM:FBCC		 bcc	 loc_FBD0
ROM:FBCE		 adda	 #$10
ROM:FBD0
ROM:FBD0 loc_FBD0:				 ; CODE	XREF: sub_FBC8+4j
ROM:FBD0		 clrb
ROM:FBD1		 lsrd
ROM:FBD2		 subb	 byte_62
ROM:FBD4		 sbca	 #0
ROM:FBD6		 bcc	 loc_FBDA
ROM:FBD8		 clra
ROM:FBD9		 clrb
ROM:FBDA
ROM:FBDA loc_FBDA:				 ; CODE	XREF: sub_FBC8+Ej
ROM:FBDA		 pshx
ROM:FBDB		 inca
ROM:FBDC		 staa	 byte_B7
ROM:FBDE		 pshb
ROM:FBDF		 ldd	 dCAS_Count_T1
ROM:FBE1		 jsr	 loc_FF43+1
ROM:FBE4		 pulx
ROM:FBE5
ROM:FBE5 loc_FBE5:				 ; CODE	XREF: sub_FBC8+24j
ROM:FBE5		 dec	 byte_B7
ROM:FBE8		 beq	 loc_FBF0
ROM:FBEA		 addd	 dCAS_Count_T1
ROM:FBEC		 bcc	 loc_FBE5
ROM:FBEE		 pulx
ROM:FBEF		 rts
ROM:FBF0 ; ---------------------------------------------------------------------------
ROM:FBF0
ROM:FBF0 loc_FBF0:				 ; CODE	XREF: sub_FBC8+20j
ROM:FBF0		 subd	 word_E060
ROM:FBF3		 bcc	 locret_FBF7
ROM:FBF5		 clra
ROM:FBF6		 clrb
ROM:FBF7
ROM:FBF7 locret_FBF7:				 ; CODE	XREF: sub_FBC8+2Bj
ROM:FBF7		 rts
ROM:FBF7 ; End of function sub_FBC8
ROM:FBF7
ROM:FBF8
ROM:FBF8 ; =============== S U B R O U T I N E =======================================
ROM:FBF8
ROM:FBF8
ROM:FBF8 sub_FBF8:				 ; CODE	XREF: JT3_0+12DP
ROM:FBF8					 ; sub_FB84+Fp
ROM:FBF8		 std	 byte_B5
ROM:FBFA		 ldaa	 byte_9E
ROM:FBFC		 anda	 4,x
ROM:FBFE		 bita	 #$50 ;	'P'
ROM:FC00		 bne	 locret_FC29
ROM:FC02		 ldaa	 byte_A2
ROM:FC04		 bita	 #$40 ;	'@'
ROM:FC06		 bne	 loc_FC19
ROM:FC08		 ldd	 byte_B5
ROM:FC0A		 subd	 byte_66
ROM:FC0C		 bcc	 loc_FC10
ROM:FC0E		 clra
ROM:FC0F		 clrb
ROM:FC10
ROM:FC10 loc_FC10:				 ; CODE	XREF: sub_FBF8+14j
ROM:FC10		 subd	 dCAS_Count
ROM:FC12		 bcs	 loc_FC19
ROM:FC14		 subd	 word_EE02
ROM:FC17		 bcc	 locret_FC29
ROM:FC19
ROM:FC19 loc_FC19:				 ; CODE	XREF: sub_FBF8+Ej
ROM:FC19					 ; sub_FBF8+1Aj
ROM:FC19		 ldd	 byte_B5
ROM:FC1B		 subd	 byte_66
ROM:FC1D		 bcc	 loc_FC21
ROM:FC1F		 clra
ROM:FC20		 clrb
ROM:FC21
ROM:FC21 loc_FC21:				 ; CODE	XREF: sub_FBF8+25j
ROM:FC21		 addd	 CAS_Count
ROM:FC23		 std	 0,x
ROM:FC25		 ldaa	 #5
ROM:FC27		 bsr	 sub_FBBB
ROM:FC29
ROM:FC29 locret_FC29:				 ; CODE	XREF: sub_FBF8+8j
ROM:FC29					 ; sub_FBF8+1Fj
ROM:FC29		 rts
ROM:FC29 ; End of function sub_FBF8
ROM:FC29
ROM:FC2A ; ---------------------------------------------------------------------------
ROM:FC2A
ROM:FC2A OC_IntHandler:
ROM:FC2A		 clra
ROM:FC2B		 staa	 byte_B9
ROM:FC2D		 ldaa	 TCSR1
ROM:FC2F		 anda	 #$48 ;	'H'      ; Timer 1 OCIF and OCIE
ROM:FC31		 ldab	 TCSR2
ROM:FC33		 andb	 #$48 ;	'H'      ; Timer 2 OCIF and OCIE
ROM:FC35		 cmpb	 #$48 ;	'H'      ; test for Timer 2 OC interrupt
ROM:FC37		 bne	 loc_FC85
ROM:FC39		 cmpa	 #$48 ;	'H'
ROM:FC3B		 bne	 OC2_IntHandler?
ROM:FC3D
ROM:FC3D OC1_IntHandler?:			 ; test	P11 (timer pin)
ROM:FC3D		 ldaa	 PORT1
ROM:FC3F		 bita	 #2
ROM:FC41		 bne	 loc_FC50
ROM:FC43		 ldaa	 byte_9E
ROM:FC45		 bita	 #8
ROM:FC47		 beq	 loc_FC50
ROM:FC49		 jsr	 sub_FCEF
ROM:FC4C		 ldaa	 #$33 ;	'3'
ROM:FC4E		 staa	 byte_B9
ROM:FC50
ROM:FC50 loc_FC50:				 ; CODE	XREF: ROM:FC41j
ROM:FC50					 ; ROM:FC47j
ROM:FC50		 ldaa	 PORT2
ROM:FC52		 bita	 #2
ROM:FC54		 bne	 loc_FC65
ROM:FC56		 ldaa	 byte_9E
ROM:FC58		 bita	 #2
ROM:FC5A		 beq	 loc_FC65
ROM:FC5C		 jsr	 sub_FCA7
ROM:FC5F		 ldaa	 #$CC ;	'Ì'
ROM:FC61		 oraa	 byte_B9
ROM:FC63		 staa	 byte_B9
ROM:FC65
ROM:FC65 loc_FC65:				 ; CODE	XREF: ROM:FC54j
ROM:FC65					 ; ROM:FC5Aj
ROM:FC65		 jsr	 sub_FD60
ROM:FC68		 ldaa	 byte_B9
ROM:FC6A		 bmi	 loc_FC71
ROM:FC6C		 jsr	 sub_FCA7
ROM:FC6F		 ldaa	 byte_B9
ROM:FC71
ROM:FC71 loc_FC71:				 ; CODE	XREF: ROM:FC6Aj
ROM:FC71		 anda	 #$33 ;	'3'
ROM:FC73		 bne	 loc_FC78
ROM:FC75		 jsr	 sub_FCEF
ROM:FC78
ROM:FC78 loc_FC78:				 ; CODE	XREF: ROM:FC73j
ROM:FC78		 ldx	 #$48 ;	'H'
ROM:FC7B		 jsr	 sub_FDB5	 ; sub_FDB5:
ROM:FC7B					 ; Calls code from a jump table	at FDD6
ROM:FC7B					 ; called with X = 40h or 48h or something else
ROM:FC7E		 ldx	 #$40 ;	'@'
ROM:FC81		 jsr	 sub_FDB5	 ; sub_FDB5:
ROM:FC81					 ; Calls code from a jump table	at FDD6
ROM:FC81					 ; called with X = 40h or 48h or something else
ROM:FC84		 rti
ROM:FC85 ; ---------------------------------------------------------------------------
ROM:FC85
ROM:FC85 loc_FC85:				 ; CODE	XREF: ROM:FC37j
ROM:FC85		 cmpa	 #$48 ;	'H'
ROM:FC87		 bne	 locret_FC99
ROM:FC89		 jsr	 sub_FCA7
ROM:FC8C		 ldx	 #$48 ;	'H'
ROM:FC8F		 bra	 loc_FC97
ROM:FC91 ; ---------------------------------------------------------------------------
ROM:FC91
ROM:FC91 OC2_IntHandler?:			 ; CODE	XREF: ROM:FC3Bj
ROM:FC91		 jsr	 sub_FCEF
ROM:FC94		 ldx	 #$40 ;	'@'
ROM:FC97
ROM:FC97 loc_FC97:				 ; CODE	XREF: ROM:FC8Fj
ROM:FC97		 bsr	 sub_FC9A
ROM:FC99
ROM:FC99 locret_FC99:				 ; CODE	XREF: ROM:FC87j
ROM:FC99		 rti
ROM:FC9A
ROM:FC9A ; =============== S U B R O U T I N E =======================================
ROM:FC9A
ROM:FC9A
ROM:FC9A sub_FC9A:				 ; CODE	XREF: ROM:loc_FC97p
ROM:FC9A		 ldab	 byte_9F
ROM:FC9C		 andb	 4,x
ROM:FC9E		 beq	 locret_FCA6
ROM:FCA0		 jsr	 sub_FD78
ROM:FCA3		 jsr	 sub_FDB5	 ; sub_FDB5:
ROM:FCA3					 ; Calls code from a jump table	at FDD6
ROM:FCA3					 ; called with X = 40h or 48h or something else
ROM:FCA6
ROM:FCA6 locret_FCA6:				 ; CODE	XREF: sub_FC9A+4j
ROM:FCA6		 rts
ROM:FCA6 ; End of function sub_FC9A
ROM:FCA6
ROM:FCA7
ROM:FCA7 ; =============== S U B R O U T I N E =======================================
ROM:FCA7
ROM:FCA7
ROM:FCA7 sub_FCA7:				 ; CODE	XREF: ROM:F7ADP
ROM:FCA7					 ; sub_FB26+FP	...
ROM:FCA7		 ldab	 PORT2
ROM:FCA9		 ldaa	 byte_9E
ROM:FCAB		 bitb	 #2
ROM:FCAD		 bne	 loc_FCBF
ROM:FCAF
ROM:FCAF loc_FCAF:				 ; CODE	XREF: sub_FCA7+1Ej
ROM:FCAF		 anda	 #$FE ;	'þ'
ROM:FCB1		 oraa	 #$10
ROM:FCB3		 bita	 #2
ROM:FCB5		 beq	 loc_FCE8
ROM:FCB7		 ldx	 byte_4A
ROM:FCB9		 ldab	 TCSR1
ROM:FCBB		 orab	 #1
ROM:FCBD		 bra	 loc_FCCD
ROM:FCBF ; ---------------------------------------------------------------------------
ROM:FCBF
ROM:FCBF loc_FCBF:				 ; CODE	XREF: sub_FCA7+6j
ROM:FCBF		 bita	 #1
ROM:FCC1		 beq	 loc_FCE0
ROM:FCC3		 ldab	 byte_AC
ROM:FCC5		 bne	 loc_FCAF
ROM:FCC7		 ldx	 byte_48
ROM:FCC9		 ldab	 TCSR1
ROM:FCCB		 andb	 #$FE ;	'þ'
ROM:FCCD
ROM:FCCD loc_FCCD:				 ; CODE	XREF: sub_FCA7+16j
ROM:FCCD		 stx	 OCR1H		 ; byte_48 or byte_4A
ROM:FCCF		 orab	 #8
ROM:FCD1		 stab	 TCSR1
ROM:FCD3		 cpx	 FRCH
ROM:FCD5		 bpl	 loc_FCEC
ROM:FCD7		 ldab	 #$C
ROM:FCD9		 ldx	 FRCH
ROM:FCDB		 abx
ROM:FCDC		 stx	 OCR1H		 ; 12us	timer
ROM:FCDE		 bra	 loc_FCEC
ROM:FCE0 ; ---------------------------------------------------------------------------
ROM:FCE0
ROM:FCE0 loc_FCE0:				 ; CODE	XREF: sub_FCA7+1Aj
ROM:FCE0		 bita	 #$10
ROM:FCE2		 beq	 loc_FCE8
ROM:FCE4		 anda	 #$FD ;	'ý'
ROM:FCE6		 oraa	 #$20 ;	' '
ROM:FCE8
ROM:FCE8 loc_FCE8:				 ; CODE	XREF: sub_FCA7+Ej
ROM:FCE8					 ; sub_FCA7+3Bj
ROM:FCE8		 ldx	 FRCH
ROM:FCEA		 stx	 OCR1H		 ; =FRCH, 65.5ms timer?
ROM:FCEC
ROM:FCEC loc_FCEC:				 ; CODE	XREF: sub_FCA7+2Ej
ROM:FCEC					 ; sub_FCA7+37j
ROM:FCEC		 staa	 byte_9E
ROM:FCEE		 rts
ROM:FCEE ; End of function sub_FCA7
ROM:FCEE
ROM:FCEF
ROM:FCEF ; =============== S U B R O U T I N E =======================================
ROM:FCEF
ROM:FCEF
ROM:FCEF sub_FCEF:				 ; CODE	XREF: ROM:loc_F7B2P
ROM:FCEF					 ; sub_FB26+6P	...
ROM:FCEF		 ldab	 PORT1
ROM:FCF1		 ldaa	 byte_9E
ROM:FCF3		 bitb	 #2
ROM:FCF5		 bne	 loc_FD07
ROM:FCF7
ROM:FCF7 loc_FCF7:				 ; CODE	XREF: sub_FCEF+1Ej
ROM:FCF7		 anda	 #$FB ;	'û'
ROM:FCF9		 oraa	 #$40 ;	'@'
ROM:FCFB		 bita	 #8
ROM:FCFD		 beq	 loc_FD30
ROM:FCFF		 ldx	 byte_42	 ;  byte_43
ROM:FD01		 ldab	 TCSR2
ROM:FD03		 orab	 #1
ROM:FD05		 bra	 loc_FD15
ROM:FD07 ; ---------------------------------------------------------------------------
ROM:FD07
ROM:FD07 loc_FD07:				 ; CODE	XREF: sub_FCEF+6j
ROM:FD07		 bita	 #4
ROM:FD09		 beq	 loc_FD28
ROM:FD0B		 ldab	 byte_AC
ROM:FD0D		 bne	 loc_FCF7
ROM:FD0F		 ldx	 byte_40	 ;  byte_40 ???
ROM:FD11		 ldab	 TCSR2
ROM:FD13		 andb	 #$FE ;	'þ'
ROM:FD15
ROM:FD15 loc_FD15:				 ; CODE	XREF: sub_FCEF+16j
ROM:FD15		 stx	 OCR2H
ROM:FD17		 orab	 #8
ROM:FD19		 stab	 TCSR2
ROM:FD1B		 cpx	 FRCH
ROM:FD1D		 bpl	 loc_FD34
ROM:FD1F		 ldab	 #$C
ROM:FD21		 ldx	 FRCH
ROM:FD23		 abx
ROM:FD24		 stx	 OCR2H
ROM:FD26		 bra	 loc_FD34
ROM:FD28 ; ---------------------------------------------------------------------------
ROM:FD28
ROM:FD28 loc_FD28:				 ; CODE	XREF: sub_FCEF+1Aj
ROM:FD28		 bita	 #$40 ;	'@'
ROM:FD2A		 beq	 loc_FD30
ROM:FD2C		 anda	 #$F7 ;	'÷'
ROM:FD2E		 oraa	 #$80 ;	'€'
ROM:FD30
ROM:FD30 loc_FD30:				 ; CODE	XREF: sub_FCEF+Ej
ROM:FD30					 ; sub_FCEF+3Bj
ROM:FD30		 ldx	 FRCH
ROM:FD32		 stx	 OCR2H
ROM:FD34
ROM:FD34 loc_FD34:				 ; CODE	XREF: sub_FCEF+2Ej
ROM:FD34					 ; sub_FCEF+37j
ROM:FD34		 staa	 byte_9E
ROM:FD36		 rts
ROM:FD36 ; End of function sub_FCEF
ROM:FD36
ROM:FD37
ROM:FD37 ; =============== S U B R O U T I N E =======================================
ROM:FD37
ROM:FD37
ROM:FD37 sub_FD37:				 ; CODE	XREF: sub_FB06:loc_FB1FP
ROM:FD37		 ldab	 byte_9F
ROM:FD39		 andb	 4,x
ROM:FD3B		 bitb	 #$50 ;	'P'
ROM:FD3D		 bne	 sub_FD78
ROM:FD3F		 ldaa	 byte_A8
ROM:FD41		 anda	 4,x
ROM:FD43		 bita	 #$50 ;	'P'
ROM:FD45		 beq	 locret_FDB4
ROM:FD47		 ldd	 dCAS_Count
ROM:FD49		 bmi	 loc_FD56
ROM:FD4B		 addd	 FRCH
ROM:FD4D		 subd	 6,x
ROM:FD4F		 bpl	 loc_FD56
ROM:FD51		 addd	 #$460
ROM:FD54		 bmi	 locret_FDB4
ROM:FD56
ROM:FD56 loc_FD56:				 ; CODE	XREF: sub_FD37+12j
ROM:FD56					 ; sub_FD37+18j
ROM:FD56		 ldab	 #$50 ;	'P'
ROM:FD58		 andb	 4,x
ROM:FD5A		 orab	 byte_9F
ROM:FD5C		 stab	 byte_9F
ROM:FD5E		 bra	 sub_FD78
ROM:FD5E ; End of function sub_FD37
ROM:FD5E
ROM:FD60
ROM:FD60 ; =============== S U B R O U T I N E =======================================
ROM:FD60
ROM:FD60
ROM:FD60 sub_FD60:				 ; CODE	XREF: ROM:loc_F7B5P
ROM:FD60					 ; JT3_0+3EP ...
ROM:FD60		 ldaa	 byte_9F
ROM:FD62		 anda	 #$50 ;	'P'
ROM:FD64		 beq	 locret_FDB4
ROM:FD66		 bita	 #$10
ROM:FD68		 beq	 loc_FD71
ROM:FD6A		 ldx	 #$48 ;	'H'
ROM:FD6D		 bsr	 sub_FD78
ROM:FD6F		 ldaa	 byte_9F
ROM:FD71
ROM:FD71 loc_FD71:				 ; CODE	XREF: sub_FD60+8j
ROM:FD71		 bita	 #$40 ;	'@'
ROM:FD73		 beq	 locret_FDB4
ROM:FD75		 ldx	 #$40 ;	'@'
ROM:FD75 ; End of function sub_FD60
ROM:FD75
ROM:FD78
ROM:FD78 ; =============== S U B R O U T I N E =======================================
ROM:FD78
ROM:FD78
ROM:FD78 sub_FD78:				 ; CODE	XREF: sub_FC9A+6P
ROM:FD78					 ; sub_FD37+6j	...
ROM:FD78		 ldd	 FRCH
ROM:FD7A		 addd	 word_EE04
ROM:FD7D		 subd	 6,x
ROM:FD7F		 bmi	 locret_FDB4
ROM:FD81		 pshx
ROM:FD82		 ldx	 6,x
ROM:FD84
ROM:FD84 loc_FD84:				 ; CODE	XREF: sub_FD78+Ej
ROM:FD84		 cpx	 FRCH
ROM:FD86		 bpl	 loc_FD84
ROM:FD88		 pulx
ROM:FD89		 ldaa	 byte_A2
ROM:FD8B		 cpx	 #$40 ;	'@'
ROM:FD8E		 bne	 loc_FD9A
ROM:FD90		 oraa	 #8
ROM:FD92		 staa	 byte_A2
ROM:FD94		 ldaa	 #8
ROM:FD96		 ldab	 #$BF ;	'¿'
ROM:FD98		 bra	 loc_FDA2
ROM:FD9A ; ---------------------------------------------------------------------------
ROM:FD9A
ROM:FD9A loc_FD9A:				 ; CODE	XREF: sub_FD78+16j
ROM:FD9A		 oraa	 #4
ROM:FD9C		 staa	 byte_A2
ROM:FD9E		 ldaa	 #4
ROM:FDA0		 ldab	 #$EF ;	'ï'
ROM:FDA2
ROM:FDA2 loc_FDA2:				 ; CODE	XREF: sub_FD78+20j
ROM:FDA2		 pshb
ROM:FDA3		 andb	 byte_9F
ROM:FDA5		 stab	 byte_9F
ROM:FDA7		 pulb
ROM:FDA8		 andb	 byte_A8
ROM:FDAA		 stab	 byte_A8
ROM:FDAC		 oraa	 PORT1
ROM:FDAE		 staa	 PORT1		 ; PORT1?
ROM:FDB0		 ldaa	 #$FF
ROM:FDB2		 staa	 byte_AA
ROM:FDB4
ROM:FDB4 locret_FDB4:				 ; CODE	XREF: sub_FD37+Ej
ROM:FDB4					 ; sub_FD37+1Dj ...
ROM:FDB4		 rts
ROM:FDB4 ; End of function sub_FD78
ROM:FDB4
ROM:FDB5
ROM:FDB5 ; =============== S U B R O U T I N E =======================================
ROM:FDB5
ROM:FDB5 ; sub_FDB5:
ROM:FDB5 ; Calls code from a jump table	at FDD6
ROM:FDB5 ; called with X = 40h or 48h or something else
ROM:FDB5
ROM:FDB5 sub_FDB5:				 ; CODE	XREF: sub_FB06+1CP
ROM:FDB5					 ; ROM:FC7BP ...
ROM:FDB5		 stx	 byte_B5
ROM:FDB7		 ldd	 byte_9E
ROM:FDB9		 anda	 4,x
ROM:FDBB		 andb	 4,x
ROM:FDBD		 cpx	 #$40 ;	'@'
ROM:FDC0		 bne	 loc_FDC4
ROM:FDC2		 lsrd
ROM:FDC3		 lsrd
ROM:FDC4
ROM:FDC4 loc_FDC4:				 ; CODE	XREF: sub_FDB5+Bj
ROM:FDC4		 anda	 #3
ROM:FDC6		 andb	 #$10
ROM:FDC8		 lsrb
ROM:FDC9		 lsrb
ROM:FDCA		 aba
ROM:FDCB		 tab
ROM:FDCC		 pshx
ROM:FDCD		 ldx	 #$FDD6		 ; JMP_TBL2
ROM:FDD0		 abx
ROM:FDD1		 ldab	 0,x		 ; add offset to X
ROM:FDD3		 abx
ROM:FDD4		 jmp	 0,x		 ; jump	to sub-routine
ROM:FDD4 ; End of function sub_FDB5
ROM:FDD4
ROM:FDD4 ; ---------------------------------------------------------------------------
ROM:FDD6 JMP_TBL2:
ROM:FDD6 Add the offset	to the address of the table entry
ROM:FDD6 JMP_TBL2:	 fcb   8
ROM:FDD7		 fcb $15
ROM:FDD8		 fcb $14
ROM:FDD9		 fcb $13
ROM:FDDA		 fcb $14
ROM:FDDB		 fcb $4F ; O
ROM:FDDC		 fcb $29 ; )
ROM:FDDD		 fcb $4D ; M
ROM:FDDE
ROM:FDDE ; =============== S U B R O U T I N E =======================================
ROM:FDDE
ROM:FDDE
ROM:FDDE sub_FDDE:
ROM:FDDE		 pulx			 ; FDD6+8
ROM:FDDF		 ldd	 FRCH
ROM:FDE1		 cpx	 #$40 ;	'@'
ROM:FDE4		 bne	 sub_FDE9
ROM:FDE6		 std	 OCR2H
ROM:FDE8		 rts
ROM:FDE8 ; End of function sub_FDDE
ROM:FDE8
ROM:FDE9
ROM:FDE9 ; =============== S U B R O U T I N E =======================================
ROM:FDE9
ROM:FDE9
ROM:FDE9 sub_FDE9:				 ; CODE	XREF: sub_FDDE+6j
ROM:FDE9		 std	 OCR1H		 ; FDD6+14
ROM:FDEB		 rts			 ; FDD6+15
ROM:FDEB ; End of function sub_FDE9
ROM:FDEB
ROM:FDEC ; ---------------------------------------------------------------------------
ROM:FDEC		 pulx
ROM:FDED ; START OF FUNCTION CHUNK FOR sub_FDEE
ROM:FDED
ROM:FDED locret_FDED:				 ; CODE	XREF: sub_FDEE+2Bj
ROM:FDED		 rts
ROM:FDED ; END OF FUNCTION CHUNK FOR sub_FDEE
ROM:FDEE
ROM:FDEE ; =============== S U B R O U T I N E =======================================
ROM:FDEE
ROM:FDEE ; FDD6+18
ROM:FDEE
ROM:FDEE sub_FDEE:
ROM:FDEE
ROM:FDEE ; FUNCTION CHUNK AT ROM:FDED SIZE 00000001 BYTES
ROM:FDEE
ROM:FDEE		 pulx
ROM:FDEF		 ldd	 6,x
ROM:FDF1		 subd	 word_EE00
ROM:FDF4		 std	 byte_B7
ROM:FDF6		 cpx	 #$40 ;	'@'
ROM:FDF9		 bne	 loc_FE00
ROM:FDFB		 ldx	 #$18
ROM:FDFE		 bra	 loc_FE4E
ROM:FE00 ; ---------------------------------------------------------------------------
ROM:FE00
ROM:FE00 loc_FE00:				 ; CODE	XREF: sub_FDEE+Bj
ROM:FE00		 ldx	 #8
ROM:FE03		 bra	 loc_FE4E
ROM:FE05 ; ---------------------------------------------------------------------------
ROM:FE05		 pulx			 ; FDD6+2F
ROM:FE06		 ldd	 6,x
ROM:FE08		 std	 byte_B7
ROM:FE0A		 cpx	 #$40 ;	'@'
ROM:FE0D		 bne	 loc_FE14
ROM:FE0F		 ldx	 #$18
ROM:FE12		 bra	 loc_FE17
ROM:FE14 ; ---------------------------------------------------------------------------
ROM:FE14
ROM:FE14 loc_FE14:				 ; CODE	XREF: sub_FDEE+1Fj
ROM:FE14		 ldx	 #8
ROM:FE17
ROM:FE17 loc_FE17:				 ; CODE	XREF: sub_FDEE+24j
ROM:FE17		 subd	 3,x
ROM:FE19		 bpl	 locret_FDED
ROM:FE1B		 ldd	 byte_B7
ROM:FE1D		 subd	 word_EE00
ROM:FE20		 std	 byte_B7
ROM:FE22		 ldaa	 0,x
ROM:FE24		 anda	 #$FE ;	'þ'
ROM:FE26		 staa	 0,x
ROM:FE28		 bra	 loc_FE4E
ROM:FE2A ; ---------------------------------------------------------------------------
ROM:FE2A		 pulx
ROM:FE2B		 ldd	 6,x
ROM:FE2D		 subd	 word_EE00
ROM:FE30		 std	 byte_B7
ROM:FE32		 cpx	 #$40 ;	'@'
ROM:FE35		 bne	 loc_FE3C	 ; offset address = TCSR1
ROM:FE37		 ldx	 #$18
ROM:FE3A		 bra	 loc_FE3F
ROM:FE3C ; ---------------------------------------------------------------------------
ROM:FE3C
ROM:FE3C loc_FE3C:				 ; CODE	XREF: sub_FDEE+47j
ROM:FE3C		 ldx	 #8		 ; offset address = TCSR1
ROM:FE3F
ROM:FE3F loc_FE3F:				 ; CODE	XREF: sub_FDEE+4Cj
ROM:FE3F		 subd	 3,x		 ; Bh =	OCR1H
ROM:FE41		 bpl	 locret_FE67
ROM:FE43		 addd	 word_EE00
ROM:FE46		 bpl	 loc_FE4E
ROM:FE48		 ldaa	 0,x		 ; get TCSR1
ROM:FE4A		 oraa	 #1
ROM:FE4C		 staa	 0,x		 ; set Bit0
ROM:FE4E
ROM:FE4E loc_FE4E:				 ; CODE	XREF: sub_FDEE+10j
ROM:FE4E					 ; sub_FDEE+15j ...
ROM:FE4E		 ldaa	 0,x
ROM:FE50		 oraa	 #8
ROM:FE52		 staa	 0,x
ROM:FE54		 ldd	 byte_B7
ROM:FE56		 std	 3,x
ROM:FE58		 subd	 FRCH
ROM:FE5A		 bpl	 loc_FE63
ROM:FE5C		 ldd	 #$14		 ; 5.12ms
ROM:FE5F		 addd	 FRCH
ROM:FE61		 std	 3,x
ROM:FE63
ROM:FE63 loc_FE63:				 ; CODE	XREF: sub_FDEE+6Cj
ROM:FE63		 ldx	 byte_B5
ROM:FE65		 stx	 byte_AA
ROM:FE67
ROM:FE67 locret_FE67:				 ; CODE	XREF: sub_FDEE+53j
ROM:FE67		 rts
ROM:FE67 ; End of function sub_FDEE
ROM:FE67
ROM:FE67 ; ---------------------------------------------------------------------------
ROM:FE68		 fcb $3F ; ?
ROM:FE69		 fcb $3F ; ?
ROM:FE6A		 fcb $3F ; ?
ROM:FE6B		 fcb $3F ; ?
ROM:FE6C		 fcb $3F ; ?
ROM:FE6D		 fcb $3F ; ?
ROM:FE6E		 fcb $3F ; ?
ROM:FE6F		 fcb $3F ; ?
ROM:FE70		 fcb $3F ; ?
ROM:FE71		 fcb $3F ; ?
ROM:FE72		 fcb $3F ; ?
ROM:FE73		 fcb $3F ; ?
ROM:FE74		 fcb $3F ; ?
ROM:FE75		 fcb $3F ; ?
ROM:FE76		 fcb $3F ; ?
ROM:FE77		 fcb $3F ; ?
ROM:FE78		 fcb $3F ; ?
ROM:FE79		 fcb $3F ; ?
ROM:FE7A
ROM:FE7A ; =============== S U B R O U T I N E =======================================
ROM:FE7A
ROM:FE7A
ROM:FE7A sub_FE7A:				 ; CODE	XREF: ROM:EB1DP
ROM:FE7A					 ; ROM:EBB8P ...
ROM:FE7A		 pulx			 ;  table_LU
ROM:FE7B		 cmpa	 0,x
ROM:FE7D		 bls	 loc_FE81
ROM:FE7F		 ldaa	 0,x
ROM:FE81
ROM:FE81 loc_FE81:				 ; CODE	XREF: sub_FE7A+3j
ROM:FE81		 suba	 1,x
ROM:FE83		 bhi	 loc_FE86
ROM:FE85		 clra
ROM:FE86
ROM:FE86 loc_FE86:				 ; CODE	XREF: sub_FE7A+9j
ROM:FE86		 jmp	 2,x
ROM:FE86 ; End of function sub_FE7A
ROM:FE86
ROM:FE88
ROM:FE88 ; =============== S U B R O U T I N E =======================================
ROM:FE88
ROM:FE88 ; sub_FE88:
ROM:FE88 ;  jump to a table look up routine
ROM:FE88
ROM:FE88 sub_FE88:				 ; CODE	XREF: ROM:EB0AP
ROM:FE88					 ; ROM:EB89P ...
ROM:FE88		 pulx
ROM:FE89		 subd	 0,x
ROM:FE8B		 bcs	 loc_FE8F
ROM:FE8D		 clra
ROM:FE8E		 clrb
ROM:FE8F
ROM:FE8F loc_FE8F:				 ; CODE	XREF: sub_FE88+3j
ROM:FE8F		 addd	 0,x
ROM:FE91		 subd	 2,x
ROM:FE93		 bcc	 loc_FE97
ROM:FE95		 clra
ROM:FE96		 clrb
ROM:FE97
ROM:FE97 loc_FE97:				 ; CODE	XREF: sub_FE88+Bj
ROM:FE97		 jmp	 4,x
ROM:FE97 ; End of function sub_FE88
ROM:FE97
ROM:FE99
ROM:FE99 ; =============== S U B R O U T I N E =======================================
ROM:FE99
ROM:FE99
ROM:FE99 sub_FE99:				 ; CODE	XREF: doTick_262ms+12P
ROM:FE99					 ; doTick_262ms+29P ...
ROM:FE99		 pshx			 ;  2D table LU
ROM:FE9A		 jsr	 sub_FE7A
ROM:FE9D		 subb	 RMCR		 ;  memory error - this	should be 10h =	a row/column
ROM:FE9F		 pulx
ROM:FEA0		 cmpa	 #$20 ;	' '
ROM:FEA2		 bcs	 loc_FEA6+1
ROM:FEA4		 adda	 #$20 ;	' '
ROM:FEA6
ROM:FEA6 loc_FEA6:				 ; CODE	XREF: sub_FE99+9j
ROM:FEA6		 brn	 loc_FEEF+1
ROM:FEA8		 ldab	 #8
ROM:FEAA		 mul
ROM:FEAA ; End of function sub_FE99
ROM:FEAA
ROM:FEAB
ROM:FEAB ; =============== S U B R O U T I N E =======================================
ROM:FEAB
ROM:FEAB
ROM:FEAB tableLU_2D:				 ; CODE	XREF: get_BARO+21P
ROM:FEAB					 ; get_VBatt+13P ...
ROM:FEAB		 pshb
ROM:FEAC		 tab
ROM:FEAD		 pula
ROM:FEAE		 abx
ROM:FEAF
ROM:FEAF loc_FEAF:				 ; CODE	XREF: tableLU_3D+24j
ROM:FEAF		 tab
ROM:FEB0		 beq	 loc_FEBC
ROM:FEB2		 ldab	 1,x
ROM:FEB4		 subb	 0,x
ROM:FEB6		 bcc	 loc_FEBB
ROM:FEB8		 negb
ROM:FEB9		 nega
ROM:FEBA		 inx
ROM:FEBB
ROM:FEBB loc_FEBB:				 ; CODE	XREF: tableLU_2D+Bj
ROM:FEBB		 mul
ROM:FEBC
ROM:FEBC loc_FEBC:				 ; CODE	XREF: tableLU_2D+5j
ROM:FEBC		 adda	 0,x
ROM:FEBE		 rts
ROM:FEBE ; End of function tableLU_2D
ROM:FEBE
ROM:FEBF
ROM:FEBF ; =============== S U B R O U T I N E =======================================
ROM:FEBF
ROM:FEBF ; tableLU_3D:
ROM:FEBF ; called with:
ROM:FEBF ; ??
ROM:FEBF ; called from:
ROM:FEBF ;  tableLU_3Da
ROM:FEBF ;  tableLU_3Db
ROM:FEBF
ROM:FEBF tableLU_3D:				 ; CODE	XREF: ROM:EB45P
ROM:FEBF					 ; tableLU_3Db+4P ...
ROM:FEBF		 pshb
ROM:FEC0		 ldab	 #$10
ROM:FEC2		 mul			 ;  A*16 = row/column
ROM:FEC3		 pshx
ROM:FEC4		 tsx
ROM:FEC5		 addd	 0,x
ROM:FEC7		 std	 0,x
ROM:FEC9		 ldx	 0,x
ROM:FECB		 ldd	 byte_AF	 ; temporary register (Heap)?
ROM:FECD		 bsr	 tableLU_2D
ROM:FECF		 staa	 byte_B1
ROM:FED1		 tst	 2,x
ROM:FED3		 pulx
ROM:FED4		 beq	 loc_FEE5
ROM:FED6		 ldab	 #$10
ROM:FED8		 abx
ROM:FED9		 ldd	 byte_AF	 ; temporary register (Heap)?
ROM:FEDB		 bsr	 tableLU_2D
ROM:FEDD		 staa	 byte_B2
ROM:FEDF		 ldx	 #$B1 ;	'±'
ROM:FEE2		 pula
ROM:FEE3		 bra	 loc_FEAF
ROM:FEE5 ; ---------------------------------------------------------------------------
ROM:FEE5
ROM:FEE5 loc_FEE5:				 ; CODE	XREF: tableLU_3D+15j
ROM:FEE5		 pulb
ROM:FEE6		 rts
ROM:FEE6 ; End of function tableLU_3D
ROM:FEE6
ROM:FEE7
ROM:FEE7 ; =============== S U B R O U T I N E =======================================
ROM:FEE7
ROM:FEE7
ROM:FEE7 sub_FEE7:				 ; CODE	XREF: sub_F0C7+16P
ROM:FEE7		 ldx	 #$FF2F
ROM:FEEA		 ldd	 byte_89
ROM:FEEC		 tst	 byte_88
ROM:FEEF
ROM:FEEF loc_FEEF:				 ; CODE	XREF: sub_FE99:loc_FEA6j
ROM:FEEF		 beq	 loc_FF03
ROM:FEF1		 ldd	 byte_88
ROM:FEF3		 cmpa	 #8
ROM:FEF5		 bcs	 loc_FEFA
ROM:FEF7		 ldd	 #$7FF
ROM:FEFA
ROM:FEFA loc_FEFA:				 ; CODE	XREF: sub_FEE7+Ej
ROM:FEFA		 ldx	 #$FF27
ROM:FEFD
ROM:FEFD loc_FEFD:				 ; CODE	XREF: sub_FEE7+1Aj
ROM:FEFD		 inx
ROM:FEFE		 lsld
ROM:FEFF		 bita	 #8
ROM:FF01		 beq	 loc_FEFD
ROM:FF03
ROM:FF03 loc_FF03:				 ; CODE	XREF: sub_FEE7:loc_FEEFj
ROM:FF03		 cmpa	 #8
ROM:FF05		 bcc	 loc_FF09
ROM:FF07		 ldaa	 #8
ROM:FF09
ROM:FF09 loc_FF09:				 ; CODE	XREF: sub_FEE7+1Ej
ROM:FF09					 ; sub_FEE7+28j
ROM:FF09		 bita	 #$F0 ;	'ð'
ROM:FF0B		 beq	 loc_FF11
ROM:FF0D		 lsrd
ROM:FF0E		 dex
ROM:FF0F		 bra	 loc_FF09
ROM:FF11 ; ---------------------------------------------------------------------------
ROM:FF11
ROM:FF11 loc_FF11:				 ; CODE	XREF: sub_FEE7+24j
ROM:FF11		 pshx
ROM:FF12		 ldx	 #$FF22
ROM:FF15		 pshb
ROM:FF16		 asla
ROM:FF17		 tab
ROM:FF18		 abx
ROM:FF19		 ldd	 0,x
ROM:FF1B		 subd	 2,x
ROM:FF1D		 pula
ROM:FF1E		 mul
ROM:FF1F		 tab
ROM:FF20		 clra
ROM:FF21		 subd	 0,x
ROM:FF23		 coma
ROM:FF24		 negb
ROM:FF25		 sbca	 #$FF
ROM:FF27		 rts
ROM:FF27 ; End of function sub_FEE7
ROM:FF27
ROM:FF28 ; ---------------------------------------------------------------------------
ROM:FF28		 lsrd
ROM:FF29		 lsrd
ROM:FF2A		 lsrd
ROM:FF2B		 lsrd
ROM:FF2C		 lsrd
ROM:FF2D		 lsrd
ROM:FF2E		 lsrd			 ;  divide by 128
ROM:FF2F		 std	 byte_86
ROM:FF31		 rts
ROM:FF32 ; ---------------------------------------------------------------------------
ROM:FF32		 tpa
ROM:FF33		 comb
ROM:FF34		 tap
ROM:FF35		 subd	 #$5DC
ROM:FF38		 lsld
ROM:FF39		 lsrb
ROM:FF3A		 lsrd
ROM:FF3B		 sbcb	 4,x
ROM:FF3D		 sbca	 #4
ROM:FF3F		 ble	 loc_FF43+1
ROM:FF41		 eorb	 3,x
ROM:FF43
ROM:FF43 loc_FF43:				 ; CODE	XREF: sub_EA34+34P
ROM:FF43					 ; get_BARO+2FP ...
ROM:FF43		 adca	 $36,x
ROM:FF45		 des
ROM:FF46		 tsx
ROM:FF47		 ldaa	 4,x
ROM:FF49		 mul
ROM:FF4A		 addd	 #$80 ;	'€'
ROM:FF4D		 staa	 0,x
ROM:FF4F		 ldaa	 1,x
ROM:FF51		 ldab	 4,x
ROM:FF53		 mul
ROM:FF54		 addb	 0,x
ROM:FF56		 adca	 #0
ROM:FF58		 pulx
ROM:FF59		 pulx
ROM:FF5A		 ins
ROM:FF5B		 jmp	 0,x
ROM:FF5D
ROM:FF5D ; =============== S U B R O U T I N E =======================================
ROM:FF5D
ROM:FF5D
ROM:FF5D Mult_FF5D:				 ; CODE	XREF: sub_EA34+40P
ROM:FF5D					 ; sub_F12D+2AP
ROM:FF5D		 psha
ROM:FF5E		 pshx
ROM:FF5F		 pshb
ROM:FF60		 pshb
ROM:FF61		 pshx
ROM:FF62		 psha
ROM:FF63		 tsx
ROM:FF64		 ldd	 0,x
ROM:FF66		 mul
ROM:FF67		 std	 0,x
ROM:FF69		 ldd	 2,x
ROM:FF6B		 mul
ROM:FF6C		 std	 2,x
ROM:FF6E		 ldd	 4,x
ROM:FF70		 mul
ROM:FF71		 std	 4,x
ROM:FF73		 ldd	 6,x
ROM:FF75		 mul
ROM:FF76		 addd	 4,x
ROM:FF78		 bcs	 loc_FF81
ROM:FF7A		 addd	 1,x
ROM:FF7C		 tst	 0,x
ROM:FF7E		 beq	 loc_FF81
ROM:FF80		 sec
ROM:FF81
ROM:FF81 loc_FF81:				 ; CODE	XREF: Mult_FF5D+1Bj
ROM:FF81					 ; Mult_FF5D+21j
ROM:FF81		 pulx
ROM:FF82		 pulx
ROM:FF83		 pulx
ROM:FF84		 pulx
ROM:FF85		 rts
ROM:FF85 ; End of function Mult_FF5D
ROM:FF85
ROM:FF86
ROM:FF86 ; =============== S U B R O U T I N E =======================================
ROM:FF86
ROM:FF86
ROM:FF86 sub_FF86:				 ; CODE	XREF: doTick_4ms+3P
ROM:FF86					 ; ROM:F099P
ROM:FF86		 ldaa	 byte_C000
ROM:FF89		 cmpa	 #$56 ;	'V'
ROM:FF8B		 bne	 locret_FFC5
ROM:FF8D		 ldab	 byte_C001	 ; read/write
ROM:FF90		 rorb
ROM:FF91		 bcc	 locret_FFC5
ROM:FF93		 andb	 #$7E ;	'~'
ROM:FF95		 stab	 byte_C001	 ; read/write
ROM:FF98		 ldx	 byte_C004	 ; read	only used as a ptr to upper addresses in this chip?
ROM:FF9B		 ldd	 word_C002	 ; read	only shift and test (RTC like?)
ROM:FF9E		 rora
ROM:FF9F		 bcs	 loc_FFA6
ROM:FFA1		 rorb
ROM:FFA2		 bcs	 loc_FFAE
ROM:FFA4		 bra	 loc_FFB7
ROM:FFA6 ; ---------------------------------------------------------------------------
ROM:FFA6
ROM:FFA6 loc_FFA6:				 ; CODE	XREF: sub_FF86+19j
ROM:FFA6		 rorb
ROM:FFA7		 bcc	 loc_FFB2
ROM:FFA9		 ldd	 word_C006
ROM:FFAC		 std	 0,x
ROM:FFAE
ROM:FFAE loc_FFAE:				 ; CODE	XREF: sub_FF86+1Cj
ROM:FFAE		 ldd	 0,x
ROM:FFB0		 bra	 loc_FFBA
ROM:FFB2 ; ---------------------------------------------------------------------------
ROM:FFB2
ROM:FFB2 loc_FFB2:				 ; CODE	XREF: sub_FF86+21j
ROM:FFB2		 ldab	 word_C006+1
ROM:FFB5		 stab	 0,x
ROM:FFB7
ROM:FFB7 loc_FFB7:				 ; CODE	XREF: sub_FF86+1Ej
ROM:FFB7		 clra
ROM:FFB8		 ldab	 0,x
ROM:FFBA
ROM:FFBA loc_FFBA:				 ; CODE	XREF: sub_FF86+2Aj
ROM:FFBA		 std	 word_C006
ROM:FFBD		 ldaa	 byte_C001	 ; read/write
ROM:FFC0		 oraa	 #$80 ;	'€'
ROM:FFC2		 staa	 byte_C001	 ; read/write
ROM:FFC5
ROM:FFC5 locret_FFC5:				 ; CODE	XREF: sub_FF86+5j
ROM:FFC5					 ; sub_FF86+Bj
ROM:FFC5		 rts
ROM:FFC5 ; End of function sub_FF86
ROM:FFC5
ROM:FFC6
ROM:FFC6 ; =============== S U B R O U T I N E =======================================
ROM:FFC6
ROM:FFC6
ROM:FFC6 sub_FFC6:				 ; CODE	XREF: doTick_4ms+6P
ROM:FFC6					 ; ROM:F09CP
ROM:FFC6		 ldaa	 byte_C000	 ;  this appears to copy one memory section to another
ROM:FFC9		 cmpa	 #$56 ;	'V'
ROM:FFCB		 bne	 locret_FFE6
ROM:FFCD		 ldx	 #4
ROM:FFD0		 pshx			 ;  stack = 4
ROM:FFD1		 ldx	 #$C008
ROM:FFD4
ROM:FFD4 loc_FFD4:				 ; CODE	XREF: sub_FFC6+28j
ROM:FFD4		 pshx			 ;  stack = C008
ROM:FFD5		 ldd	 0,x		 ;  D =	(C008)
ROM:FFD7		 pshb
ROM:FFD8		 psha			 ;  stack = (C008)
ROM:FFD9		 pulx			 ;  X =	(C008)
ROM:FFDA		 ldd	 0,x		 ;  D =	0,(C008)
ROM:FFDC		 pulx			 ;  X =	C008
ROM:FFDD		 std	 2,x		 ;  C00A = D
ROM:FFDF		 pshx			 ;  stack = C008
ROM:FFE0		 pula
ROM:FFE1		 pulb			 ;   D = C008
ROM:FFE2		 pulx			 ;  X =	loop count?
ROM:FFE3		 dex
ROM:FFE4		 bne	 loc_FFE7
ROM:FFE6
ROM:FFE6 locret_FFE6:				 ; CODE	XREF: sub_FFC6+5j
ROM:FFE6		 rts
ROM:FFE7 ; ---------------------------------------------------------------------------
ROM:FFE7
ROM:FFE7 loc_FFE7:				 ; CODE	XREF: sub_FFC6+1Ej
ROM:FFE7		 pshx
ROM:FFE8		 addd	 #4
ROM:FFEB		 pshb
ROM:FFEC		 psha
ROM:FFED		 pulx
ROM:FFEE		 bra	 loc_FFD4
ROM:FFEE ; End of function sub_FFC6
ROM:FFEE
ROM:FFEE ; ---------------------------------------------------------------------------
ROM:FFF0 SIO:		 fdb $F000
ROM:FFF2 TOI:		 fdb $F000
ROM:FFF4 OC1:		 fdb $FC2A
ROM:FFF6 IC1:		 fdb $E900
ROM:FFF8 IRQ:		 fdb $E800
ROM:FFFA SWI:		 fdb $F000
ROM:FFFC NMI:		 fdb $F000
ROM:FFFE RESET:		 fdb $F000
ROM:FFFE ; end of 'ROM'
ROM:FFFE
ROM:FFFE
ROM:FFFE		 end
