# sleigh specification file for Toshiba TMP76x55x

define endian=big;
define alignment=1;

@define SERIALRXI_VECTOR "0xFFE0"
@define FFE2_VECTOR "0xFFE2"
@define RTI_VECTOR  "0xFFE4"
@define FFE6_VECTOR "0xFFE6"
@define FFE8_VECTOR "0xFFE8"
@define FFEA_VECTOR "0xFFEA"
@define OC_3_VECTOR "0xFFEC"
@define OC_2_VECTOR "0xFFEE"
@define OC_1_VECTOR "0xFFF0"
@define FFF2_VECTOR "0xFFF2"
@define IC_2_VECTOR "0xFFF4"
@define IC_1_VECTOR "0xFFF6"
@define FFF8_VECTOR "0xFFF8"
@define FFFA_VECTOR "0xFFFA"
@define FFFC_VECTOR "0xFFFC"
@define RST_VECTOR  "0xFFFE"

define space RAM      type=ram_space      size=2  default;
define space register type=register_space size=1;
#define space ROM      type=ram_space      size=2;

define register offset=0x00 size=1 [ A B ];
define register offset=0x00 size=2 [ D ];
define register offset=0x10 size=2 [ X Y ];
define register offset=0x20 size=2 [ PC SP ];
define register offset=0x30 size=1 [ H I N Z V C ];	# status bits

#
#TOKENS
#

#define token tokenname ( integer )
#  fieldname=(integer,integer) attributelist
#  ...
#;

define token opbyte8 (8)
   op      = (0,7)
   op_hi   = (4,7)
   op_lo   = (0,3)
;

define token opbyte16 (16)
   op_a    = (8,15)
   op_a_hi = (12,15)
   op_a_lo = (8,11)
   op_b    = (0,7)
   op_b_hi = (4,7)
   op_b_lo = (0,3)
;

define token data8 (8)
   byte8	 = (0,7)
   rel		 = (0,7) signed
;

define token data16 (16)
	byte16   = (0,15)
  byte16_a = (0,7)
  byte16_b = (8,15)
;

define token data24 (24)
   byte_a  = (16,23)
   byte_b  = (8,15)
   rel_2   = (0,7) signed
;

#
# Psuedo Instructions
#

#define pcodeop readIRQ;

#
# ========== Tables
#

#Table header
#Table #Display   #Bit Pattern                    #Action                       #Semantics
#TABLE:DISPLAY is (MATCH & MATCH | MATCH); MATCH  [ reloc = inst_next + FEILD ] { export *:N FIELD; }
###

REL:    reloc		is rel	[ reloc = inst_next + rel; ] { export *:2 reloc; } #{ export *[ROM]:2 reloc; }

#Immediate 8 - 02, 03, & 0x8*
IMM8: "#"byte8
is ((op=0x80 | op=0x81 | op=0x82 | op=0x84 | op=0x85 | op=0x86 | op=0x88 | op=0x89 | op=0x8A | op=0x8B) |
(op=0xC0 | op=0xC1 | op=0xC2 | op=0xC4 | op=0xC5 | op=0xC6 | op=0xC7 | op=0xC8 | op=0xC9 | op=0xCA | op=0xCB));
byte8
{
  #tmp:1 = byte8;
  #export tmp;
  export *[const]:1 byte8;
} #IMMEDIATE/8

IMM8: "#"byte16_a
is (op=0x02 | op=0x03); byte16_a { export *[const]:1 byte16_a; } #{ tmp:1 = byte16_a; export tmp; } #IMMEDIATE/8

#Immediate 16
IMM16: "#"byte16
is (op=0x1C | op=0x83 | op=0x8C | op=0x8E | op=0xC3 | op=0xCC | op=0xCE);
byte16
{
  #tmp:2 = byte16;
  #export tmp;
  export *[const]:2 byte16;
} #IMMEDIATE/16

IMM16: "#"byte16
is (op_a=0xCD & (op_b=0x08 | op_b=0x09 | op_b=0x1A | op_b=0x3A | op_b=0x8C | op_b=0xCE | op_b=0xDF | op_b=0xEE));
byte16
{
  #tmp:2 = byte16;
  #export tmp;
  export *[const]:2 byte16;
} #IMMEDIATE/16

#DIRECT/8
PTR8: byte16_b is (op=0x02 | op=0x03); byte16_b { export *:1 byte16_b; }
#DIRECT/8
PTR8: byte8    is (op=0x14 | op=0x15 | op=0x1D | op_hi=0x9 | op_hi=0xD); byte8 { export *:1 byte8; }

#EXTENDED/16
PTR8: byte16   is (op_hi=0x7 | op_hi=0xB | op_hi=0xF); byte16 { export *:1 byte16; }

#INDEXED-X/8
PTR8: byte8,X  is (op_hi=0x6 | op_hi=0xA | op_hi=0xE) & X; byte8 { tmp:2 = byte8 + X; export *:1 tmp; }

#INDEXED-Y/8
PTR8: Y is ((op_a_hi=0xA | op_a_hi=0xE) & op_b=0x80) & Y { export *:1 Y; }

#2-byte data [ DIRECT ]
PTR16: byte8    is (op=0xD3 | op=0x93);     byte8 { export *:2 byte8; } #ADDD, SUBD
PTR16: byte8    is (op=0x1D | op=0x9C);     byte8 { export *:2 byte8; } #CPD, CPX
PTR16: byte8    is (op=0xDC | op=0xDD);     byte8 { export *:2 byte8; } #LDD, STD
PTR16: byte8    is (op=0xDE | op=0xDF);     byte8 { export *:2 byte8; } #LDX, STX
PTR16: byte8    is (op=0x9E | op=0x9F);     byte8 { export *:2 byte8; } #LDS, STS
PTR16: byte8    is (op_a=0xCD & op_b=0xDF); byte8 { export *:2 byte8; } #STY

# [ EXTENDED ]
PTR16: byte16   is (op=0xF3 | op=0xB3);         byte16 { export *:2 byte16; } #ADDD, SUBD
PTR16: byte16   is (op=0x1F | op=0xBC);         byte16 { export *:2 byte16; } #CPD, CPX
PTR16: byte16   is (op=0xFC | op=0xFD);         byte16 { export *:2 byte16; } #LDD, STD
PTR16: byte16   is (op=0xFE | op=0xFF);         byte16 { export *:2 byte16; } #LDX, STX
PTR16: byte16   is (op=0xBE | op=0xBF);         byte16 { export *:2 byte16; } #LDS, STS

# [ INDEXED X ]
PTR16: byte8,X  is (op=0xE3 | op=0xA3) & X;     byte8 { tmp:2 = byte8 + X; export *:2 tmp; } #ADDD, SUBD
PTR16: byte8,X  is (op=0xAC) & X;               byte8 { tmp:2 = byte8 + X; export *:2 tmp; } #CPX
PTR16: byte8,X  is (op=0x1E) & X;               byte8 { tmp:2 = byte8 + X; export *:2 tmp; } #CPD
PTR16: byte8,X  is (op=0xEC | op=0xED) & X;     byte8 { tmp:2 = byte8 + X; export *:2 tmp; } #LDD, STD
PTR16: byte8,X  is (op=0xEE | op=0xEF) & X;     byte8 { tmp:2 = byte8 + X; export *:2 tmp; } #LDX, STX
PTR16: byte8,X  is (op=0xAE | op=0xAF) & X;     byte8 { tmp:2 = byte8 + X; export *:2 tmp; } #LDS, STS
PTR16: byte8,X  is (op_a=0xCD & op_b=0xEE) & X; byte8 { tmp:2 = byte8 + X; export *:2 tmp; } #LDY

# [ INDEXED Y ]
PTR16: Y        is ((op_a=0xE3 | op_a=0xA3) & op_b=0x80) & Y { export *:2 Y; } #ADDD, SUBD
PTR16: Y        is (op_a=0xAC & op_b=0x80) & Y               { export *:2 Y; } #CPX
PTR16: Y        is ((op_a=0xEC | op_a=0xED) & op_b=0x80) & Y { export *:2 Y; } #LDD, STD
PTR16: Y        is ((op_a=0xEE | op_a=0xEF) & op_b=0x80) & Y { export *:2 Y; } #LDX, STX
PTR16: Y        is ((op_a=0xAE | op_a=0xAF) & op_b=0x80) & Y { export *:2 Y; } #LDS, STS

ADDR: byte8     is op=0x9D;                     byte8	 { export *:1 byte8;  } #{ export *[ROM]:1 byte8;  } #JSR
ADDR: byte16    is (op=0x7E | op=0xBD);         byte16 { export *:1 byte16; } #{ export *[ROM]:1 byte16; } #JMP, JSR

ADDRI: byte8,X  is (op=0x6E | op=0xAD) & X;     byte8  { tmp:2 = byte8 + X; export tmp; } #JMP, JSR

#4-byte instruction
PTR8: byte_a    is (op=0x87 | op=0x8F);     byte_a { export *:1 byte_a; }                  #BRSET, dir; BRCLR,dir
PTR8: byte_a,X  is (op=0xC7 | op=0xCF) & X; byte_a { tmp:2 = byte_a + X; export *:1 tmp; } #BRSET ind,x; BRCLR ind,x

IMM8: "#"byte_b is (op=0x87 | op=0x8F | op=0xCF); byte_b
{
  #tmp:1 = byte_b;
  #export tmp;
  export *[const]:1 byte_b;
}

REL: reloc is (op=0x87 | op=0x8F | op=0xCF); rel_2 [ reloc = inst_next + rel_2; ] { export *:2 reloc; } #{ export *[ROM]:2 reloc; } #

#
# ========== MACROS
#

macro adc8(reg, data)
{
  local op1 = data;

  # compute half carry
  local halfop1 = op1 & 0xF;
  local halfReg = reg & 0xF;
  local halfresult = halfop1 + halfReg + C;
  H = (halfresult >> 4) & 1;

  local result = reg + data;
  local tmpC = carry(reg, data);

  reg = result + C;
  C = carry(result, C);
  C = C | tmpC;
  Z = (reg == 0);
  N = (reg s< 0);
}

macro add8(reg, data)
{
  local op1 = data;

  # compute half carry
  local halfop1 = op1 & 0xF;
  local halfreg = reg & 0xF;
  local halfresult = halfop1 + halfreg;
  H = (halfresult >> 4) & 1;

  C = carry(reg, op1);
  reg = reg + op1;
  Z = (reg == 0);
  N = (reg s< 0);
}

macro add16(reg, data)
{
  local op1 = data;

  # compute half carry
  local halfop1 = op1 & 0xFF;
  local halfreg = reg & 0xFF;
  local halfresult = halfop1 + halfreg;
  local tmp:2 = (halfresult >> 8) & 1;
  H = tmp:1;

  C = carry(reg, op1);
  reg = reg + op1;
  Z = (reg == 0);
  N = (reg s< 0);
}

#
# ========== OPERATIONS
#

:ABA is op=0x1B
{
  add8(A, B);
}

:ABX is op=0x3A
{
  add16(X, zext(B));
}

:ABY is (op_a=0xCD & op_b=0x3A)
{
  add16(Y, zext(B));
}

:ADCA IMM8 is op=0x89 ... & IMM8
{
  adc8(A, IMM8);
}

:ADCA PTR8 is (op=0x99 | op=0xB9 | op=0xA9) & PTR8
{
  adc8(A, PTR8);
}

:ADCB IMM8 is op=0xC9 ... & IMM8
{
  adc8(B, IMM8);
}

:ADCB PTR8 is (op=0xD9 | op=0xF9 | op=0xE9) & PTR8
{
  adc8(B, PTR8);
}

:ADDA IMM8 is op=0x8B ... & IMM8
{
  add8(A, IMM8);
}

:ADDA PTR8 is (op=0x9B | op=0xAB | op=0xBB) & PTR8
{
  add8(A, PTR8);
}

:ADDB IMM8 is op=0xCB ... & IMM8
{
	add8(B, IMM8);
}

:ADDB PTR8 is (op=0xDB | op=0xEB | op=0xFB) & PTR8
{
	add8(B, PTR8);
}

:ADDD IMM16 is (op=0xC3) ... & IMM16
{
	add16(D, IMM16);
}

:ADDD PTR16 is (op=0xD3 | op=0xE3 | op=0xF3) ... & PTR16
{
	add16(D, PTR16);
}

:AIM PTR8, IMM8 is op=0x02 ... & IMM8 & PTR8
{
  PTR8 = PTR8 & IMM8;
}

:ANDA IMM8 is op=0x84 ... & IMM8
{
	A = A & IMM8;
	Z = (A == 0);
	N = (A s< 0);
}

:ANDA PTR8 is (op=0x94 | op=0xA4 | op=0xB4) & PTR8
{
	A = A & PTR8;
	Z = (A == 0);
	N = (A s< 0);
}

:ANDB IMM8 is op=0xC4 ... & IMM8
{
	B = B & IMM8;
	Z = (B == 0);
	N = (B s< 0);
}

:ANDB PTR8 is (op=0xD4 | op=0xE4 | op=0xF4) & PTR8
{
	B = B & PTR8;
	Z = (B == 0);
	N = (B s< 0);
}

:ASLA	is op=0x48
{
	C = A >> 7;
	A = A << 1;
	Z = (A == 0);
	N = (A s< 0);
}

:ASLB	is op=0x58
{
	C = B >> 7;
	B = B << 1;
	Z = (B == 0);
	N = (B s< 0);
}

:ASLD is op=0x05
{
  local tmp:2 = D >> 15;
	C = tmp:1;
	D = D << 1;
	Z = (D == 0);
	N = (D s< 0);
}

:ASL PTR8 is (op=0x68 | op=0x78) & PTR8
{
	local tmp = PTR8;
	C = tmp >> 7;
	tmp = tmp << 1;
	PTR8 = tmp;
	Z = (tmp == 0);
	N = (tmp s< 0);
}

:ASRA	is op=0x47
{
	C = A & 1;
	A = A s>> 1;
	Z = (A == 0);
	N = (A s< 0);
}

:ASRB	is op=0x57
{
	C = B & 1;
	B = B s>> 1;
	Z = (B == 0);
	N = (B s< 0);
}

:ASR PTR8 is (op=0x67 | op=0x77) & PTR8
{
	local tmp = PTR8;
	C = tmp & 1;
	tmp = tmp s>> 1;
  PTR8 = tmp;
	Z = (tmp == 0);
	N = (tmp s< 0);
}

:BCC REL is op=0x24; REL
{
	if (C == 0) goto REL;
}

:BCS REL is op=0x25; REL
{
	if (C) goto REL;
}

:BEQ REL is op=0x27; REL
{
	if (Z) goto REL;
}

:BGE REL is op=0x2C; REL
{
	local tmp = N == V;
	if (tmp) goto REL;
}

:BGT REL is op=0x2E; REL
{
	local tmp = !Z && N == V;
	if (tmp) goto REL;
}

:BHI REL is op=0x22; REL
{
	local tmp = C + Z;
	if (tmp == 0) goto REL;
}

#:BHS REL	is op=0x24;REL		See BCC

:BITA IMM8 is op=0x85 ... & IMM8
{
	local result = A & IMM8;
	Z = (result == 0);
	N = (result s< 0);
}

:BITA PTR8 is (op=0x95 | op=0xA5 | op=0xB5) & PTR8
{
	local result = A & PTR8;
	Z = (result == 0);
	N = (result s< 0);
}

:BITB IMM8 is op=0xC5 ... & IMM8
{
	local result = B & IMM8;
	Z = (result == 0);
	N = (result s< 0);
}

:BITB PTR8 is (op=0xD5 | op=0xE5 | op=0xF5) & PTR8
{
	local result = B & PTR8;
	Z = (result == 0);
	N = (result s< 0);
}

#:BLO REL	is op=0x25; REL		see BCS

:BLE REL is op=0x2F; REL
{
	local tmp = !C & Z;
	if (tmp) goto REL;
}

:BLS REL is op=0x23; REL
{
	local tmp = C + Z;
	if (tmp) goto REL;
}

:BLT REL is op=0x2D; REL
{
	local tmp = N != V;
	if (tmp) goto REL;
}

:BMI REL is op=0x2B; REL
{
	if (N) goto REL;
}

:BNE REL is op=0x26; REL
{
	if (Z == 0) goto REL;
}

:BPL REL is op=0x2A; REL
{
	if (N == 0) goto REL;
}

:BRA REL is op=0x20;REL
{
	goto REL;
}

:BRCLR PTR8, IMM8, REL is op=0x8F ... & PTR8 & IMM8 & REL
{
	local mask = IMM8;
	local result = PTR8 & mask;
	if (result == 0) goto REL;
}

:BRCLR PTR8, IMM8, REL is op=0xCF ... & REL & IMM8 & PTR8
{
	local mask = IMM8;
  local result = PTR8 & mask;
  if (result == 0) goto REL;
}

:BRN REL	is op=0x21; REL
{
}

:BRSET PTR8, IMM8, REL is op=0x87 ... & REL & IMM8 & PTR8
{
	local mask = IMM8;
	local result = PTR8 & mask;
	if (result != 0) goto REL;
}

:BRSET PTR8, IMM8, REL is op=0xC7 ... & REL & IMM8 & PTR8
{
	local mask = IMM8;
	local result = PTR8 & mask;
	if (result != 0) goto REL;
}

:BSR REL is op=0x8D; REL
{
	*:2 SP = inst_next;
  SP = SP - 2;
	goto REL;
}

:CBA is op=0x11
{
	local op1 = B;
	local tmp = A - op1;
	Z = tmp == 0;
	N = tmp s< 0;
	C = (A < op1);
}

:CLC is op=0x0C
{
	C = 0;
}

:CLI is op=0x0E
{
	I = 0;
}

:CLRA	is op=0x4F
{
	A = 0;
	Z = 1;
	N = 0;
}

:CLRB	is op=0x5F
{
	B = 0;
	Z = 1;
	N = 0;
}

:CLR PTR8 is (op=0x6F | op=0x7F) & PTR8
{
	PTR8 = 0;
	Z = 1;
	N = 0;
}

:CMPA IMM8 is op=0x81 ... & IMM8
{
	local op1 = IMM8;
	local tmp = A - op1;
	Z = tmp == 0;
	N = tmp s< 0;
	C = (A < op1);
}

:CMPA PTR8 is (op=0x91 | op=0xA1 | op=0xB1) & PTR8
{
	local op1 = PTR8;
	local tmp = A - op1;
	Z = tmp == 0;
	N = tmp s< 0;
	C = (A < op1);
}

:CMPB IMM8 is op=0xC1 ... & IMM8
{
	local op1 = IMM8;
	local tmp = B - op1;
	Z = tmp == 0;
	N = tmp s< 0;
	C = (B < op1);
}

:CMPB PTR8 is (op=0xD1 | op=0xE1 | op=0xF1) & PTR8
{
	local op1 = PTR8;
	local tmp = B - op1;
	Z = tmp == 0;
	N = tmp s< 0;
	C = (B < op1);
}

:CPD PTR16 is (op=0x1E) & PTR16
{
	local op1 = PTR16;
	local tmp = X - op1;
	Z = tmp == 0;
	N = tmp s< 0;
	C = (X < op1);
}

:CMPY IMM16 is (op_a=0xCD & op_b=0x8C) ... & IMM16
{
	local op1:2 = IMM16;
	local tmp = Y - op1;

  Y = Y + 1;

	Z = tmp == 0;
	N = tmp s< 0;
	C = (Y < op1);
}

:COMA	is op=0x43
{
	A = ~A;
	Z = (A == 0);
	N = (A s< 0);
	C = 1;
}

:COMB		is op=0x53
{
	B = ~B;
	Z = (B == 0);
	N = (B s< 0);
	C = 1;
}

:COM PTR8	is (op=0x63 | op=0x73) & PTR8
{
	local tmp = ~PTR8;
	PTR8 = tmp;
	Z = (tmp == 0);
	N = (tmp s< 0);
	C = 1;
}

:CPD IMM16 is op=0x1C ... & IMM16
{
	local op1 = IMM16;
	local tmp = D - op1;
	Z = tmp == 0;
	N = tmp s< 0;
	C = (D < op1);
}

:CPD PTR16 is (op=0x1D | op=0x1F) & PTR16
{
	local op1 = PTR16;
	local tmp = D - op1;
	Z = tmp == 0;
	N = tmp s< 0;
	C = (D < op1);
}

:CPX IMM16 is op=0x8C ... & IMM16
{
	local op1 = IMM16;
	local tmp = X - op1;
	Z = tmp == 0;
	N = tmp s< 0;
	C = (X < op1);
}

:CPX PTR16 is (op=0x9C | op=0xAC | op=0xBC) & PTR16
{
	local op1 = PTR16;
	local tmp = X - op1;
	Z = tmp == 0;
	N = tmp s< 0;
	C = (X < op1);
}

:DAA	is op=0x19 unimpl #DECIMAL ADJUST ACCUMULATOR A

:DEC PTR8 is (op=0x6A | op=0x7A) & PTR8
{
	local tmp = PTR8 - 1;
	PTR8 = tmp;
	Z = (tmp == 0);
	N = (tmp s< 0);
}

:DECA	is op=0x4A
{
	A = A - 1;
	Z = (A == 0);
	N = (A s< 0);
}

:DECB	is op=0x5A
{
	B = B - 1;
	Z = (B == 0);
	N = (B s< 0);
}

:DES is op=0x34
{
	SP = SP - 1;
	Z = (SP == 0);
	N = (SP s< 0);
}

:DEX is op=0x09
{
	X = X - 1;
	Z = (X == 0);
	N = (X s< 0);
}

:DEY is op_a=0xCD & op_b=0x09
{
	X = X - 1;
	Z = (X == 0);
	N = (X s< 0);
}

:EORA IMM8 is (op=0x88) ... & IMM8
{
	local op1 = IMM8;
	A = A ^ op1;
	Z = A == 0;
	N = A s< 0;
}

:EORA PTR8 is (op=0x98 | op=0xA8 | op=0xB8) & PTR8
{
	local op1 = PTR8;
	A = A ^ op1;
	Z = A == 0;
	N = A s< 0;
}

:EORB IMM8 is (op=0xC8) ... & IMM8
{
	local op1 = IMM8;
	B = B ^ op1;
	Z = B == 0;
	N = B s< 0;
}

:EORB PTR8 is (op=0xD8 | op=0xE8 | op=0xF8) & PTR8
{
	local op1 = PTR8;
	B = B ^ op1;
	Z = B == 0;
	N = B s< 0;
}

:FDIV PTR8 is op=0x15 & PTR8
{
  local numerator:2 = D;
  local denominator:2 = zext(PTR8);
  local result = numerator f/ denominator;
  local remainder = numerator % denominator;
  B = result:1;
  A = remainder:1;
  C = (numerator > denominator);
}

:IDIV PTR8 is op=0x14 & PTR8
{
  local numerator:2 = D;
  local denominator:2 = zext(PTR8);
  local result = numerator / denominator;
  local remainder = numerator % denominator;
  B = result:1;
  A = remainder:1;
  C = (numerator > denominator);
}

:INC PTR8 is (op=0x6C | op=0x7C) & PTR8
{
	local tmp = PTR8 + 1;
	PTR8 = tmp;
	Z = (tmp == 0);
	N = (tmp s< 0);
}

:INCA	is op=0x4C
{
	A = A + 1;
	Z = (A == 0);
	N = (A s< 0);
}

:INCB	is op=0x5C
{
	B = B + 1;
	Z = (B == 0);
	N = (B s< 0);
}

:INS	is op=0x31
{
	SP = SP + 1;
	Z = (SP == 0);
	N = (SP s< 0);
}

:INX	is op=0x08
{
	X = X + 1;
	Z = (X == 0);
	N = (X s< 0);
}

:INY	is op_a=0xCD & op_b=0x08
{
	Y = Y + 1;
	Z = (Y == 0);
	N = (Y s< 0);
}

:JMP ADDR	is op=0x7E ... & ADDR
{
	goto ADDR;
}

:JMP ADDRI	is op=0x6E ... & ADDRI
{
	goto [ADDRI];
}

:JSR ADDR	is (op=0x9D | op=0xBD) ... & ADDR
{
	*:2 SP = inst_next;
  SP = SP - 2;
	call ADDR;
}

:JSR ADDRI is op=0xAD ... & ADDRI
{
	*:2 SP = inst_next;
  SP = SP - 2;
	call [ADDRI];
}

:LDAA IMM8 is op=0x86 ... & IMM8
{
	A = IMM8;
	Z = A == 0;
	N = A s< 0;
}

:LDAA PTR8 is (op=0x96 | op=0xA6 | op=0xB6) & PTR8
{
	A = PTR8;
	Z = A == 0;
	N = A s< 0;
}

:LDAB IMM8 is op=0xC6 ... & IMM8
{
	B = IMM8;
	Z = B == 0;
	N = B s< 0;
}

:LDAB PTR8 is (op=0xD6 | op=0xE6 | op=0xF6) & PTR8
{
	B = PTR8;
	Z = B == 0;
	N = B s< 0;
}

:LDD IMM16 is op=0xCC & IMM16
{
	D = IMM16;
	Z = D == 0;
	N = D s< 0;
}

:LDD PTR16 is (op=0xDC | op=0xEC | op=0xFC) ... & PTR16
{
	D = PTR16;
  Z = D == 0;
	N = D s< 0;
}

:LDS IMM16 is (op=0x8E) ... & IMM16
{
  SP = IMM16; # This is correct
}

:LDS PTR16 is (op=0x9E | op=0xAE | op=0xBE) ... & PTR16
{
  SP = *:2 PTR16;
}

:LDX IMM16 is op=0xCE & IMM16
{
	X = IMM16;
	Z = X == 0;
	N = X s< 0;
}

:LDX PTR16 is (op=0xDE | op=0xEE | op=0xFE) ... & PTR16
{
	X = *:2 PTR16;
	Z = X == 0;
	N = X s< 0;
}

:LDY IMM16 is (op_a=0xCD & op_b=0xCE) & IMM16
{
	Y = IMM16;
	Z = Y == 0;
	N = Y s< 0;
}

:LDY PTR16 is (op_a=0xCD & op_b=0xEE) ... & PTR16
{
	Y = *:2 PTR16;
	Z = Y == 0;
	N = Y s< 0;
}

## Logical Shift left is same as arithmetic shift left
#:LSLA		is op=0x48
#:LSLX		is op=0x58
#:LSL IMM8	is (op=0x38 | op=0x68 | op=0x78) ... & IMM8

:LSR PTR8	is (op=0x64 | op=0x74) & PTR8
{
	local tmp = PTR8;
	C = tmp & 1;
	tmp = tmp >> 1;
	PTR8 = tmp;
	Z = (tmp == 0);
	N = 0;
}

:LSRA	is op=0x44
{
	C = A & 1;
	A = A >> 1;
	Z = (A == 0);
	N = 0;
}

:LSRB	is op=0x54
{
	C = B & 1;
	A = B >> 1;
	Z = (B == 0);
	N = 0;
}

:LSRD	is op=0x04
{
  C = D:1 & 0x1;
	D = D >> 1;
	Z = (D == 0);
	N = 0;
}

:MUL is op=0x3D
{
	op1 = zext(A);
	op2 = zext(B);
	local result = op1 * op2;
	X = result;
}

:NEG PTR8 is (op=0x60 | op=0x70) & PTR8
{
	local op1 = PTR8;
	C = op1 != 0;
	PTR8 = -op1;
	Z = (op1 == 0);
	N = (op1 s< 0);
}

:NEGA	is op=0x40
{
	C = A != 0;
	A = -A;
	Z = (A == 0);
	N = (A s< 0);
}

:NEGB	is op=0x50
{
	C = B != 0;
	B = -B;
	Z = (B == 0);
	N = (B s< 0);
}

:NOP is op = 0x01
{
}

:ORAA IMM8 is op=0x8A ... & IMM8
{
	A = A | IMM8;
	Z = (A == 0);
	N = (A s< 0);
}

:ORAA PTR8 is (op=0x9A | op=0xAA | op=0xBA) & PTR8
{
	A = A | PTR8;
	Z = (A == 0);
	N = (A s< 0);
}

:ORAB IMM8 is op=0xCA ... & IMM8
{
	B = B | IMM8;
	Z = (B == 0);
	N = (B s< 0);
}

:ORAB PTR8 is (op=0xDA | op=0xEA | op=0xFA) & PTR8
{
	B = B | PTR8;
	Z = (B == 0);
	N = (B s< 0);
}

:OIM PTR8, IMM8 is op=0x03 ... & PTR8 & IMM8
{
  PTR8 = PTR8 | IMM8;
}

:PSHA is op=0x36
{
  *:1 SP = A;
  SP = SP - 1;
}

:PSHB is op=0x37
{
  *:1 SP = B;
  SP = SP - 1;
}

:PSHX is op=0x3C
{
  *:2 SP = X;
  SP = SP - 2;
}

:PULA is op=0x32
{
  SP = SP + 1;
  A = *:1 SP;
}

:PULB is op=0x33
{
  SP = SP + 1;
  B = *:1 SP;
}

:PULX is op=0x38
{
  SP = SP + 2;
  X = *:2 SP;
}

:ROL PTR8 is (op=0x69 | op=0x79) & PTR8
{
	local tmpC = C;
	local op1 = PTR8;
	C = op1 >> 7;
	local result = op1 << 1;
	result = result | tmpC;
	PTR8 = result;
	Z = (result == 0);
	N = (result s< 0);
}

:ROLA		is op=0x49
{
	local tmp = C ;
	C = A >> 7;
	A = A << 1;
	A = A | tmp;
	Z = (A == 0);
	N = (A s< 0);
}

:ROLB		is op=0x59
{
	local tmp = B ;
	C = B >> 7;
	B = B << 1;
	B = B | tmp;
	Z = (B == 0);
	N = (B s< 0);
}

:RORA		is op=0x46
{
	local tmpC = C << 7;
	C = A & 1;
	A = A s>> 1;
	A = A | tmpC;
	Z = (A == 0);
	N = (A s< 0);
}

:RORB		is op=0x56
{
	local tmpC = C << 7;
	C = B & 1;
	B = B s>> 1;
	B = B | tmpC;
	Z = (B == 0);
	N = (B s< 0);
}

:ROR PTR8	is (op=0x66 | op=0x76) & PTR8
{
	local tmpC = C << 7;
	local tmp = PTR8;
	C = tmp & 1;
	tmp = tmp s>> 1;
	tmp = tmp | tmpC;
	PTR8 = tmp;
	Z = (tmp == 0);
	N = (tmp s< 0);
}

:RTI		is op = 0x3B
{
	SP = SP+1;
	local ccr = *:1 SP;
	H = ccr[4,1];
	I = ccr[3,1];
	N = ccr[2,1];
	Z = ccr[1,1];
	C = ccr[0,1];

	SP = SP+1;
	A = *:1 SP;

	SP = SP+1;
	X = *:1 SP;
	SP = SP+1;
	tmp:2 = *:2 SP;
	SP = SP+1;

	return [tmp];
}

:RTS		is op = 0x39
{
  SP = SP + 2;
	tmp:2 = *:2 SP;

	return [tmp];
}

:SBA is op=0x10
{
  C = (A < B);
  A = A - B;
  Z = A == 0;
  N = A s< 0;
  A = A;
}

:SBCA IMM8 is op=0x82 ... & IMM8
{
	local op1 = IMM8;
	local tmp = A - op1 - C;
	Z = tmp == 0;
	N = tmp s< 0;
	C = ((A <= op1) * C) | (A < op1);
	A = tmp;
}

:SBCA PTR8 is (op=0x92 | op=0xA2 | op=0xB2) & PTR8
{
	local op1 = PTR8;
	local tmp = A - op1 - C;
	Z = tmp == 0;
	N = tmp s< 0;
	C = ((A <= op1) * C) | (A < op1);
	A = tmp;
}

:SBCB IMM8 is op=0xC2 ... & IMM8
{
	local op1 = IMM8;
	local tmp = B - op1 - C;
	Z = tmp == 0;
	N = tmp s< 0;
	C = ((B <= op1) * C) | (B < op1);
	B = tmp;
}

:SBCB PTR8 is (op=0xD2 | op=0xE2 | op=0xF2) & PTR8
{
	local op1 = PTR8;
	local tmp = B - op1 - C;
	Z = tmp == 0;
	N = tmp s< 0;
	C = ((B <= op1) * C) | (B < op1);
	B = tmp;
}

:SEC is op = 0x0D
{
	C = 1;
}

:SEI is op = 0x0F
{
	I = 1;
}

:SEV is op = 0x0B
{
	V = 1;
}

:STAA PTR8 is (op=0x97 | op=0xA7 | op=0xB7) & PTR8
{
	PTR8 = A;
	Z = A == 0;
	N = A s< 0;
}

:STAB PTR8	is (op=0xD7 | op=0xE7 | op=0xF7) & PTR8
{
	PTR8 = B;
	Z = B == 0;
	N = B s< 0;
}

:STD PTR16 is (op=0xDD | op=0xED | op=0xFD) ... & PTR16
{
  *:2 PTR16 = D;
	Z = D == 0;
	N = D s< 0;
}

:STS PTR16 is (op=0x9F | op=0xAF | op=0xBF) ... & PTR16
{
  *:2 PTR16 = SP;
	Z = SP == 0;
	N = SP s< 0;
}

:STX PTR16	is (op=0xDF | op=0xEF | op=0xFF) ... & PTR16
{
	*:2 PTR16 = X;
	Z = X == 0;
	N = X s< 0;
}

:STY PTR16 is (op_a=0xCD & op_b=0xDF) ... & PTR16
{
	*:2 PTR16 = Y;
	Z = Y == 0;
	N = Y s< 0;
}

:SUBA IMM8 is op=0x80 ... & IMM8
{
	local op1 = IMM8;
	C = (A < op1);
	A = A - op1;
	Z = A == 0;
	N = A s< 0;
	A = A;
}

:SUBA PTR8 is (op=0x90 | op=0xA0 | op=0xB0) & PTR8
{
	local op1 = PTR8;
	C = (A < op1);
	A = A - op1;
	Z = A == 0;
	N = A s< 0;
	A = A;
}

:SUBB IMM8 is op=0xC0 ... & IMM8
{
	local op1 = IMM8;
	C = (B < op1);
	B = B - op1;
	Z = B == 0;
	N = B s< 0;
	B = B;
}

:SUBB PTR8 is (op=0xD0 | op=0xE0 | op=0xF0) & PTR8
{
	local op1 = PTR8;
	C = (B < op1);
	B = B - op1;
	Z = B == 0;
	N = B s< 0;
	B = B;
}

:SUBD IMM16 is op=0x83 ... & IMM16
{
	local op1 = IMM16;
	C = (D < op1);
	D = D - op1;
	Z = D == 0;
	N = D s< 0;
	D = D;
}

:SUBD PTR16 is (op=0x93 | op=0xA3 | op=0xB3) ... & PTR16
{
	local op1 = PTR16;
	C = (D < op1);
	D = D - op1;
	Z = D == 0;
	N = D s< 0;
	D = D;
}

:SWI is op=0x3F
{
	SP=SP-1;
	*:2 SP = inst_next;
	SP=SP-1;
	*:1 SP = X;
	SP=SP-1;
	*:1 SP = A;
	tmp:1 = 0b11100000 | (H << 4) | (I << 3) | (N << 2) | ( Z << 1) | C;
	SP=SP-1;
	*:1 SP = tmp;
	I = 1;
	#call [SWI_VECTOR];
}

:TAB is op=0x16
{
  A = B;
}

:TAP is op=0x06 unimpl

:TBA is op=0x17
{
  B = A;
}

:TEST	is op=0x00
{
}

:TPA is op=0x07 unimpl

:TST PTR8 is (op=0x6D |op=0x7D) & PTR8
{
	local op1 = PTR8;
	Z = (op1 == 0);
	N = (op1 s< 0);
}

:TSTA	is op=0x4D
{
	Z = (A == 0);
	N = (A s< 0);
}

:TSTB	is op=0x5D
{
	Z = (B == 0);
	N = (B s< 0);
}

:TSX is op=0x30
{
  local tmp:2 = SP;
  SP = X;
  X = tmp;
}

:TXS is op=0x35
{
  local tmp:2 = X;
  X = SP;
  SP = tmp;
}

:WAI	is op=0x3E
{
	I = 0;
}

:XGDX is op=0x1A
{
  local tmp:2 = D;
  D = X;
  X = tmp;
}

:XGDY is op_a=0xCD & op_b=0x1A
{
  local tmp:2 = D;
  D = Y;
  Y = tmp;
}

:XGXY is op=0x18
{
  local tmp:2 = Y;
  Y = X;
  X = tmp;
}
