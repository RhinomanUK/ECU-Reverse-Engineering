#define UNLOADED_FILE
#include <idc.idc>
    
static main(void)
{
MakeComm(0XE80E "byte_86 - 180h");
MakeComm(0XE848 "what?");
MakeComm(0XEC42 "test msb");
MakeComm(0XEC48 " bra if status_A0 bit6 is already set ");
MakeComm(0XEE66 "AF = 0001");
MakeComm(0XEE68 "enable IRQ");
MakeComm(0XEE6D "AN12");
MakeComm(0XEE6F " back up volts before call");
MakeComm(0XEE71 "B =? not used in call");
MakeComm(0XEE76 "bra if Vin < Vp");
MakeComm(0XEE7F "set status bit");
MakeComm(0XEE87 "set the voltage again - hysteresis??");
MakeComm(0XEE9F "D - 5C??");
MakeComm(0XEEA6 "enable IRQ");
MakeComm(0XEEAB "AN10");
MakeComm(0XEEB0 "test level");
MakeComm(0XEEBC "=13h");
MakeComm(0XEED3 "AN7");
MakeComm(0XEF80 "AN10");
MakeComm(0XEFB8 "AN7");
MakeComm(0XF017 "frch - 4ms");
MakeComm(0XF019 "loop back if not time");
MakeComm(0XF028 "bra if zero");
MakeComm(0XF02A "else inc");
MakeComm(0XF02C "bra if 80h");
MakeComm(0XF031 "byte_86 -14h");
MakeComm(0XF034 "bra if byte_86 < 14h");
MakeComm(0XF039 "bra if byte_86 < 35h");
MakeComm(0XF03D "clear status_A0 bit6");
MakeComm(0XF04F "clear A1");
MakeComm(0XF0CA " JT1_done = nop");
MakeComm(0XF0CC " never branch");
MakeComm(0XF0CE " always jump (to an rts) ");
MakeComm(0XF187 " if status_A0 bit0 = 0 do MAP");
MakeComm(0XF189 " else doTPS ");
MakeComm(0XF18E "limits");
MakeComm(0XF266 "test the busy flag");
MakeComm(0XF268 "loop till done");
MakeComm(0XF376 "TPS - TPS_16ms");
MakeComm(0XF378 "bra if closing throttle");
MakeComm(0XF37A "dTPS - 10h");
MakeComm(0XF37D "bra if dTPS<10h");
MakeComm(0XF37F "else ");
MakeComm(0XF382 "count_6D = 10h");
MakeComm(0XF388 "set A0 bit4 (dTPS correction)");
MakeComm(0XF38C "get dTPS correction");
MakeComm(0XF38E "bra if zero");
MakeComm(0XF391 "dec count");
MakeComm(0XF393 "bra if not zero");
MakeComm(0XF395 "if zero clear flag");
MakeComm(0XF399 "clear A0, bit4");
MakeComm(0XF39D "byte_86-280h");
MakeComm(0XF3A0 "should this be F3AD???");
MakeComm(0XF3A4 "test A0, bit4");
MakeComm(0XF3A6 "should this be F3AD???");
MakeComm(0XF3AD "F3AD?");
MakeComm(0XF3D0 " bra if TPS increasing");
MakeComm(0XF3D4 "clear bit5 if TPS increasing");
MakeComm(0XF3DA " Called if TPS increasing");
MakeComm(0XF3DA "B = dTPS_16ms");
MakeComm(0XF3DA "dTPS - 3");
MakeComm(0XF3DD "bra if dTPS > 3");
MakeComm(0XF3DF "else...");
MakeComm(0XF3EB "dTPS_16ms - 5");
MakeComm(0XF3EE "bra if dTPS<5");
MakeComm(0XF3F0 "X+2");
MakeComm(0XF3F2 "=10h");
MakeComm(0XF3F5 "bra if dTPS<10h");
MakeComm(0XF3F7 "else x+= 2");
MakeComm(0XF3F9 "temp_AF = dTPS");
MakeComm(0XF3FD " RPM-200h");
MakeComm(0XF400 "quit if RPM>200h");
MakeComm(0XF404 "TPS - F1h");
MakeComm(0XF407 "quit if TPS>F1h (flood clear??)");
MakeComm(0XF40B "quit if no timeout");
MakeComm(0XF48B "test busy flag");
MakeComm(0XF48F "isolate the comparator output bit");
MakeComm(0XF4C1 "test bit4");
MakeComm(0XF4D8 " =0h");
MakeComm(0XF53F " quit if TPS <	31h ");
MakeComm(0XF661 "AN8 or AN9");
MakeComm(0XF95E " pointer to ignition value ??");
MakeComm(0XF9CF "test bit6");
MakeComm(0XFB3F "test bit4");
MakeComm(0XFEEF " bra if not low rpm");
MakeComm(0XFEF3 " high byte - 8 ");
MakeComm(0XFEF5 " bra if high byte <8 ");
MakeComm(0XFEF7 " limit min rpm");
}
